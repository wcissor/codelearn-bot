from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üî• –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_learning")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Start/—Å—Ç–∞—Ä—Ç",
        reply_markup=reply_markup
    )


async def zero(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_learning":
        keyboard = [
            [InlineKeyboardButton("—Ä—É—Å—Å–∫–∏–π", callback_data="russian")],
            [InlineKeyboardButton("english", callback_data="english")],
            [InlineKeyboardButton("‰∏≠Âúã‰∫∫", callback_data="firstchinese")],
            [InlineKeyboardButton("T√ºrk√ße", callback_data="tuk")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåç *Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Dil se√ßin / ÈÅ∏ÊìáË™ûË®Ä*\n\n"
                                      "üá¨üáß English\n"
                               
                                      "üá∑üá∫ –†—É—Å—Å–∫–∏–π\n"
                                      "üá¶üáø Az…ôrbaycan dili\n"
                                      "üáπüá∑ T√ºrk√ße\n"
                                      "üáπüáº ÁπÅÈ´î‰∏≠Êñá\n"
                                      "‚û°Ô∏è Please tap your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Z…ôhm…ôt olmasa, dili se√ßin / Ë´ãÈÅ∏ÊìáË™ûË®Ä",
                                      reply_markup=reply_markup
                                      )


async def lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "russian":
        keyboard = [[InlineKeyboardButton("üî• –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="xxx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é?\n"
            ,
            reply_markup=reply_markup
        )
    elif query.data == "xxx":
        keyboard = [
            [InlineKeyboardButton("–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="continue_learning")],
            [InlineKeyboardButton("–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="cybersecurity")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:",
            reply_markup=reply_markup
        )
    elif query.data == "continue_learning":
        keyboard = [
            [InlineKeyboardButton("üêç Python ", callback_data="python")],
            [InlineKeyboardButton("‚öôÔ∏è C++ ", callback_data="cpp")],
            [InlineKeyboardButton("üü® Javascript", callback_data="script")],
            [InlineKeyboardButton("‚òï Java ", callback_data="toomycash")],
            [InlineKeyboardButton("üíª C", callback_data="huggywuggy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–•–û–†–û–®–û!! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:",
            reply_markup=reply_markup
        )

    elif query.data == "cybersecurity":
        keyboard = [
            [InlineKeyboardButton("üì°Networks", callback_data="cyber")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n–ì–ª–∞–≤–∞ 1",
            reply_markup=reply_markup
        )

    elif query.data == "cyber":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="next")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó –°–µ—Ç–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç—ã.\n"
                                      "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à –∫—Ä—É–≥ –¥—Ä—É–∑–µ–π: –≤—ã —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º,\n"
                                      "—Ö–æ–±–±–∏, –Ω–∞–≤—ã–∫–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–µ—â–∞–º. üß†ü§ù\n\n"
                                      "üì° –°–µ—Ç–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø–æ–≤—Å—é–¥—É:\n"
                                      " - üöá –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –≥–æ—Ä–æ–¥–µ\n"
                                      " - ‚ö° –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–∞–∫–∞—è –∫–∞–∫ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç—å\n"
                                      " - üèòÔ∏è –û–±—â–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥—è–º–∏\n"
                                      " - ‚úâÔ∏è –ü–æ—á—Ç–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –∏ –ø–æ—Å—ã–ª–æ–∫\n\n"
                                      "üíª –í –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ ‚Äî —Ç–∞ –∂–µ –∏–¥–µ—è, –Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n"
                                      "–í–æ–∑—å–º—ë–º –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω üì±: –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "üì∂ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–π—Å—Ç–≤—É—é—Ç.\n\n"
                                      "üñ•Ô∏è –í –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ —Å–µ—Ç—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
                                      "–°—é–¥–∞ –≤—Ö–æ–¥—è—Ç:\n"
                                      " - üíª –ù–æ—É—Ç–±—É–∫–∏\n"
                                      " - üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã\n"
                                      " - üì∑ –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
                                      " - üö¶ –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã\n"
                                      " - üåæ –î–∞–∂–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞!\n\n"
                                      "üîå –°–µ—Ç–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –Ω–∞—à—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å:\n"
                                      " - ‚õÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ\n"
                                      " - ‚ö° –ü–æ–¥–∞—á–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–æ–º–∞\n"
                                      " - üö¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–µ\n\n"
                                      "üõ°Ô∏è –ü–æ—Å–∫–æ–ª—å–∫—É —Å–µ—Ç–∏ —Å—Ç–∞–ª–∏ –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏,\n"
                                      "–ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–µ—Ç–µ–π ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                                      "üë• –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ö–µ–º—É –Ω–∏–∂–µ: –ê–ª–∏—Å–∞, –ë–æ–± –∏ –î–∂–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é —Å–µ—Ç—å!\n"
                                      "–ö —ç—Ç–æ–º—É –º—ã –µ—â—ë –≤–µ—Ä–Ω—ë–º—Å—è –ø–æ–∑–∂–µ...\n"
                                      "The first chapter is here!!\n"
                                      "–ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞ —É–∂–µ –∑–¥–µ—Å—å!!"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "next":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="two")],
            [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞",callback_data = "creschekgrfhrihiginggvfgigisthgifenjidhffkdnnvkjb")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *–ì–ª–∞–≤–∞ 2: –ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç!*\n\n"
                                      "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–æ–±–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äî –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç.\n\n"
                                      "üì° –ò–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ *–æ–≥—Ä–æ–º–Ω–∞—è —Å–µ—Ç—å*, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–µ—Ç–µ–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π.\n\n"
                                      "üë´ –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É –ê–ª–∏—Å—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥—Ä—É–∑—å—è ‚Äî –ó–µ–π–Ω –∏ –¢–æ–±–∏. –û–Ω–∞ —Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –∏—Ö —Å –ë–æ–±–æ–º –∏ –î–∂–∏–º–æ–º. –ù–æ –µ—Å—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: "
                                      "—Ç–æ–ª—å–∫–æ –ê–ª–∏—Å–∞ –ø–æ–Ω–∏–º–∞–µ—Ç —è–∑—ã–∫ –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø. –ü–æ—ç—Ç–æ–º—É –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è *—Å–≤—è–∑—É—é—â–∏–º –∑–≤–µ–Ω–æ–º* ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—ë. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π —Å–µ—Ç–∏.\n\n"
                                      "üìú –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –∫–æ–Ω—Ü–µ 1960-—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ *ARPANET*, —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º–æ–≥–æ –≤–æ–µ–Ω–Ω—ã–º–∏ –°–®–ê. "
                                      "–≠—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å–µ—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏.\n\n"
                                      "üåç –ê –≤ 1989 –≥–æ–¥—É –¢–∏–º –ë–µ—Ä–Ω–µ—Ä—Å-–õ–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é *–í—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω—ã (WWW)*, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ —É–¥–æ–±–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "üîå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –∫–∞–∫ –æ–≥—Ä–æ–º–Ω—ã–π –∫–ª—É–± –∏–∑ —Ç—ã—Å—è—á –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥. –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ —Å–µ—Ç–µ–π:\n"
                                      " - üîí –ß–∞—Å—Ç–Ω—ã–µ —Å–µ—Ç–∏ (Private Networks)\n"
                                      " - üåê –ü—É–±–ª–∏—á–Ω—ã–µ —Å–µ—Ç–∏ (Public Networks), –∫–æ—Ç–æ—Ä—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ç–æ, —á—Ç–æ –º—ã –Ω–∞–∑—ã–≤–∞–µ–º –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n\n"
                                      "üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ *–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã* (–º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –Ω–∏—Ö –¥–∞–ª—å—à–µ), —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
                                      "–ø–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞ –∑–¥–µ—Å—å!!!"
                                      ,
                                      reply_markup=reply_markup)
    elif query.data == "creschekgrfhrihiginggvfgigisthgifenjidhffkdnnvkjb":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="next")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó –°–µ—Ç–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç—ã.\n"
                                      "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à –∫—Ä—É–≥ –¥—Ä—É–∑–µ–π: –≤—ã —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–±—â–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º,\n"
                                      "—Ö–æ–±–±–∏, –Ω–∞–≤—ã–∫–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–µ—â–∞–º. üß†ü§ù\n\n"
                                      "üì° –°–µ—Ç–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø–æ–≤—Å—é–¥—É:\n"
                                      " - üöá –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –≥–æ—Ä–æ–¥–µ\n"
                                      " - ‚ö° –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç–∞–∫–∞—è –∫–∞–∫ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç—å\n"
                                      " - üèòÔ∏è –û–±—â–µ–Ω–∏–µ —Å —Å–æ—Å–µ–¥—è–º–∏\n"
                                      " - ‚úâÔ∏è –ü–æ—á—Ç–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –∏ –ø–æ—Å—ã–ª–æ–∫\n\n"
                                      "üíª –í –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ ‚Äî —Ç–∞ –∂–µ –∏–¥–µ—è, –Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.\n"
                                      "–í–æ–∑—å–º—ë–º –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω üì±: –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "üì∂ –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–π—Å—Ç–≤—É—é—Ç.\n\n"
                                      "üñ•Ô∏è –í –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ —Å–µ—Ç—å –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n"
                                      "–°—é–¥–∞ –≤—Ö–æ–¥—è—Ç:\n"
                                      " - üíª –ù–æ—É—Ç–±—É–∫–∏\n"
                                      " - üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã\n"
                                      " - üì∑ –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
                                      " - üö¶ –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã\n"
                                      " - üåæ –î–∞–∂–µ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞!\n\n"
                                      "üîå –°–µ—Ç–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –Ω–∞—à—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å:\n"
                                      " - ‚õÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ\n"
                                      " - ‚ö° –ü–æ–¥–∞—á–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–æ–º–∞\n"
                                      " - üö¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –¥–æ—Ä–æ–≥–µ\n\n"
                                      "üõ°Ô∏è –ü–æ—Å–∫–æ–ª—å–∫—É —Å–µ—Ç–∏ —Å—Ç–∞–ª–∏ –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏,\n"
                                      "–ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–µ—Ç–µ–π ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                                      "üë• –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ö–µ–º—É –Ω–∏–∂–µ: –ê–ª–∏—Å–∞, –ë–æ–± –∏ –î–∂–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é —Å–µ—Ç—å!\n"
                                      "–ö —ç—Ç–æ–º—É –º—ã –µ—â—ë –≤–µ—Ä–Ω—ë–º—Å—è –ø–æ–∑–∂–µ...\n"
                                      "The first chapter is here!!\n"
                                      "–ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞ —É–∂–µ –∑–¥–µ—Å—å!!"
                                      ,
                                      reply_markup=reply_markup)


    elif query.data == "two":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="three")],
            [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="creschemolecresclecreschemole")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""
üì° –ß—Ç–æ–±—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–≥–ª–∏ –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–µ—Ç–∏, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã:\n
‚Äî –£–∑–Ω–∞–≤–∞—Ç—å —Å–µ–±—è\n
‚Äî –ë—ã—Ç—å —É–∑–Ω–∞–≤–∞–µ–º—ã–º–∏ –¥—Ä—É–≥–∏–º–∏\n

üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ª—é–¥–µ–π:\n
‚Äî –£ –Ω–∞—Å –µ—Å—Ç—å –∏–º—è (–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å)\n
‚Äî –ò –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞)\n

üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–∂–µ –∏–º–µ—é—Ç –¥–≤–∞ —Ç–∏–ø–∞ "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏":\n
‚Äî IP-–∞–¥—Ä–µ—Å (üìç–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)\n
‚Äî MAC-–∞–¥—Ä–µ—Å (üîí–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π, –∫–∞–∫ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞)\n

=====================\n
üîπ IP-–∞–¥—Ä–µ—Å–∞\n
=====================\n
IP-–∞–¥—Ä–µ—Å ‚Äî —ç—Ç–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏.\n
–û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏:\n
–ü—Ä–∏–º–µ—Ä: `192.168.0.1`\n

üîÅ –û–¥–∏–Ω IP –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –¥—Ä—É–≥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, –Ω–æ –¥–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–¥–Ω–∏–º IP **–Ω–µ –º–æ–≥—É—Ç** —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏.\n

üåç –°—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–∞ –≤–∏–¥–∞ IP-–∞–¥—Ä–µ—Å–æ–≤:\n
‚Äî **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–¥–æ–º, –æ—Ñ–∏—Å)\n
‚Äî **–ü—É–±–ª–∏—á–Ω—ã–π IP** ‚Äî –≤–∏–¥–µ–Ω –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n

üßæ –ü—Ä–∏–º–µ—Ä:\n
| –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ      | –ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP     | –ü—É–±–ª–∏—á–Ω—ã–π IP      |\n
|----------------|------------------|-------------------|\n
| –ú–æ–π –ü–ö         | 192.168.1.77     | 86.157.52.21      |\n
| –î—Ä—É–≥–æ–π –ü–ö      | 192.168.1.74     | 86.157.52.21      |\n

üîç –û–±–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç **–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π IP** (–æ–¥–∏–Ω –º–æ–¥–µ–º), –Ω–æ **—Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ** ‚Äî —Ç–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏.\n

=====================\n
üåê –ü—Ä–æ–±–ª–µ–º–∞: –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!\n
=====================\n
IPv4 = 4.29 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –∞–¥—Ä–µ—Å–æ–≤ (2^32). –ù–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –º–∏—Ä–µ ‚Äî **–¥–µ—Å—è—Ç–∫–∏ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤**.\n

üí° –†–µ—à–µ–Ω–∏–µ:\n
‚Äî IPv6 = 340+ —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ (2^128)\n
‚Äî –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ\n
‚Äî –ì–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –∞–¥—Ä–µ—Å–æ–≤\n

–ü—Ä–∏–º–µ—Ä:\n
‚Äî IPv4: `192.168.1.1`\n
‚Äî IPv6: `2001:0db8:85a3:0000:0000:8a2e:0370:7334`\n

=====================\n
üîπ MAC-–∞–¥—Ä–µ—Å–∞\n
=====================\n
–ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º ‚Äî **MAC-–∞–¥—Ä–µ—Å**.\n
–§–æ—Ä–º–∞—Ç: `a4:c3:f0:85:ac:2d` (6 –±–∞–π—Ç –≤ 16-—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ)\n

üõ† –ü–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å.\n
üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n

üí• –ù–æ MAC-–∞–¥—Ä–µ—Å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è **—Å–ø—É—Ñ–∏–Ω–≥**:\n
‚Äî –ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n
‚Äî –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, firewall –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ MAC-–∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∞ ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –æ–±–º–∞–Ω—É—Ç—å!\n

=====================\n
üìå –í—ã–≤–æ–¥:\n
=====================\n
üîπ IP ‚Äî –º–µ–Ω—è–µ—Ç—Å—è, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ç–∏.\n
üîπ MAC ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.\n
üîπ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∏ IP, –Ω–∏ MAC –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å.\n
–ø–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞ –∑–¥–µ—Å—å!!!
""",
                                      reply_markup=reply_markup)
    elif query.data == "creschemolecresclecreschemole":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="two")],
            [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="creschekgrfhrihiginggvfgigisthgifenjidhffkdnnvkjb")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *–ì–ª–∞–≤–∞ 2: –ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç!*\n\n"
                                      "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç—ã –ø–æ–Ω—è–ª, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–æ–±–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äî –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç.\n\n"
                                      "üì° –ò–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ *–æ–≥—Ä–æ–º–Ω–∞—è —Å–µ—Ç—å*, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–µ—Ç–µ–π, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π.\n\n"
                                      "üë´ –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É –ê–ª–∏—Å—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥—Ä—É–∑—å—è ‚Äî –ó–µ–π–Ω –∏ –¢–æ–±–∏. –û–Ω–∞ —Ö–æ—á–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –∏—Ö —Å –ë–æ–±–æ–º –∏ –î–∂–∏–º–æ–º. –ù–æ –µ—Å—Ç—å –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: "
                                      "—Ç–æ–ª—å–∫–æ –ê–ª–∏—Å–∞ –ø–æ–Ω–∏–º–∞–µ—Ç —è–∑—ã–∫ –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø. –ü–æ—ç—Ç–æ–º—É –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è *—Å–≤—è–∑—É—é—â–∏–º –∑–≤–µ–Ω–æ–º* ‚Äî —Ç–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ—ë. –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π —Å–µ—Ç–∏.\n\n"
                                      "üìú –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –∫–æ–Ω—Ü–µ 1960-—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ *ARPANET*, —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º–æ–≥–æ –≤–æ–µ–Ω–Ω—ã–º–∏ –°–®–ê. "
                                      "–≠—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å–µ—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏.\n\n"
                                      "üåç –ê –≤ 1989 –≥–æ–¥—É –¢–∏–º –ë–µ—Ä–Ω–µ—Ä—Å-–õ–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é *–í—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω—ã (WWW)*, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ —É–¥–æ–±–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
                                      "üîå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –∫–∞–∫ –æ–≥—Ä–æ–º–Ω—ã–π –∫–ª—É–± –∏–∑ —Ç—ã—Å—è—á –º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–æ–º–∞–Ω–¥. –ï—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ —Å–µ—Ç–µ–π:\n"
                                      " - üîí –ß–∞—Å—Ç–Ω—ã–µ —Å–µ—Ç–∏ (Private Networks)\n"
                                      " - üåê –ü—É–±–ª–∏—á–Ω—ã–µ —Å–µ—Ç–∏ (Public Networks), –∫–æ—Ç–æ—Ä—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —Ç–æ, —á—Ç–æ –º—ã –Ω–∞–∑—ã–≤–∞–µ–º –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n\n"
                                      "üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ *–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã* (–º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –Ω–∏—Ö –¥–∞–ª—å—à–µ), —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
                                      "–ø–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞ –∑–¥–µ—Å—å!!!"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "three":
        keyboard = [[InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞",callback_data = "crmovefveiuorhoe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Ping ‚Äî —ç—Ç–æ –±–∞–∑–æ–≤—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.\n"
            "–û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ICMP (Internet Control Message Protocol),\n"
            "–æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ö–æ-–∑–∞–ø—Ä–æ—Å—ã –∏ –æ–∂–∏–¥–∞—è —ç—Ö–æ-–æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞.\n\n"

            "–° –ø–æ–º–æ—â—å—é ping –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å, –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–∞–∫–µ—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ –¥—Ä—É–≥–æ–≥–æ.\n\n"

            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –≤–∫–ª—é—á–∞—è Linux –∏ Windows.\n"
            "–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∏–Ω–≥, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É:\n"
            "`ping IP-–∞–¥—Ä–µ—Å` –∏–ª–∏ `ping –∏–º—è_—Å–∞–π—Ç–∞` –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n"

            "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É `ping 192.168.1.254`,\n"
            "–º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ,\n"
            "–∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4.16 –º—Å).", reply_markup = reply_markup)
    elif query.data == "crmovefveiuorhoe":
        keyboard = [
            [InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="three")],
            [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="creschemolecresclecreschemole")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""
        üì° –ß—Ç–æ–±—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–≥–ª–∏ –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–µ—Ç–∏, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã:\n
        ‚Äî –£–∑–Ω–∞–≤–∞—Ç—å —Å–µ–±—è\n
        ‚Äî –ë—ã—Ç—å —É–∑–Ω–∞–≤–∞–µ–º—ã–º–∏ –¥—Ä—É–≥–∏–º–∏\n

        üí° –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ª—é–¥–µ–π:\n
        ‚Äî –£ –Ω–∞—Å –µ—Å—Ç—å –∏–º—è (–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å)\n
        ‚Äî –ò –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞)\n

        üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–∂–µ –∏–º–µ—é—Ç –¥–≤–∞ —Ç–∏–ø–∞ "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏":\n
        ‚Äî IP-–∞–¥—Ä–µ—Å (üìç–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)\n
        ‚Äî MAC-–∞–¥—Ä–µ—Å (üîí–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π, –∫–∞–∫ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞)\n

        =====================\n
        üîπ IP-–∞–¥—Ä–µ—Å–∞\n
        =====================\n
        IP-–∞–¥—Ä–µ—Å ‚Äî —ç—Ç–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏.\n
        –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤), —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏:\n
        –ü—Ä–∏–º–µ—Ä: `192.168.0.1`\n

        üîÅ –û–¥–∏–Ω IP –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –¥—Ä—É–≥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, –Ω–æ –¥–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –æ–¥–Ω–∏–º IP **–Ω–µ –º–æ–≥—É—Ç** —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏.\n

        üåç –°—É—â–µ—Å—Ç–≤—É—é—Ç –¥–≤–∞ –≤–∏–¥–∞ IP-–∞–¥—Ä–µ—Å–æ–≤:\n
        ‚Äî **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP** ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–¥–æ–º, –æ—Ñ–∏—Å)\n
        ‚Äî **–ü—É–±–ª–∏—á–Ω—ã–π IP** ‚Äî –≤–∏–¥–µ–Ω –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n

        üßæ –ü—Ä–∏–º–µ—Ä:\n
        | –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ      | –ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP     | –ü—É–±–ª–∏—á–Ω—ã–π IP      |\n
        |----------------|------------------|-------------------|\n
        | –ú–æ–π –ü–ö         | 192.168.1.77     | 86.157.52.21      |\n
        | –î—Ä—É–≥–æ–π –ü–ö      | 192.168.1.74     | 86.157.52.21      |\n

        üîç –û–±–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç **–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π IP** (–æ–¥–∏–Ω –º–æ–¥–µ–º), –Ω–æ **—Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ** ‚Äî —Ç–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏.\n

        =====================\n
        üåê –ü—Ä–æ–±–ª–µ–º–∞: –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!\n
        =====================\n
        IPv4 = 4.29 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –∞–¥—Ä–µ—Å–æ–≤ (2^32). –ù–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –º–∏—Ä–µ ‚Äî **–¥–µ—Å—è—Ç–∫–∏ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤**.\n

        üí° –†–µ—à–µ–Ω–∏–µ:\n
        ‚Äî IPv6 = 340+ —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ (2^128)\n
        ‚Äî –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ\n
        ‚Äî –ì–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –∞–¥—Ä–µ—Å–æ–≤\n

        –ü—Ä–∏–º–µ—Ä:\n
        ‚Äî IPv4: `192.168.1.1`\n
        ‚Äî IPv6: `2001:0db8:85a3:0000:0000:8a2e:0370:7334`\n

        =====================\n
        üîπ MAC-–∞–¥—Ä–µ—Å–∞\n
        =====================\n
        –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º ‚Äî **MAC-–∞–¥—Ä–µ—Å**.\n
        –§–æ—Ä–º–∞—Ç: `a4:c3:f0:85:ac:2d` (6 –±–∞–π—Ç –≤ 16-—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ)\n

        üõ† –ü–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å.\n
        üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n

        üí• –ù–æ MAC-–∞–¥—Ä–µ—Å –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è **—Å–ø—É—Ñ–∏–Ω–≥**:\n
        ‚Äî –ó–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n
        ‚Äî –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, firewall –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ MAC-–∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∞ ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –æ–±–º–∞–Ω—É—Ç—å!\n

        =====================\n
        üìå –í—ã–≤–æ–¥:\n
        =====================\n
        üîπ IP ‚Äî –º–µ–Ω—è–µ—Ç—Å—è, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ç–∏.\n
        üîπ MAC ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.\n
        üîπ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∏ IP, –Ω–∏ MAC –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å.\n
        –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞ –∑–¥–µ—Å—å!!!
        """,
                                      reply_markup=reply_markup)


    elif query.data == "python":
        keyboard = [[
            InlineKeyboardButton("–ø–æ–≥–Ω–∞–ª–∏", callback_data="numberone")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "¬´–•–û–†–û–®–û!! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ Python üêç¬ª",
            reply_markup=reply_markup)
    elif query.data == "cpp":
        keyboard = [[
            InlineKeyboardButton("–≥–ª–∞–≤–∞ 1", callback_data="cpone")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–•–û–†–û–®–û!! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ C++ ‚öôÔ∏è",
            reply_markup=reply_markup)
    elif query.data == "script":
        keyboard = [[
            InlineKeyboardButton("–≥–ª–∞–≤–∞ 1", callback_data="jvone")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–•–û–†–û–®–û!! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ üü® –¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç ",
            reply_markup=reply_markup)
    elif query.data == "numberone":
        keyboard = [[InlineKeyboardButton("üêç–ù–∞—á–∞—Ç—å", callback_data="mcqueen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n–ì–ª–∞–≤–∞ 1:", reply_markup=reply_markup)

    elif query.data == "mcqueen":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="fuckincarti")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 64-bit –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PyCharm Community*\n\n"
            "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π Python*\n"
            "[–°–∫–∞—á–∞—Ç—å Python](https://www.python.org/downloads/) ‚Äî –≤—ã–±–µ—Ä–∏ Windows x86-64 executable installer\n\n"
            "üîπ *–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞*\n"
            "‚Äî –ü–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É Add Python to PATH\n"
            "‚Äî –í—ã–±–µ—Ä–∏ Customize Installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞*\n"
            "`python --version` –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å Python 3.X.X\n\n"
            "üîπ *–®–∞–≥ 4: –°–∫–∞—á–∞–π PyCharm*\n"
            "[–°–∫–∞—á–∞—Ç—å PyCharm](https://www.jetbrains.com/pycharm/download)\n"
            "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ –≤–µ—Ä—Å–∏—é Community\n\n"
            "üîπ *–®–∞–≥ 5: –ü–æ–¥–∫–ª—é—á–∏ Python*\n"
            "New Project ‚Üí ‚öôÔ∏è Add Interpreter ‚Üí System Interpreter ‚Üí –ø—É—Ç—å:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *–ü—Ä–æ–≤–µ—Ä–∫–∞:*\n"
            "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è Run",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "fuckincarti":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="ifelifelse")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞",callback_data = "nikogonebudetprostopodpishi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
            "‚Äî –≠—Ç–æ –∏–º—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
            "`x = 10` ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (int)\n"
            "`name = \"Tom\"` ‚Äî —Å—Ç—Ä–æ–∫–∞ (str)\n"
            "`pi = 3.14` ‚Äî —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (float)\n\n"
            "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
            "- int ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞\n"
            "- float ‚Äî —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π\n"
            "- str ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏\n"
            "- bool ‚Äî True / False (–ª–æ–≥–∏–∫–∞)\n\n"
            "üîπ *–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ?*\n"
            "`print(x)`\n`print(name)`\n`print(pi)`\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º:*\n"
            "```python\nage = 15\ncity = \"–ú–æ—Å–∫–≤–∞\"\nis_student = True\n\n"
            "print(\"–í–æ–∑—Ä–∞—Å—Ç:\", age)\nprint(\"–ì–æ—Ä–æ–¥:\", city)\nprint(\"–°—Ç—É–¥–µ–Ω—Ç:\", is_student)\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "nikogonebudetprostopodpishi":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="fuckincarti")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python 64-bit –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PyCharm Community*\n\n"
            "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π Python*\n"
            "[–°–∫–∞—á–∞—Ç—å Python](https://www.python.org/downloads/) ‚Äî –≤—ã–±–µ—Ä–∏ Windows x86-64 executable installer\n\n"
            "üîπ *–®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞*\n"
            "‚Äî –ü–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É Add Python to PATH\n"
            "‚Äî –í—ã–±–µ—Ä–∏ Customize Installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞*\n"
            "`python --version` –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å Python 3.X.X\n\n"
            "üîπ *–®–∞–≥ 4: –°–∫–∞—á–∞–π PyCharm*\n"
            "[–°–∫–∞—á–∞—Ç—å PyCharm](https://www.jetbrains.com/pycharm/download)\n"
            "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ –≤–µ—Ä—Å–∏—é Community\n\n"
            "üîπ *–®–∞–≥ 5: –ü–æ–¥–∫–ª—é—á–∏ Python*\n"
            "New Project ‚Üí ‚öôÔ∏è Add Interpreter ‚Üí System Interpreter ‚Üí –ø—É—Ç—å:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *–ü—Ä–æ–≤–µ—Ä–∫–∞:*\n"
            "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "–ù–∞–∂–º–∏ ‚ñ∂Ô∏è Run",
            parse_mode="Markdown", reply_markup=reply_markup
        )


    elif query.data == "ifelifelse":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="sezer")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞",callback_data = "egegeggeeggemeoreoy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *–£—Å–ª–æ–≤–∏—è –≤ Python: if, elif, else*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ.\n"
            "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è if, elif, else\n\n"
            "üîπ *–°–∏–Ω—Ç–∞–∫—Å–∏—Å:*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"–¢—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\")\n"
            "elif age >= 14:\n    print(\"–¢—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\")\nelse:\n    print(\"–¢—ã —Ä–µ–±—ë–Ω–æ–∫\")\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:* ==, !=, >, <, >=, <=\n"
            "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:* and, or, not\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º:*\n"
            "```python\nname = input(\"–¢–≤–æ—ë –∏–º—è: \")\nif name == \"Tom\":\n    print(\"–ü—Ä–∏–≤–µ—Ç, –¢–æ–º!\")\n"
            "else:\n    print(\"–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å!\")\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "egegeggeeggemeoreoy":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="ifelifelse")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="nikogonebudetprostopodpishi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
            "‚Äî –≠—Ç–æ –∏–º—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –¢–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
            "`x = 10` ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (int)\n"
            "`name = \"Tom\"` ‚Äî —Å—Ç—Ä–æ–∫–∞ (str)\n"
            "`pi = 3.14` ‚Äî —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (float)\n\n"
            "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
            "- int ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞\n"
            "- float ‚Äî —á–∏—Å–ª–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π\n"
            "- str ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏\n"
            "- bool ‚Äî True / False (–ª–æ–≥–∏–∫–∞)\n\n"
            "üîπ *–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ?*\n"
            "`print(x)`\n`print(name)`\n`print(pi)`\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º:*\n"
            "```python\nage = 15\ncity = \"–ú–æ—Å–∫–≤–∞\"\nis_student = True\n\n"
            "print(\"–í–æ–∑—Ä–∞—Å—Ç:\", age)\nprint(\"–ì–æ—Ä–æ–¥:\", city)\nprint(\"–°—Ç—É–¥–µ–Ω—Ç:\", is_student)\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "sezer":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="tututu")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zabiliibudemjitdalse")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: –¶–∏–∫–ª—ã for –∏ while*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ –∫–æ–¥–∞.\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤, —á–∏—Å–µ–ª –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª for:*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî –í—ã–≤–µ–¥–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n\n"
                                      "üî∏ range(5) —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0, 1, 2, 3, 4\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª while:*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.\n\n"
                                      "============================\n"
                                      "üîπ *–ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Å for:*\n"
                                      "```python\nfruits = [\"—è–±–ª–æ–∫–æ\", \"–±–∞–Ω–∞–Ω\", \"–≤–∏—à–Ω—è\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- for ‚Äî —É–¥–æ–±–µ–Ω –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
                                      "- while ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\n"
                                      "- –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª –¥–æ—Å—Ä–æ—á–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `break`\n\n"
                                      "üí° –¶–∏–∫–ª—ã ‚Äî –æ—Å–Ω–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ —Å–ª–æ–≤!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "zabiliibudemjitdalse":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="sezer")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="egegeggeeggemeoreoy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *–£—Å–ª–æ–≤–∏—è –≤ Python: if, elif, else*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ.\n"
            "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è if, elif, else\n\n"
            "üîπ *–°–∏–Ω—Ç–∞–∫—Å–∏—Å:*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"–¢—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\")\n"
            "elif age >= 14:\n    print(\"–¢—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\")\nelse:\n    print(\"–¢—ã —Ä–µ–±—ë–Ω–æ–∫\")\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:* ==, !=, >, <, >=, <=\n"
            "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:* and, or, not\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º:*\n"
            "```python\nname = input(\"–¢–≤–æ—ë –∏–º—è: \")\nif name == \"Tom\":\n    print(\"–ü—Ä–∏–≤–µ—Ç, –¢–æ–º!\")\n"
            "else:\n    print(\"–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å!\")\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "tututu":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="onyx")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="posletakoyjenshini")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: –°–ø–∏—Å–∫–∏ (list)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø–∏—Å–æ–∫?*\n"
                                      "‚Äî –≠—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n"
                                      "‚Äî –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏ –¥–∞–∂–µ –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞:*\n"
                                      "```python\nfruits = [\"—è–±–ª–æ–∫–æ\", \"–±–∞–Ω–∞–Ω\", \"–≤–∏—à–Ω—è\"]\n```\n"
                                      "‚Äî –°–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É:\n"
                                      "`fruits[0]` ‚Üí \"—è–±–ª–æ–∫–æ\"\n"
                                      "`fruits[2]` ‚Üí \"–≤–∏—à–Ω—è\"\n\n"
                                      "============================\n"
                                      "üîπ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:*\n"
                                      "```python\nfruits[1] = \"–∫–∏–≤–∏\"  # –ó–∞–º–µ–Ω–∞ '–±–∞–Ω–∞–Ω' –Ω–∞ '–∫–∏–≤–∏'\nfruits.append(\"–≥—Ä—É—à–∞\")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç\n```\n\n"
                                      "============================\n"
                                      "üîπ *–ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0\n"
                                      "- –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n"
                                      "- –°–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)\n\n"
                                      "üí° –°–ø–∏—Å–∫–∏ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Python.\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –µ–≥–æ –≤ —Ü–∏–∫–ª–µ!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "posletakoyjenshini":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="tututu")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zabiliibudemjitdalse")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: –¶–∏–∫–ª—ã for –∏ while*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ –∫–æ–¥–∞.\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–ø–∏—Å–∫–æ–≤, —á–∏—Å–µ–ª –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª for:*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî –í—ã–≤–µ–¥–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n\n"
                                      "üî∏ range(5) —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0, 1, 2, 3, 4\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª while:*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.\n\n"
                                      "============================\n"
                                      "üîπ *–ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Å for:*\n"
                                      "```python\nfruits = [\"—è–±–ª–æ–∫–æ\", \"–±–∞–Ω–∞–Ω\", \"–≤–∏—à–Ω—è\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- for ‚Äî —É–¥–æ–±–µ–Ω –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
                                      "- while ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\n"
                                      "- –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª –¥–æ—Å—Ä–æ—á–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `break`\n\n"
                                      "üí° –¶–∏–∫–ª—ã ‚Äî –æ—Å–Ω–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏–ª–∏ —Å–ª–æ–≤!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "onyx":
        keyboard = [[InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞",callback_data = "kilogramovitsteyke")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è *–§—É–Ω–∫—Ü–∏–∏ –≤ Python*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –≠—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –¥–µ–ª–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–Ω—è—Ç–Ω–µ–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è:*\n"
                                      "```python\ndef say_hello():\n    print(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\")\n\nsay_hello()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n```\n"
                                      "‚Äî –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `def`, –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ.\n"
                                      "‚Äî –í—Å—ë, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```python\ndef greet(name):\n    print(\"–ü—Ä–∏–≤–µ—Ç,\", name)\n\ngreet(\"–ê–ª–∏—Å–∞\")\n```\n"
                                      "‚Äî –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—é.\n"
                                      "‚Äî –û–Ω–∏ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è (`return`):*\n"
                                      "```python\ndef square(x):\n    return x * x\n\nresult = square(5)\nprint(result)\n```\n"
                                      "‚Äî `return` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.\n"
                                      "‚Äî –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ—á–µ–º—É —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–∂–Ω—ã?*\n"
                                      "- –î–µ–ª–∞—é—Ç –∫–æ–¥ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º\n"
                                      "- –ü–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ –∫–æ–¥–∞\n"
                                      "- –ú–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏\n\n"
                                      "üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ç–≤–æ—ë –∏–º—è, –ø–æ—Ç–æ–º ‚Äî —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª!\n"
                                      "–§—É–Ω–∫—Ü–∏–∏ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ",
                                      parse_mode="Markdown",reply_markup = reply_markup
                                      )
    elif query.data == "kilogramovitsteyke":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="onyx")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="posletakoyjenshini")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: –°–ø–∏—Å–∫–∏ (list)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø–∏—Å–æ–∫?*\n"
                                      "‚Äî –≠—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n"
                                      "‚Äî –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏ –¥–∞–∂–µ –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞:*\n"
                                      "```python\nfruits = [\"—è–±–ª–æ–∫–æ\", \"–±–∞–Ω–∞–Ω\", \"–≤–∏—à–Ω—è\"]\n```\n"
                                      "‚Äî –°–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –ø–æ –∏–Ω–¥–µ–∫—Å—É:\n"
                                      "`fruits[0]` ‚Üí \"—è–±–ª–æ–∫–æ\"\n"
                                      "`fruits[2]` ‚Üí \"–≤–∏—à–Ω—è\"\n\n"
                                      "============================\n"
                                      "üîπ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:*\n"
                                      "```python\nfruits[1] = \"–∫–∏–≤–∏\"  # –ó–∞–º–µ–Ω–∞ '–±–∞–Ω–∞–Ω' –Ω–∞ '–∫–∏–≤–∏'\nfruits.append(\"–≥—Ä—É—à–∞\")  # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç\n```\n\n"
                                      "============================\n"
                                      "üîπ *–ü–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0\n"
                                      "- –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n"
                                      "- –°–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)\n\n"
                                      "üí° –°–ø–∏—Å–∫–∏ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Python.\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –µ–≥–æ –≤ —Ü–∏–∫–ª–µ!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "cpone":
        keyboard = [[InlineKeyboardButton("‚öô –ù–∞—á–∞—Ç—å", callback_data="rezer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("¬´–ù–∞—á–Ω–µ–º!\n–ì–ª–∞–≤–∞ 1:¬ª", reply_markup=reply_markup)

    elif query.data == "rezer":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="vezer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öô*–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ä—Ç C++:*\n\n"
            "üîπ *–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä*\n"
            "[–°–∫–∞—á–∞—Ç—å MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ gcc –∏ –¥–æ–±–∞–≤—å –ø—É—Ç—å –∫ bin –≤ PATH\n\n"
            "üîπ *–®–∞–≥ 2: –°–∫–∞—á–∞–π —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n"
            "[–°–∫–∞—á–∞—Ç—å Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä:*\n"
            "`g++ --version`\n\n"
            "üîπ *–®–∞–≥ 4: –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥:*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ `main.cpp`, —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π:\n"
            "`g++ main.cpp -o main`\n`./main`",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "vezer":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="cpp3")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="watisthisdokkwomwmamacoco")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
            "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n"
            "‚Äî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å —Å —Ç–∏–ø–æ–º.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "`int age = 15;`\n`double pi = 3.14;`\n`char grade = 'A';`\n"
            "`bool isOnline = true;`\n`std::string name = \"Tom\";`\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"–ò–º—è: \" << name << \"\\n\";\n"
            "    std::cout << \"–í–æ–∑—Ä–∞—Å—Ç: \" << age << \"\\n\";\n    return 0;\n}\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "watisthisdokkwomwmamacoco":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="vezer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öô*–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ä—Ç C++:*\n\n"
            "üîπ *–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä*\n"
            "[–°–∫–∞—á–∞—Ç—å MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ gcc –∏ –¥–æ–±–∞–≤—å –ø—É—Ç—å –∫ bin –≤ PATH\n\n"
            "üîπ *–®–∞–≥ 2: –°–∫–∞—á–∞–π —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n"
            "[–°–∫–∞—á–∞—Ç—å Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä:*\n"
            "`g++ --version`\n\n"
            "üîπ *–®–∞–≥ 4: –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥:*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ `main.cpp`, —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π:\n"
            "`g++ main.cpp -o main`\n`./main`",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "cpp3":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="bejing")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="vsevashipismafalyifotki")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: –£—Å–ª–æ–≤–∏—è (if, else, else if)*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä:*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"–¢—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\";\n"
            "    } else if (age >= 14) {\n        cout << \"–¢—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\";\n"
            "    } else {\n        cout << \"–¢—ã —Ä–µ–±—ë–Ω–æ–∫\";\n    }\n    return 0;\n}\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *–õ–æ–≥–∏–∫–∞:* `&&`, `||`, `!`\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º!*",
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "vsevashipismafalyifotki":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="cpp3")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="watisthisdokkwomwmamacoco")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
            "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n"
            "‚Äî –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å —Å —Ç–∏–ø–æ–º.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "`int age = 15;`\n`double pi = 3.14;`\n`char grade = 'A';`\n"
            "`bool isOnline = true;`\n`std::string name = \"Tom\";`\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"–ò–º—è: \" << name << \"\\n\";\n"
            "    std::cout << \"–í–æ–∑—Ä–∞—Å—Ç: \" << age << \"\\n\";\n    return 0;\n}\n```",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "bejing":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="venomous")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="soniceandsasyyilimeem")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *C++: –¶–∏–∫–ª—ã (for, while, do while)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ.\n\n"
                                      "üîπ *–¢–∏–ø—ã —Ü–∏–∫–ª–æ–≤ –≤ C++:*\n"
                                      "- `for` ‚Äî –∫–æ–≥–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                                      "- `while` ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ\n"
                                      "- `do while` ‚Äî —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: for*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0 1 2 3 4`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: while*\n"
                                      "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0`, `1`, `2`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: do while*\n"
                                      "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0`, `1`\n\n"
                                      "============================\n"
                                      "‚úÖ *–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n"
                                      "- `for` ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–æ–≤ (i = 0; i < N; i++)\n"
                                      "- `while` ‚Äî –∫–æ–≥–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑\n"
                                      "- `do while` ‚Äî –º–∏–Ω–∏–º—É–º 1 —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ\n\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º!"
                                      ,
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "soniceandsasyyilimeem":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="bejing")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="vsevashipismafalyifotki")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: –£—Å–ª–æ–≤–∏—è (if, else, else if)*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä:*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"–¢—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\";\n"
            "    } else if (age >= 14) {\n        cout << \"–¢—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\";\n"
            "    } else {\n        cout << \"–¢—ã —Ä–µ–±—ë–Ω–æ–∫\";\n    }\n    return 0;\n}\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *–õ–æ–≥–∏–∫–∞:* `&&`, `||`, `!`\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º!*",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "venomous":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="zerotrust")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zdravstvuytesergeyvladimirovic")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: –ú–∞—Å—Å–∏–≤—ã (Arrays)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤?*\n"
                                      "‚Äî –≠—Ç–æ –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ **–æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞**, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –ø–æ–¥—Ä—è–¥.\n"
                                      "‚Äî –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π –∏–Ω–¥–µ–∫—Å (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0).\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–∏–≤–∞:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ int.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª:*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3 —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –æ—Ç `0` –¥–æ `n - 1`\n"
                                      "- –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ = ‚ùå –æ—à–∏–±–∫–∞ (UB ‚Äî undefined behavior)\n"
                                      "- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (int, float, char –∏ —Ç.–¥.)\n\n"
                                      "üí° –ú–∞—Å—Å–∏–≤—ã ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞. –° –Ω–∏–º–∏ —Ç—ã –∏–∑—É—á–∏—à—å —Ä–∞–±–æ—Ç—É —Å –ø–∞–º—è—Ç—å—é, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –∞–ª–≥–æ—Ä–∏—Ç–º—ã!\n\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "zdravstvuytesergeyvladimirovic":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="venomous")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="soniceandsasyyilimeem")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *C++: –¶–∏–∫–ª—ã (for, while, do while)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ.\n\n"
                                      "üîπ *–¢–∏–ø—ã —Ü–∏–∫–ª–æ–≤ –≤ C++:*\n"
                                      "- `for` ‚Äî –∫–æ–≥–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                                      "- `while` ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ\n"
                                      "- `do while` ‚Äî —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: for*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0 1 2 3 4`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: while*\n"
                                      "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0`, `1`, `2`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: do while*\n"
                                      "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `0`, `1`\n\n"
                                      "============================\n"
                                      "‚úÖ *–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*\n"
                                      "- `for` ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–æ–≤ (i = 0; i < N; i++)\n"
                                      "- `while` ‚Äî –∫–æ–≥–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑\n"
                                      "- `do while` ‚Äî –º–∏–Ω–∏–º—É–º 1 —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ\n\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º!"
                                      ,
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "zerotrust":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="amburanmall")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ueleonoriestdoci")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: –°—Ç—Ä–æ–∫–∏ (Strings)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–∞?*\n"
                                      "‚Äî –≠—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ —Ñ—Ä–∞–∑–∞.\n"
                                      "‚Äî –í C++ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –∫–ª–∞—Å—Å `std::string`.\n\n"
                                      "============================\n"
                                      "üîπ *–°—Ç—Ä–æ–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ –°–∏–º–≤–æ–ª `\\0` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏.\n"
                                      "üî∏ –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–°—Ç—Ä–æ–∫–∏ —Å `std::string`:*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî –¢–∞–∫–æ–π —Å–ø–æ—Å–æ–± —É–¥–æ–±–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏\n"
                                      "cout << name.length() << endl; // –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏\n"
                                      "name += \" Hardy\";             // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è (—Å–ª–æ–∂–µ–Ω–∏–µ)\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```cpp\nstd::string userName;\ncout << \"–í–≤–µ–¥–∏—Ç–µ –∏–º—è: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` —á–∏—Ç–∞–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ñ—Ä–∞–∑–∞:\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- `std::string` –ø—Ä–æ—â–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –º–∞—Å—Å–∏–≤—ã `char`\n"
                                      "- –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Å–æ–µ–¥–∏–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏, –∏–∑–º–µ—Ä—è—Ç—å –¥–ª–∏–Ω—É, –∏—Å–∫–∞—Ç—å —Å–∏–º–≤–æ–ª—ã\n"
                                      "- –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏\n\n"
                                      "üí° –°—Ç—Ä–æ–∫–∏ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ä–º–∞–º–∏, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ—ë –Ω–∞ —ç–∫—Ä–∞–Ω! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "ueleonoriestdoci":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="zerotrust")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zdravstvuytesergeyvladimirovic")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: –ú–∞—Å—Å–∏–≤—ã (Arrays)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤?*\n"
                                      "‚Äî –≠—Ç–æ –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ **–æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞**, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –ø–æ–¥—Ä—è–¥.\n"
                                      "‚Äî –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π –∏–Ω–¥–µ–∫—Å (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0).\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–∏–≤–∞:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ int.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª:*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ –í—ã–≤–æ–¥: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3 —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –æ—Ç `0` –¥–æ `n - 1`\n"
                                      "- –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ = ‚ùå –æ—à–∏–±–∫–∞ (UB ‚Äî undefined behavior)\n"
                                      "- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (int, float, char –∏ —Ç.–¥.)\n\n"
                                      "üí° –ú–∞—Å—Å–∏–≤—ã ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞. –° –Ω–∏–º–∏ —Ç—ã –∏–∑—É—á–∏—à—å —Ä–∞–±–æ—Ç—É —Å –ø–∞–º—è—Ç—å—é, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –∞–ª–≥–æ—Ä–∏—Ç–º—ã!\n\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "amburanmall":
        keyboard = [
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="tvoyotecnaoralkatyue")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C++: –§—É–Ω–∫—Ü–∏–∏*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –≠—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –ü–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è:*\n"
                                      "```cpp\nvoid sayHello() {\n    cout << \"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\" << endl;\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n"
                                      "‚Äî –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ `void` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.\n"
                                      "‚Äî –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å—Ç–æ –ø–æ –∏–º–µ–Ω–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```cpp\nvoid greet(string name) {\n    cout << \"–ü—Ä–∏–≤–µ—Ç, \" << name << endl;\n}\n\nint main() {\n    greet(\"–ê–ª–∏—Å–∞\");\n    return 0;\n}\n```\n"
                                      "‚Äî –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏.\n"
                                      "‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:*\n"
                                      "```cpp\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int res = square(5);\n    cout << res;\n    return 0;\n}\n```\n"
                                      "‚Äî –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `int`).\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ–º `return` –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ—á–µ–º—É —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–∂–Ω—ã?*\n"
                                      "- –ö–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º\n"
                                      "- –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥\n"
                                      "- –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–µ–≥–∫–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
                                      "–§—É–Ω–∫—Ü–∏–∏ ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–¥–∞ –Ω–∞ C++! üöÄ",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "tvoyotecnaoralkatyue":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="amburanmall")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ueleonoriestdoci")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: –°—Ç—Ä–æ–∫–∏ (Strings)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç—Ä–æ–∫–∞?*\n"
                                      "‚Äî –≠—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è –∏–ª–∏ —Ñ—Ä–∞–∑–∞.\n"
                                      "‚Äî –í C++ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –∫–ª–∞—Å—Å `std::string`.\n\n"
                                      "============================\n"
                                      "üîπ *–°—Ç—Ä–æ–∫–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ –°–∏–º–≤–æ–ª `\\0` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏.\n"
                                      "üî∏ –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–°—Ç—Ä–æ–∫–∏ —Å `std::string`:*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî –¢–∞–∫–æ–π —Å–ø–æ—Å–æ–± —É–¥–æ–±–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏\n"
                                      "cout << name.length() << endl; // –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏\n"
                                      "name += \" Hardy\";             // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è (—Å–ª–æ–∂–µ–Ω–∏–µ)\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```cpp\nstd::string userName;\ncout << \"–í–≤–µ–¥–∏—Ç–µ –∏–º—è: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` —á–∏—Ç–∞–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ñ—Ä–∞–∑–∞:\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- `std::string` –ø—Ä–æ—â–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –º–∞—Å—Å–∏–≤—ã `char`\n"
                                      "- –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Å–æ–µ–¥–∏–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏, –∏–∑–º–µ—Ä—è—Ç—å –¥–ª–∏–Ω—É, –∏—Å–∫–∞—Ç—å —Å–∏–º–≤–æ–ª—ã\n"
                                      "- –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏\n\n"
                                      "üí° –°—Ç—Ä–æ–∫–∏ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ä–º–∞–º–∏, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ—ë –Ω–∞ —ç–∫—Ä–∞–Ω! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "jvone":
        keyboard = [[InlineKeyboardButton("‚öô –ù–∞—á–∞—Ç—å", callback_data="lexustural")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n–ì–ª–∞–≤–∞ 1:", reply_markup=reply_markup)
    elif query.data == "lexustural":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="lextural")],
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ä—Ç JavaScript:*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n"
                                      "[–°–∫–∞—á–∞—Ç—å Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ Node.js*\n"
                                      "[–°–∫–∞—á–∞—Ç—å Node.js](https://nodejs.org/)\n"
                                      "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å –≤–µ—Ä—Å–∏—é:\n"
                                      "`node --version`\n\n"
                                      "üîπ *–®–∞–≥ 3: –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥:*\n"
                                      "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª `main.js` —Å –∫–æ–¥–æ–º:\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "–ó–∞–ø—É—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–æ–≤, –±–æ—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!*",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "lextural":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="lexturalss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="drruuuororiridididir")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                                      "‚Äî –û–±—ä—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ `let`, `const` –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± `var`.\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
                                      "`let age = 15;`\n`const pi = 3.14;`\n`let name = \"Tom\";`\n`let isOnline = true;`\n\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å:*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"–ò–º—è:\", name);\nconsole.log(\"–í–æ–∑—Ä–∞—Å—Ç:\", age);\n```\n"
                                      "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π `const` –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –∏ `let` –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "drruuuororiridididir":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="lextural")],
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ä—Ç JavaScript:*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π —Ä–µ–¥–∞–∫—Ç–æ—Ä*\n"
                                      "[–°–∫–∞—á–∞—Ç—å Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ Node.js*\n"
                                      "[–°–∫–∞—á–∞—Ç—å Node.js](https://nodejs.org/)\n"
                                      "‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å –≤–µ—Ä—Å–∏—é:\n"
                                      "`node --version`\n\n"
                                      "üîπ *–®–∞–≥ 3: –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥:*\n"
                                      "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª `main.js` —Å –∫–æ–¥–æ–º:\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "–ó–∞–ø—É—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–æ–≤, –±–æ—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!*",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "lexturalss":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="porschetunar")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="celuymenyanazlojidfienewjf")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *JavaScript: –£—Å–ª–æ–≤–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è ‚Äî `true`.\n"
            "‚Äî –í JavaScript –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è `if`.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä:*\n"
            "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω\");\n} else {\n    console.log(\"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω\");\n}\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:*\n"
            "`==` ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–∏–ø—ã)\n"
            "`===` ‚Äî —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ç–∏–ø, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ)\n"
            "`!=` ‚Äî –Ω–µ —Ä–∞–≤–Ω–æ (–ø–æ –∑–Ω–∞—á–µ–Ω–∏—é)\n"
            "`!==` ‚Äî —Å—Ç—Ä–æ–≥–æ–µ –Ω–µ —Ä–∞–≤–Ω–æ (–ø–æ —Ç–∏–ø—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é)\n"
            "`>` ‚Äî –±–æ–ª—å—à–µ\n"
            "`<` ‚Äî –º–µ–Ω—å—à–µ\n"
            "`>=` ‚Äî –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ\n"
            "`<=` ‚Äî –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ\n\n"
            "üí° *–í–∞–∂–Ω–æ:* –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `===` –∏ `!==` –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤.",
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "celuymenyanazlojidfienewjf":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="lexturalss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="drruuuororiridididir")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                                      "‚Äî –û–±—ä—è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ `let`, `const` –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± `var`.\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
                                      "`let age = 15;`\n`const pi = 3.14;`\n`let name = \"Tom\";`\n`let isOnline = true;`\n\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å:*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"–ò–º—è:\", name);\nconsole.log(\"–í–æ–∑—Ä–∞—Å—Ç:\", age);\n```\n"
                                      "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π `const` –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –∏ `let` –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "porschetunar":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="ferraritunar")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="vprincipeyamogutebepomocye")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —ç—Ç–æ?*\n"
                                      "‚Äî –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è.\n"
                                      "‚Äî –° –Ω–∏–º–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
                                      "üîπ *–í–∏–¥—ã –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
                                      "`&&` ‚Äî –ò (–æ–±–∞ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã)\n"
                                      "`||` ‚Äî –ò–õ–ò (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è)\n"
                                      "`!` ‚Äî –ù–ï (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ)\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω\");\n} else {\n    console.log(\"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω\");\n}\n```\n\n"
                                      "üí° *–í–∞–∂–Ω–æ:* –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "vprincipeyamogutebepomocye":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="porschetunar")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="celuymenyanazlojidfienewjf")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *JavaScript: –£—Å–ª–æ–≤–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ?*\n"
            "‚Äî –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è ‚Äî `true`.\n"
            "‚Äî –í JavaScript –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è `if`.\n\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä:*\n"
            "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω\");\n} else {\n    console.log(\"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω\");\n}\n```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:*\n"
            "`==` ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–º–æ–∂–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–∏–ø—ã)\n"
            "`===` ‚Äî —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ç–∏–ø, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ)\n"
            "`!=` ‚Äî –Ω–µ —Ä–∞–≤–Ω–æ (–ø–æ –∑–Ω–∞—á–µ–Ω–∏—é)\n"
            "`!==` ‚Äî —Å—Ç—Ä–æ–≥–æ–µ –Ω–µ —Ä–∞–≤–Ω–æ (–ø–æ —Ç–∏–ø—É –∏ –∑–Ω–∞—á–µ–Ω–∏—é)\n"
            "`>` ‚Äî –±–æ–ª—å—à–µ\n"
            "`<` ‚Äî –º–µ–Ω—å—à–µ\n"
            "`>=` ‚Äî –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ\n"
            "`<=` ‚Äî –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ\n\n"
            "üí° *–í–∞–∂–Ω–æ:* –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `===` –∏ `!==` –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–∑-–∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤.",
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "ferraritunar":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="dodgevaper")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zughtjfrhegjhfeuewfwefhwfhu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: –¶–∏–∫–ª—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª for*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî –í—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n"
                                      "`i++` ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –Ω–∞ 1 –∫–∞–∂–¥—ã–π —Ä–∞–∑.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª while*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî –ü–æ–∫–∞ `x < 3`, –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª do...while*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–∑—É false.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –õ–µ–≥–∫–æ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (–Ω–µ –∑–∞–±—ã–≤–∞–π –∏–∑–º–µ–Ω—è—Ç—å —Å—á—ë—Ç—á–∏–∫!)\n"
                                      "- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `break` –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞\n"
                                      "- `continue` ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é\n\n"
                                      "üí° –¶–∏–∫–ª—ã ‚Äî –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 10 –¥–æ 1 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ! üöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "zughtjfrhegjhfeuewfwefhwfhu":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="ferraritunar")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="vprincipeyamogutebepomocye")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —ç—Ç–æ?*\n"
                                      "‚Äî –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è.\n"
                                      "‚Äî –° –Ω–∏–º–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
                                      "üîπ *–í–∏–¥—ã –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
                                      "`&&` ‚Äî –ò (–æ–±–∞ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã)\n"
                                      "`||` ‚Äî –ò–õ–ò (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è)\n"
                                      "`!` ‚Äî –ù–ï (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ)\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä—ã:*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω\");\n} else {\n    console.log(\"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω\");\n}\n```\n\n"
                                      "üí° *–í–∞–∂–Ω–æ:* –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "dodgevaper":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="xzero")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ppsdjoscdjfvojfsnojnsjosonj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –§—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑, –Ω–µ –¥—É–±–ª–∏—Ä—É—è –∫–æ–¥.\n"
                                      "‚Äî –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                                      "üîπ *–ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "‚úî –ß—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–æ–¥\n"
                                      "‚úî –ß—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏\n"
                                      "‚úî –ß—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–∞—Ä–≥—É–º–µ–Ω—Ç—ã) –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "```js\nfunction sayHello() {\n    console.log(\"–ü—Ä–∏–≤–µ—Ç!\");\n}\n\nsayHello(); // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n```\n"
                                      "üí° –§—É–Ω–∫—Ü–∏—è `sayHello` –≤—ã–≤–æ–¥–∏—Ç \"–ü—Ä–∏–≤–µ—Ç!\" –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –µ—ë –≤—ã–∑—ã–≤–∞—é—Ç.\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```js\nfunction greet(name) {\n    console.log(\"–ü—Ä–∏–≤–µ—Ç, \" + name);\n}\n\ngreet(\"–¢–æ–º\");\ngreet(\"–ê–Ω–Ω–∞\");\n```\n"
                                      "üí° –ü–∞—Ä–∞–º–µ—Ç—Ä `name` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —á—Ç–æ-—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:*\n"
                                      "```js\nfunction square(number) {\n    return number * number;\n}\n\nconsole.log(square(4)); // 16\n```\n"
                                      "üí° `return` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏.\n\n"
                                      "üîπ *–í–∞–∂–Ω–æ:*\n"
                                      "‚úî –§—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –ø–æ—Å–ª–µ –µ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                                      "‚úî –ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ\n"
                                      "‚úî –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n\n"
                                      "–§—É–Ω–∫—Ü–∏–∏ –¥–µ–ª–∞—é—Ç –∫–æ–¥ —á–∏—â–µ, –ø—Ä–æ—â–µ –∏ –≥–∏–±—á–µ.",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "ppsdjoscdjfvojfsnojnsjosonj":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="dodgevaper")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zughtjfrhegjhfeuewfwefhwfhu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: –¶–∏–∫–ª—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –≠—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª for*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî –í—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n"
                                      "`i++` ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –Ω–∞ 1 –∫–∞–∂–¥—ã–π —Ä–∞–∑.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª while*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî –ü–æ–∫–∞ `x < 3`, –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.\n\n"
                                      "============================\n"
                                      "üîπ *–¶–∏–∫–ª do...while*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–∑—É false.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –õ–µ–≥–∫–æ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (–Ω–µ –∑–∞–±—ã–≤–∞–π –∏–∑–º–µ–Ω—è—Ç—å —Å—á—ë—Ç—á–∏–∫!)\n"
                                      "- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `break` –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞\n"
                                      "- `continue` ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é\n\n"
                                      "üí° –¶–∏–∫–ª—ã ‚Äî –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 10 –¥–æ 1 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ! üöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "xzero":
        keyboard = [[InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="debroutroutroute")],
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaScript: –û–±—ä–µ–∫—Ç—ã (Objects)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—ä–µ–∫—Ç?*\n"
                                      "‚Äî –≠—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π.\n"
                                      "‚Äî –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–∞—Ä \"–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ\".\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:*\n"
                                      "```js\n"
                                      "let person = {\n"
                                      "  name: \"Tom\",\n"
                                      "  age: 25,\n"
                                      "  isStudent: true\n"
                                      "};\n"
                                      "```\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º:\n"
                                      "`person.name` ‚Üí \"Tom\"\n"
                                      "`person[\"age\"]` ‚Üí 25\n\n"
                                      "============================\n"
                                      "üîπ *–û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º:*\n"
                                      "```js\n"
                                      "let car = {\n"
                                      "  brand: \"Toyota\",\n"
                                      "  start: function() {\n"
                                      "    console.log(\"–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω\");\n"
                                      "  }\n"
                                      "};\n\n"
                                      "car.start();\n"
                                      "```\n"
                                      "============================\n"
                                      "‚úÖ *–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –æ–±—ä–µ–∫—Ç—ã?*\n"
                                      "- –•—Ä–∞–Ω—è—Ç —Å–ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n"
                                      "- –ü–æ–∑–≤–æ–ª—è—é—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–≤—Å—é–¥—É: DOM, —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∏–≥—Ä—ã\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç \"phone\" —Å –ø–æ–ª—è–º–∏ \"model\", \"year\" –∏ –º–µ—Ç–æ–¥–æ–º \"call()\"!",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "debroutroutroute":
        keyboard = [[InlineKeyboardButton("—Å–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞‚û°Ô∏è", callback_data="xzero")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ppsdjoscdjfvojfsnojnsjosonj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –§—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑, –Ω–µ –¥—É–±–ª–∏—Ä—É—è –∫–æ–¥.\n"
                                      "‚Äî –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                                      "üîπ *–ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "‚úî –ß—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–æ–¥\n"
                                      "‚úî –ß—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏\n"
                                      "‚úî –ß—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–∞—Ä–≥—É–º–µ–Ω—Ç—ã) –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "```js\nfunction sayHello() {\n    console.log(\"–ü—Ä–∏–≤–µ—Ç!\");\n}\n\nsayHello(); // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n```\n"
                                      "üí° –§—É–Ω–∫—Ü–∏—è `sayHello` –≤—ã–≤–æ–¥–∏—Ç \"–ü—Ä–∏–≤–µ—Ç!\" –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –µ—ë –≤—ã–∑—ã–≤–∞—é—Ç.\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```js\nfunction greet(name) {\n    console.log(\"–ü—Ä–∏–≤–µ—Ç, \" + name);\n}\n\ngreet(\"–¢–æ–º\");\ngreet(\"–ê–Ω–Ω–∞\");\n```\n"
                                      "üí° –ü–∞—Ä–∞–º–µ—Ç—Ä `name` –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —á—Ç–æ-—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:*\n"
                                      "```js\nfunction square(number) {\n    return number * number;\n}\n\nconsole.log(square(4)); // 16\n```\n"
                                      "üí° `return` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏.\n\n"
                                      "üîπ *–í–∞–∂–Ω–æ:*\n"
                                      "‚úî –§—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –ø–æ—Å–ª–µ –µ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                                      "‚úî –ö–æ–¥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ\n"
                                      "‚úî –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n\n"
                                      "–§—É–Ω–∫—Ü–∏–∏ –¥–µ–ª–∞—é—Ç –∫–æ–¥ —á–∏—â–µ, –ø—Ä–æ—â–µ –∏ –≥–∏–±—á–µ.",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "toomycash":
        keyboard = [[InlineKeyboardButton("‚òï –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å Java", callback_data="officess")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Java", reply_markup=reply_markup)
    elif query.data == "officess":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirens")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ JDK*\n"
                                      "[üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî –í—ã–±–µ—Ä–∏ Java SE Development Kit (JDK) –ø–æ–¥ —Å–≤–æ—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n"
                                      "‚Äî –í–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ—Ç—å –≥–∞–ª–æ—á–∫—É `Add JAVA to PATH` (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)\n\n"
                                      "üîπ *–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∫—É*\n"
                                      "–û—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤–≤–µ–¥–∏:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–µ—Ä—Å–∏–∏ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                                      "üîπ *–®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (IDE)*\n"
                                      "‚úÖ [IntelliJ IDEA Community (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Java](https://code.visualstudio.com/)\n\n"
                                      "üîπ *–®–∞–≥ 4: –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π Java-–∫–æ–¥!*\n"
                                      "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º `Main.java` –∏ –≤–≤–µ–¥–∏:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *–¢—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å Java!*\n"
                                      "–î–∞–ª—å—à–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É—Å–ª–æ–≤–∏—è, —Ü–∏–∫–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                                      "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "sirens":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="styles")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="pozitivnoyevliyaniyeigr")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n"
                                      "‚Äî –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
                                      "- `int`: —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `42`\n"
                                      "- `double`: —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä `3.14`\n"
                                      "- `char`: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä `'A'`\n"
                                      "- `boolean`: –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî `true` –∏–ª–∏ `false`\n"
                                      "- `String`: —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
                                      "```java\n"
                                      "int age = 18;\n"
                                      "double pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "boolean isStudent = true;\n"
                                      "String name = \"Tom\";\n"
                                      "```\n\n"
                                      "üî∏ –ò—Å–ø–æ–ª—å–∑—É–π `System.out.println()` –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π:\n"
                                      "```java\n"
                                      "System.out.println(name);\n"
                                      "System.out.println(age);\n"
                                      "```\n"
                                      "üî∏ –í—ã–≤–æ–¥:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n"
                                      "- Java ‚Äî —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫, –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø\n"
                                      "- Java —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É: `Name` ‚â† `name`\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö —á–µ—Ä–µ–∑ `System.out.println()`!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "pozitivnoyevliyaniyeigr":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirens")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ JDK*\n"
                                      "[üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî –í—ã–±–µ—Ä–∏ Java SE Development Kit (JDK) –ø–æ–¥ —Å–≤–æ—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n"
                                      "‚Äî –í–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–º–µ—Ç—å –≥–∞–ª–æ—á–∫—É `Add JAVA to PATH` (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)\n\n"
                                      "üîπ *–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∫—É*\n"
                                      "–û—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤–≤–µ–¥–∏:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–µ—Ä—Å–∏–∏ ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                                      "üîπ *–®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (IDE)*\n"
                                      "‚úÖ [IntelliJ IDEA Community (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Java](https://code.visualstudio.com/)\n\n"
                                      "üîπ *–®–∞–≥ 4: –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π Java-–∫–æ–¥!*\n"
                                      "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º `Main.java` –∏ –≤–≤–µ–¥–∏:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *–¢—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å Java!*\n"
                                      "–î–∞–ª—å—à–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É—Å–ª–æ–≤–∏—è, —Ü–∏–∫–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                                      "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "styles":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="fors")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="nikadsidjiofsale")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìö *Java: –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (if, else, else if)*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
            "‚Äî –≠—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–π –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è.\n\n"
            "============================\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:*\n"
            "```java\n"
            "if (age >= 18) {\n"
            "    System.out.println(\"–í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\");\n"
            "} else if (age >= 14) {\n"
            "    System.out.println(\"–í—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\");\n"
            "} else {\n"
            "    System.out.println(\"–í—ã —Ä–µ–±–µ–Ω–æ–∫\");\n"
            "}\n"
            "```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:* `&&` (–∏), `||` (–∏–ª–∏), `!` (–Ω–µ)\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ:*\n"
            "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞!",
            parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "nikadsidjiofsale":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="styles")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="pozitivnoyevliyaniyeigr")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî —ç—Ç–æ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n"
                                      "‚Äî –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
                                      "- `int`: —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `42`\n"
                                      "- `double`: —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä `3.14`\n"
                                      "- `char`: –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä `'A'`\n"
                                      "- `boolean`: –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî `true` –∏–ª–∏ `false`\n"
                                      "- `String`: —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
                                      "```java\n"
                                      "int age = 18;\n"
                                      "double pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "boolean isStudent = true;\n"
                                      "String name = \"Tom\";\n"
                                      "```\n\n"
                                      "üî∏ –ò—Å–ø–æ–ª—å–∑—É–π `System.out.println()` –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π:\n"
                                      "```java\n"
                                      "System.out.println(name);\n"
                                      "System.out.println(age);\n"
                                      "```\n"
                                      "üî∏ –í—ã–≤–æ–¥:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n"
                                      "- Java ‚Äî —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫, –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø\n"
                                      "- Java —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É: `Name` ‚â† `name`\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π —Å–∞–º –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö —á–µ—Ä–µ–∑ `System.out.println()`!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "fors":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="mens")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ghyuhbrdyimmvtygnmybnmutycvbnhhubtrftc")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: –¶–∏–∫–ª—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –¶–∏–∫–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n"
                                      "‚Äî –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –¥–µ–π—Å—Ç–≤–∏–π, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ for:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –í—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ while:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ do...while:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å:*\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `break`, —á—Ç–æ–±—ã –¥–æ—Å—Ä–æ—á–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `continue`, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏\n"
                                      "- –ò–∑–±–µ–≥–∞–π—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—è —É—Å–ª–æ–≤–∏–µ\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –æ—Ç 10 –¥–æ 1 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "ghyuhbrdyimmvtygnmybnmutycvbnhhubtrftc":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="fors")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="nikadsidjiofsale")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìö *Java: –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (if, else, else if)*\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
            "‚Äî –≠—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–π –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è.\n\n"
            "============================\n"
            "üîπ *–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:*\n"
            "```java\n"
            "if (age >= 18) {\n"
            "    System.out.println(\"–í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π\");\n"
            "} else if (age >= 14) {\n"
            "    System.out.println(\"–í—ã –ø–æ–¥—Ä–æ—Å—Ç–æ–∫\");\n"
            "} else {\n"
            "    System.out.println(\"–í—ã —Ä–µ–±–µ–Ω–æ–∫\");\n"
            "}\n"
            "```\n\n"
            "üîπ *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:* `&&` (–∏), `||` (–∏–ª–∏), `!` (–Ω–µ)\n\n"
            "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π —ç—Ç–æ:*\n"
            "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞!",
            parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "mens":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="brandss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zeoohyfrbn")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: –ú–∞—Å—Å–∏–≤—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤?*\n"
                                      "‚Äî –ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–∞–º—è—Ç–∏.\n"
                                      "‚Äî –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0).\n\n"
                                      "============================\n"
                                      "üîπ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 5 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞.\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3 —á–∏—Å–ª–∞, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –∏–¥—É—Ç –æ—Ç `0` –¥–æ `n - 1`\n"
                                      "- –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
                                      "- –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° –ú–∞—Å—Å–∏–≤—ã ‚Äî –æ—Å–Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –º–∞—Å—Å–∏–≤ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "zeoohyfrbn":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="mens")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ghyuhbrdyimmvtygnmybnmutycvbnhhubtrftc")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: –¶–∏–∫–ª—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –¶–∏–∫–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n"
                                      "‚Äî –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –¥–µ–π—Å—Ç–≤–∏–π, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ for:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –í—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 4.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ while:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Ü–∏–∫–ª–∞ do...while:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω–æ –∑–Ω–∞—Ç—å:*\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `break`, —á—Ç–æ–±—ã –¥–æ—Å—Ä–æ—á–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞\n"
                                      "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `continue`, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏\n"
                                      "- –ò–∑–±–µ–≥–∞–π—Ç–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—è —É—Å–ª–æ–≤–∏–µ\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç –æ—Ç 10 –¥–æ 1 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "brandss":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="itss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="porbugyy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: –ú–µ—Ç–æ–¥—ã (–§—É–Ω–∫—Ü–∏–∏)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–æ–¥?*\n"
                                      "‚Äî –ú–µ—Ç–æ–¥ ‚Äî —ç—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –ï–≥–æ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞.\n\n"
                                      "============================\n"
                                      "üîπ *–ó–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã?*\n"
                                      "‚úîÔ∏è –ò–∑–±–µ–≥–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞\n"
                                      "‚úîÔ∏è –î–µ–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–Ω—è—Ç–Ω–µ–µ –∏ –ø—Ä–æ—â–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
                                      "‚úîÔ∏è –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"–ü—Ä–∏–≤–µ—Ç!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –ú–µ—Ç–æ–¥ `sayHello` –≤—ã–≤–æ–¥–∏—Ç \"–ü—Ä–∏–≤–µ—Ç!\".\n\n"
                                      "============================\n"
                                      "üîπ *–ú–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"–ü—Ä–∏–≤–µ—Ç, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"–ê–ª–∏—Å–∞\");\n"
                                      "```\n"
                                      "‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ª–∞—é—Ç –º–µ—Ç–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–µ–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–ú–µ—Ç–æ–¥ —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî `return` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞\n"
                                      "- `main()` ‚Äî —ç—Ç–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                                      "- `void` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —Ç–≤–æ—ë –∏–º—è –∏–ª–∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "porbugyy":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="brandss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="zeoohyfrbn")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: –ú–∞—Å—Å–∏–≤—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Å—Å–∏–≤?*\n"
                                      "‚Äî –ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–∞–º—è—Ç–∏.\n"
                                      "‚Äî –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0).\n\n"
                                      "============================\n"
                                      "üîπ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∏–∑ 5 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.\n\n"
                                      "üî∏ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *–í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞.\n\n"
                                      "============================\n"
                                      "üîπ *–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3 —á–∏—Å–ª–∞, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n"
                                      "============================\n"
                                      "‚úÖ *–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
                                      "- –ò–Ω–¥–µ–∫—Å—ã –∏–¥—É—Ç –æ—Ç `0` –¥–æ `n - 1`\n"
                                      "- –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
                                      "- –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° –ú–∞—Å—Å–∏–≤—ã ‚Äî –æ—Å–Ω–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤!\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –º–∞—Å—Å–∏–≤ –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "itss":
        keyboard = [
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="sitiporosaaututjj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üèóÔ∏è *Java: –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª–∞—Å—Å?*\n"
                                      "‚Äî –ö–ª–∞—Å—Å ‚Äî —ç—Ç–æ —à–∞–±–ª–æ–Ω (blueprint) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.\n"
                                      "‚Äî –û–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ (–¥–∞–Ω–Ω—ã–µ) –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–º–µ—Ç–æ–¥—ã) –æ–±—ä–µ–∫—Ç–æ–≤.\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—ä–µ–∫—Ç?*\n"
                                      "‚Äî –û–±—ä–µ–∫—Ç ‚Äî —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞. –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:*\n"
                                      "```java\n"
                                      "public class Dog {\n"
                                      "    String name;\n"
                                      "    int age;\n\n"
                                      "    void bark() {\n"
                                      "        System.out.println(name + \": –ì–∞–≤-–≥–∞–≤!\");\n"
                                      "    }\n"
                                      "}\n\n"
                                      "public class Main {\n"
                                      "    public static void main(String[] args) {\n"
                                      "        Dog myDog = new Dog();\n"
                                      "        myDog.name = \"–®–∞—Ä–∏–∫\";\n"
                                      "        myDog.age = 3;\n"
                                      "        myDog.bark();\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –ö–ª–∞—Å—Å `Dog` –∏–º–µ–µ—Ç –¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥.\n"
                                      "‚Äî `myDog` ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ `Dog`, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–í–∞–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:*\n"
                                      "- –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –ø–∏—à—É—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã: `Person`, `Car`, `Animal` –∏ —Ç.–¥.\n"
                                      "- `new` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\n"
                                      "- –í –º–µ—Ç–æ–¥–∞—Ö –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –æ–±—ä–µ–∫—Ç–∞\n\n"
                                      "‚úÖ *–ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ Java*\n"
                                      "‚Äî –ü–æ—á—Ç–∏ –≤—Å–µ Java-–ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –≤–æ–∫—Ä—É–≥ –æ–±—ä–µ–∫—Ç–æ–≤!\n\n"
                                      "üí° –î–∞–ª–µ–µ –º—ã –∏–∑—É—á–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º! üöÄ",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "sitiporosaaututjj":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="itss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="porbugyy")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: –ú–µ—Ç–æ–¥—ã (–§—É–Ω–∫—Ü–∏–∏)*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–æ–¥?*\n"
                                      "‚Äî –ú–µ—Ç–æ–¥ ‚Äî —ç—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –ï–≥–æ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞.\n\n"
                                      "============================\n"
                                      "üîπ *–ó–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã?*\n"
                                      "‚úîÔ∏è –ò–∑–±–µ–≥–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞\n"
                                      "‚úîÔ∏è –î–µ–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–Ω—è—Ç–Ω–µ–µ –∏ –ø—Ä–æ—â–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
                                      "‚úîÔ∏è –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"–ü—Ä–∏–≤–µ—Ç!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî –ú–µ—Ç–æ–¥ `sayHello` –≤—ã–≤–æ–¥–∏—Ç \"–ü—Ä–∏–≤–µ—Ç!\".\n\n"
                                      "============================\n"
                                      "üîπ *–ú–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"–ü—Ä–∏–≤–µ—Ç, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"–ê–ª–∏—Å–∞\");\n"
                                      "```\n"
                                      "‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ª–∞—é—Ç –º–µ—Ç–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–µ–µ.\n\n"
                                      "============================\n"
                                      "üîπ *–ú–µ—Ç–æ–¥ —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî `return` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞.\n\n"
                                      "============================\n"
                                      "‚úÖ *–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:*\n"
                                      "- –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞\n"
                                      "- `main()` ‚Äî —ç—Ç–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                                      "- `void` –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç\n\n"
                                      "üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —Ç–≤–æ—ë –∏–º—è –∏–ª–∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "huggywuggy":
        keyboard = [[InlineKeyboardButton("¬´–ù–∞—á–Ω—ë–º!\n¬ª¬´*–ì–ª–∞–≤–∞ 1:*", callback_data="yveskarl")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<<>>", reply_markup=reply_markup)
    elif query.data == "yveskarl":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="legs")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ C –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ CLion IDE*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π—Ç–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä MinGW*\n"
                                      "[–°–∫–∞—á–∞—Ç—å MinGW](https://sourceforge.net/projects/mingw/) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gcc –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫—É `bin` –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PATH\n\n"
                                      "üîπ *–®–∞–≥ 2: –°–∫–∞—á–∞–π—Ç–µ CLion IDE*\n"
                                      "[–°–∫–∞—á–∞—Ç—å CLion](https://www.jetbrains.com/clion/download/) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Community –∏–ª–∏ Trial –≤–µ—Ä—Å–∏—é\n\n"
                                      "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É*\n"
                                      "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *–®–∞–≥ 4: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π C-–ø—Ä–æ–≥—Ä–∞–º–º—É*\n"
                                      "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `main.c` —Å –∫–æ–¥–æ–º:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–®–∞–≥ 5: –°–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É*\n"
                                      "–í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                                      "–í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å:\n"
                                      "```\n–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "legs":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="armsss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="igogoogogogogogog")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –ò–º—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏.\n"
                                      "‚Äî –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç.\n\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
                                      "- `int` ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `42`\n"
                                      "- `float` ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: `3.14`\n"
                                      "- `char` ‚Äî –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: `'A'`\n"
                                      "- `double` ‚Äî –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π\n\n"
                                      "============================\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *–í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"–í–æ–∑—Ä–∞—Å—Ç: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏:* –æ–±—ä—è–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "igogoogogogogogog":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="legs")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ C –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ CLion IDE*\n\n"
                                      "üîπ *–®–∞–≥ 1: –°–∫–∞—á–∞–π—Ç–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä MinGW*\n"
                                      "[–°–∫–∞—á–∞—Ç—å MinGW](https://sourceforge.net/projects/mingw/) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gcc –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫—É `bin` –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PATH\n\n"
                                      "üîπ *–®–∞–≥ 2: –°–∫–∞—á–∞–π—Ç–µ CLion IDE*\n"
                                      "[–°–∫–∞—á–∞—Ç—å CLion](https://www.jetbrains.com/clion/download/) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Community –∏–ª–∏ Trial –≤–µ—Ä—Å–∏—é\n\n"
                                      "üîπ *–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É*\n"
                                      "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *–®–∞–≥ 4: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π C-–ø—Ä–æ–≥—Ä–∞–º–º—É*\n"
                                      "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `main.c` —Å –∫–æ–¥–æ–º:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–®–∞–≥ 5: –°–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É*\n"
                                      "–í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                                      "–í—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å:\n"
                                      "```\n–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "armsss":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreature")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="tushdlyauveliceniyaobyema")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
                                      "‚Äî –°–∏–º–≤–æ–ª –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
                                      "üîπ *–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
                                      "- –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ: `+`, `-`, `*`, `/`, `%`\n"
                                      "- –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: `=`, `+=`, `-=`, `*=` –∏ —Ç.–¥.\n"
                                      "- –°—Ä–∞–≤–Ω–µ–Ω–∏—è: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- –õ–æ–≥–∏—á–µ—Å–∫–∏–µ: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∏:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x –º–µ–Ω—å—à–µ y –∏ y –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "tushdlyauveliceniyaobyema":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="armsss")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="igogoogogogogogog")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?*\n"
                                      "‚Äî –ò–º—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏.\n"
                                      "‚Äî –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–µ–µ—Ç —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç.\n\n"
                                      "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
                                      "- `int` ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `42`\n"
                                      "- `float` ‚Äî —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: `3.14`\n"
                                      "- `char` ‚Äî –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: `'A'`\n"
                                      "- `double` ‚Äî –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π\n\n"
                                      "============================\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *–í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"–í–æ–∑—Ä–∞—Å—Ç: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏:* –æ–±—ä—è–≤–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "sirenseacreature":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreatur")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="nozamoyeobidniye")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ C: if, else if, else*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π.\n\n"
                                      "üîπ *–°–∏–Ω—Ç–∞–∫—Å–∏—Å if:*\n"
                                      "```c\n"
                                      "if (—É—Å–ª–æ–≤–∏–µ) {\n"
                                      "    // –∫–æ–¥, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ else if –∏ else:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"–ù–æ–ª—å\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π:*\n"
                                      "- `&&` ‚Äî –ò (AND)\n"
                                      "- `||` ‚Äî –ò–õ–ò (OR)\n"
                                      "- `!`  ‚Äî –ù–ï (NOT)\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∏—Å–ª–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–≥–æ –∑–Ω–∞–∫–µ!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "nozamoyeobidniye":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreature")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="tushdlyauveliceniyaobyema")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
                                      "‚Äî –°–∏–º–≤–æ–ª –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
                                      "üîπ *–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
                                      "- –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ: `+`, `-`, `*`, `/`, `%`\n"
                                      "- –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: `=`, `+=`, `-=`, `*=` –∏ —Ç.–¥.\n"
                                      "- –°—Ä–∞–≤–Ω–µ–Ω–∏—è: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- –õ–æ–≥–∏—á–µ—Å–∫–∏–µ: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∏:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x –º–µ–Ω—å—à–µ y –∏ y –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "sirenseacreatur":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreatu")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ututututututrejfjwoejfpjqwp")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *–¶–∏–∫–ª—ã –≤ C: for, while, do-while*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n\n"
                                      "üîπ *–¶–∏–∫–ª for:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–¶–∏–∫–ª while:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–¶–∏–∫–ª do-while:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "ututututututrejfjwoejfpjqwp":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreatur")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="nozamoyeobidniye")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ C: if, else if, else*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä?*\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π.\n\n"
                                      "üîπ *–°–∏–Ω—Ç–∞–∫—Å–∏—Å if:*\n"
                                      "```c\n"
                                      "if (—É—Å–ª–æ–≤–∏–µ) {\n"
                                      "    // –∫–æ–¥, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ else if –∏ else:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"–ù–æ–ª—å\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π:*\n"
                                      "- `&&` ‚Äî –ò (AND)\n"
                                      "- `||` ‚Äî –ò–õ–ò (OR)\n"
                                      "- `!`  ‚Äî –ù–ï (NOT)\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∏—Å–ª–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–≥–æ –∑–Ω–∞–∫–µ!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "sirenseacreatu":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="tentiics")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="isdippsjjaias")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–§—É–Ω–∫—Ü–∏–∏ –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –ë–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥.\n\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"–¢–æ–º\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"–ö–≤–∞–¥—Ä–∞—Ç 5 —Ä–∞–≤–µ–Ω %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "isdippsjjaias":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="sirenseacreatu")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="ututututututrejfjwoejfpjqwp")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *–¶–∏–∫–ª—ã –≤ C: for, while, do-while*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ü–∏–∫–ª?*\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.\n\n"
                                      "üîπ *–¶–∏–∫–ª for:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–¶–∏–∫–ª while:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–¶–∏–∫–ª do-while:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"–ò—Ç–µ—Ä–∞—Ü–∏—è %d\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *–ó–∞–¥–∞–Ω–∏–µ:* –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "tentiics":
        keyboard = [[InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="diaaaadajgaa")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìå *–£–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —É–∫–∞–∑–∞—Ç–µ–ª—å?*\n"
                                      "‚Äî –£–∫–∞–∑–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –∞–¥—Ä–µ—Å –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n"
                                      "‚Äî –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é, –º–∞—Å—Å–∏–≤–∞–º–∏, —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"
                                      "üîπ *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è:*\n"
                                      "```c\n"
                                      "int x = 10;\n"
                                      "int* ptr = &x;\n"
                                      "printf(\"–ó–Ω–∞—á–µ–Ω–∏–µ: %d\\n\", *ptr); // —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n"
                                      "```\n"
                                      "‚Äî `&x` ‚Äî –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `x`\n"
                                      "‚Äî `*ptr` ‚Äî –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ –∞–¥—Ä–µ—Å—É\n\n"
                                      "üîπ *–ü–æ—è—Å–Ω–µ–Ω–∏–µ:*\n"
                                      "- `int* ptr;` ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\n"
                                      "- `*` ‚Äî —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É)\n"
                                      "- `&` ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n\n"
                                      "============================\n"
                                      "üîπ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞—Ç–µ–ª—å:*\n"
                                      "```c\n"
                                      "int a = 5;\n"
                                      "int* p = &a;\n"
                                      "*p = 100;\n"
                                      "printf(\"%d\\n\", a); // –≤—ã–≤–µ–¥–µ—Ç 100\n"
                                      "```\n"
                                      "‚úÖ –£–∫–∞–∑–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.\n\n"
                                      "============================\n"
                                      "üîπ *–ü–µ—á–∞—Ç—å –∞–¥—Ä–µ—Å–æ–≤:*\n"
                                      "```c\n"
                                      "int val = 42;\n"
                                      "printf(\"–ê–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: %p\\n\", &val);\n"
                                      "```\n"
                                      "‚Äî `%p` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–æ–≤.\n\n"
                                      "============================\n"
                                      "üí° –£–∫–∞–∑–∞—Ç–µ–ª–∏ ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å C.\n"
                                      "–û–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–∞—Ö, —Å—Ç—Ä–æ–∫–∞—Ö, –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç—å—é.\n\n"
                                      "üìé –í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ —Ç—ã —É–∑–Ω–∞–µ—à—å –ø—Ä–æ *–º–∞—Å—Å–∏–≤—ã –∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏*!\n",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "diaaaadajgaa":
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞ ‚û°", callback_data="tentiics")],
                    [InlineKeyboardButton("–ø—Ä–æ—à–ª–∞—è –≥–ª–∞–≤–∞", callback_data="isdippsjjaias")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *–§—É–Ω–∫—Ü–∏–∏ –≤ C*\n\n"
                                      "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?*\n"
                                      "‚Äî –ë–ª–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É.\n"
                                      "‚Äî –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥.\n\n"
                                      "üîπ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"–ü—Ä–∏–≤–µ—Ç, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"–¢–æ–º\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *–§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"–ö–≤–∞–¥—Ä–∞—Ç 5 —Ä–∞–≤–µ–Ω %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    if query.data == "english":
        keyboard = [[InlineKeyboardButton("üî• Start learning", callback_data="xxxx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "HI! Do you ready to study programming?",
            reply_markup=reply_markup
        )
    elif query.data == "xxxx":
        keyboard = [
            [InlineKeyboardButton("Programming languages", callback_data="continue")],
            [InlineKeyboardButton("Cybersecurity", callback_data="cybersec")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üöÄ Great! Now choose what you want to study:",
            reply_markup=reply_markup
        )
    elif query.data == "continue":
        keyboard = [
            [InlineKeyboardButton("üêç Python ", callback_data="pyt")],
            [InlineKeyboardButton("‚öôÔ∏è C++ ", callback_data="cp")],
            [InlineKeyboardButton("üü® Javascript", callback_data="scrip")],
            [InlineKeyboardButton("‚òï Java ", callback_data="toomycas")],
            [InlineKeyboardButton("üíª C", callback_data="huggywugg")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "GOOD!! now choose which language you want to study",
            reply_markup=reply_markup
        )

    elif query.data == "cybersec":
        keyboard = [
            [InlineKeyboardButton("üì°Networks", callback_data="cyberx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Let's start!\nChapter 1:",
            reply_markup=reply_markup
        )

    elif query.data == "cyberx":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="nextx")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Networks* are simply connected objects.\n"
                                      "For example, your circle of friends: you are connected by common interests,\n"
                                      "hobbies, skills, and other things. üß†ü§ù\n\n"
                                      "üì° Networks are everywhere:\n"
                                      " - üöá Public transportation in a city\n"
                                      " - ‚ö° Infrastructure like the national power grid\n"
                                      " - üèòÔ∏è Chatting with neighbors\n"
                                      " - ‚úâÔ∏è Mail systems for sending letters and packages\n\n"
                                      "üíª In computing, it‚Äôs the same idea applied to technology.\n"
                                      "Take your phone üì±: the reason you use it is to access information.\n\n"
                                      "üì∂ We will look at how devices exchange data and what rules apply\\.\n\n"
                                      "üñ•Ô∏è In computing, a network can consist of 2 to billions of devices.\n"
                                      "These include:\n"
                                      " - üíª Laptops\n"
                                      " - üì± Smartphones\n"
                                      " - üì∑ Surveillance cameras\n"
                                      " - üö¶ Traffic lights\n"
                                      " - üåæ Even farming equipment!\n\n"
                                      "üîå Networks are embedded in our daily life:\n"
                                      " - ‚õÖ Weather data collection\n"
                                      " - ‚ö° Power supply to homes\n"
                                      " - üö¶ Prioritizing road traffic\n\n"
                                      "üõ°Ô∏è Since networks are an integral part of modern life,\n"
                                      "understanding network principles is the foundation for studying cybersecurity.\n\n"
                                      "üë• Check the diagram below: Alice, Bob, and Jim formed their own network!\n"
                                      "We will come back to this later.\n\n"
                                      "*The first chapter is here!!*\n*–ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞ —É–∂–µ –∑–¥–µ—Å—å!!*"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "nextx":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="twop")],
            [InlineKeyboardButton("last chapter", callback_data="outofmymind")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *Chapter 2: Diving into the Internet!*\n\n"
                                      "Now that you understand what a network is ‚Äî simply devices connected together ‚Äî let‚Äôs figure out how the Internet works.\n\n"
                                      "üì° The Internet is just a *huge network* made up of many small networks connected to each other.\n\n"
                                      "üë´ Imagine Alice has made new friends ‚Äî Zayn and Toby. She wants to introduce them to Bob and Jim. But there‚Äôs one problem: only Alice understands the language of both groups. So she becomes a *bridge* ‚Äî now everyone can communicate through her. This is an example of a new network.\n\n"
                                      "üìú The first version of the Internet appeared in the late 1960s as part of the *ARPANET* project, funded by the U.S. military.\n"
                                      "It was the first real working network between computers.\n\n"
                                      "üåç In 1989, Tim Berners-Lee proposed the concept of the *World Wide Web (WWW)*, which turned the Internet into a convenient tool for sharing and storing information.\n\n"
                                      "üîå Today, the Internet is like a huge club made of thousands of small teams. There are two types of networks:\n"
                                      " - üîí Private Networks\n"
                                      " - üåê Public Networks, which together form what we call the Internet\n\n"
                                      "üí° Devices on a network use special *identifiers* (we‚Äôll talk about these later) to find each other and exchange data."

                                      ,
                                      reply_markup=reply_markup)
    elif query.data == "outofmymind":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="nextx")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Networks* are simply connected objects.\n"
                                      "For example, your circle of friends: you are connected by common interests,\n"
                                      "hobbies, skills, and other things. üß†ü§ù\n\n"
                                      "üì° Networks are everywhere:\n"
                                      " - üöá Public transportation in a city\n"
                                      " - ‚ö° Infrastructure like the national power grid\n"
                                      " - üèòÔ∏è Chatting with neighbors\n"
                                      " - ‚úâÔ∏è Mail systems for sending letters and packages\n\n"
                                      "üíª In computing, it‚Äôs the same idea applied to technology.\n"
                                      "Take your phone üì±: the reason you use it is to access information.\n\n"
                                      "üì∂ We will look at how devices exchange data and what rules apply\\.\n\n"
                                      "üñ•Ô∏è In computing, a network can consist of 2 to billions of devices.\n"
                                      "These include:\n"
                                      " - üíª Laptops\n"
                                      " - üì± Smartphones\n"
                                      " - üì∑ Surveillance cameras\n"
                                      " - üö¶ Traffic lights\n"
                                      " - üåæ Even farming equipment!\n\n"
                                      "üîå Networks are embedded in our daily life:\n"
                                      " - ‚õÖ Weather data collection\n"
                                      " - ‚ö° Power supply to homes\n"
                                      " - üö¶ Prioritizing road traffic\n\n"
                                      "üõ°Ô∏è Since networks are an integral part of modern life,\n"
                                      "understanding network principles is the foundation for studying cybersecurity.\n\n"
                                      "üë• Check the diagram below: Alice, Bob, and Jim formed their own network!\n"
                                      "We will come back to this later.\n\n"
                                      "*The first chapter is here!!*\n*–ü–µ—Ä–≤–∞—è –≥–ª–∞–≤–∞ —É–∂–µ –∑–¥–µ—Å—å!!*"
                                      ,
                                      reply_markup=reply_markup)


    elif query.data == "twop":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="threep")],
            [InlineKeyboardButton("last chapter", callback_data="dvauksazactotisact")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""üì° For devices to communicate and keep order in the network, they must:
‚Äî Recognize themselves
‚Äî Be recognizable by others

üí° Devices are like people:
‚Äî We have names (which can be changed)
‚Äî And fingerprints (unique forever)

üì± Devices also have two types of "identification":
‚Äî IP address (üìç can be changed)
‚Äî MAC address (üîí permanent, like a fingerprint)

=====================
üîπ IP Addresses
An IP address is like a device‚Äôs temporary name in the network.
It consists of 4 numbers (octets) separated by dots:
Example: 192.168.0.1

üîÅ One IP can be assigned to another device, but two devices cannot work simultaneously with the same IP in one network.

üåç There are two types of IP addresses:
‚Äî Private IP ‚Äî used inside a local network (home, office)
‚Äî Public IP ‚Äî visible on the Internet

üßæ Example:

Device	Private IP	Public IP
My PC	192.168.1.77	86.157.52.21
Other PC	192.168.1.74	86.157.52.21

üîç Both devices have the same public IP (one modem) but different private IPs ‚Äî that‚Äôs how they communicate in one network.

=====================
üåê Problem: not enough addresses!
IPv4 = 4.29 billion addresses (2^32). But devices worldwide ‚Äî tens of billions.

üí° Solution:
‚Äî IPv6 = 340+ trillion addresses (2^128)
‚Äî More efficient
‚Äî Much more addresses

Example:
‚Äî IPv4: 192.168.1.1
‚Äî IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334

=====================
üîπ MAC Addresses
Each device has a network adapter with a unique address ‚Äî MAC address.
Format: a4:c3:f0:85:ac:2d (6 bytes in hex form)

üõ† The first 6 characters ‚Äî manufacturer.
üìå The last 6 ‚Äî unique device number.

üí• But MAC address can be faked ‚Äî this is called spoofing:
‚Äî An attacker can pretend to be another device.
‚Äî For example, if a firewall allows only the admin‚Äôs MAC ‚Äî it can be tricked!

=====================
üìå Summary:
üîπ IP ‚Äî changes depending on the network.
üîπ MAC ‚Äî permanent and unique.
üîπ For security, keep in mind neither IP nor MAC guarantees authenticity.

""",
                                      reply_markup=reply_markup)
    elif query.data == "dvauksazactotisact":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="twop")],
            [InlineKeyboardButton("last chapter", callback_data="outofmymind")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *Chapter 2: Diving into the Internet!*\n\n"
                                      "Now that you understand what a network is ‚Äî simply devices connected together ‚Äî let‚Äôs figure out how the Internet works.\n\n"
                                      "üì° The Internet is just a *huge network* made up of many small networks connected to each other.\n\n"
                                      "üë´ Imagine Alice has made new friends ‚Äî Zayn and Toby. She wants to introduce them to Bob and Jim. But there‚Äôs one problem: only Alice understands the language of both groups. So she becomes a *bridge* ‚Äî now everyone can communicate through her. This is an example of a new network.\n\n"
                                      "üìú The first version of the Internet appeared in the late 1960s as part of the *ARPANET* project, funded by the U.S. military.\n"
                                      "It was the first real working network between computers.\n\n"
                                      "üåç In 1989, Tim Berners-Lee proposed the concept of the *World Wide Web (WWW)*, which turned the Internet into a convenient tool for sharing and storing information.\n\n"
                                      "üîå Today, the Internet is like a huge club made of thousands of small teams. There are two types of networks:\n"
                                      " - üîí Private Networks\n"
                                      " - üåê Public Networks, which together form what we call the Internet\n\n"
                                      "üí° Devices on a network use special *identifiers* (we‚Äôll talk about these later) to find each other and exchange data."

                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "threep":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="bablateperebatpizdec")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Ping is a basic network tool used to check connectivity between two devices."
            "It works using the ICMP protocol (Internet Control Message Protocol),"
            "sending special echo requests and waiting for echo replies from the target node."

            "With ping, you can determine if the connection is working and how stable it is."
            "You can also measure how many milliseconds it takes for packets to travel from one device to another."

            "This tool is built into most operating systems, including Linux and Windows."
            "To run ping, just enter the command:"
            "`ping IP-address` or `ping website-name` in the terminal or command prompt."

            "For example, if you run the command `ping 192.168.1.254`,"
            "you‚Äôll see how many packets were sent and received,",
            "and the average response time (e.g., 4.16 ms).",reply_markup = reply_markup)
    elif query.data == "bablateperebatpizdec":
        keyboard = [
            [InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="threep")],
            [InlineKeyboardButton("last chapter", callback_data="dvauksazactotisact")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""üì° For devices to communicate and keep order in the network, they must:
        ‚Äî Recognize themselves
        ‚Äî Be recognizable by others

        üí° Devices are like people:
        ‚Äî We have names (which can be changed)
        ‚Äî And fingerprints (unique forever)

        üì± Devices also have two types of "identification":
        ‚Äî IP address (üìç can be changed)
        ‚Äî MAC address (üîí permanent, like a fingerprint)

        =====================
        üîπ IP Addresses
        An IP address is like a device‚Äôs temporary name in the network.
        It consists of 4 numbers (octets) separated by dots:
        Example: 192.168.0.1

        üîÅ One IP can be assigned to another device, but two devices cannot work simultaneously with the same IP in one network.

        üåç There are two types of IP addresses:
        ‚Äî Private IP ‚Äî used inside a local network (home, office)
        ‚Äî Public IP ‚Äî visible on the Internet

        üßæ Example:

        Device	Private IP	Public IP
        My PC	192.168.1.77	86.157.52.21
        Other PC	192.168.1.74	86.157.52.21

        üîç Both devices have the same public IP (one modem) but different private IPs ‚Äî that‚Äôs how they communicate in one network.

        =====================
        üåê Problem: not enough addresses!
        IPv4 = 4.29 billion addresses (2^32). But devices worldwide ‚Äî tens of billions.

        üí° Solution:
        ‚Äî IPv6 = 340+ trillion addresses (2^128)
        ‚Äî More efficient
        ‚Äî Much more addresses

        Example:
        ‚Äî IPv4: 192.168.1.1
        ‚Äî IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334

        =====================
        üîπ MAC Addresses
        Each device has a network adapter with a unique address ‚Äî MAC address.
        Format: a4:c3:f0:85:ac:2d (6 bytes in hex form)

        üõ† The first 6 characters ‚Äî manufacturer.
        üìå The last 6 ‚Äî unique device number.

        üí• But MAC address can be faked ‚Äî this is called spoofing:
        ‚Äî An attacker can pretend to be another device.
        ‚Äî For example, if a firewall allows only the admin‚Äôs MAC ‚Äî it can be tricked!

        =====================
        üìå Summary:
        üîπ IP ‚Äî changes depending on the network.
        üîπ MAC ‚Äî permanent and unique.
        üîπ For security, keep in mind neither IP nor MAC guarantees authenticity.

        """,
                                      reply_markup=reply_markup)


    elif query.data == "pyt":
        keyboard = [[
            InlineKeyboardButton("GO", callback_data="numberones")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "GOOD!! Let's start our Python trip üêç¬ª",
            reply_markup=reply_markup)
    elif query.data == "cp":
        keyboard = [[
            InlineKeyboardButton("*Chapter 1*", callback_data="cpones")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "GOOD!! Let's start our C++ trip ‚öôÔ∏è",
            reply_markup=reply_markup)
    elif query.data == "scrip":
        keyboard = [[
            InlineKeyboardButton("chapter 1", callback_data="jvones")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "GOOD!! Let's start our üü® Javascript trip",
            reply_markup=reply_markup)
    elif query.data == "numberones":
        keyboard = [[InlineKeyboardButton("üêçStart", callback_data="mcqueens")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Let's get started!\n"
                                      "*Chapter 1:*", reply_markup=reply_markup)
    elif query.data == "mcqueens":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="f")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Installing Python 64-bit and Connecting to PyCharm Community*\n\n"
            "üîπ *Step 1: Download Python*\n"
            "[Download Python](https://www.python.org/downloads/) ‚Äî choose Windows x86-64 executable installer\n\n"
            "üîπ *Step 2: Installation*\n"
            "‚Äî Check 'Add Python to PATH'\n"
            "‚Äî Choose Customize Installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *Step 3: Verification*\n"
            "`python --version` in terminal ‚Äî should show Python 3.X.X\n\n"
            "üîπ *Step 4: Download PyCharm*\n"
            "[Download PyCharm](https://www.jetbrains.com/pycharm/download)\n"
            "‚Äî Install the Community edition\n\n"
            "üîπ *Step 5: Connect Python*\n"
            "New Project ‚Üí ‚öôÔ∏è Add Interpreter ‚Üí System Interpreter ‚Üí path:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Check:*\n"
            "Create a file with code:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "Press ‚ñ∂Ô∏è Run"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "f":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="ifelif")],
                    [InlineKeyboardButton("last chapter", callback_data="socsinyourmouthe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Variables and Data Types in Python*\n\n"
            "üîπ *What is a variable?*\n"
            "‚Äî It‚Äôs a name for storing data. The type is determined automatically.\n\n"
            "üîπ *Variable examples:*\n"
            "`x = 10` ‚Äî integer (int)\n"
            "`name = \"Tom\"` ‚Äî string (str)\n"
            "`pi = 3.14` ‚Äî floating point number (float)\n\n"
            "üîπ *Main data types:*\n"
            "- int ‚Äî whole numbers\n"
            "- float ‚Äî decimal numbers\n"
            "- str ‚Äî text strings\n"
            "- bool ‚Äî True / False (logic)\n\n"
            "üîπ *How to print data?*\n"
            "`print(x)`\n"
            "`print(name)`\n"
            "`print(pi)`\n\n"
            "‚úÖ *Try it yourself:*\n"
            "```python\nage = 15\ncity = \"Moscow\"\nis_student = True\n\n"
            "print(\"Age:\", age)\nprint(\"City:\", city)\nprint(\"Student:\", is_student)\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "socsinyourmouthe":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="f")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Installing Python 64-bit and Connecting to PyCharm Community*\n\n"
            "üîπ *Step 1: Download Python*\n"
            "[Download Python](https://www.python.org/downloads/) ‚Äî choose Windows x86-64 executable installer\n\n"
            "üîπ *Step 2: Installation*\n"
            "‚Äî Check 'Add Python to PATH'\n"
            "‚Äî Choose Customize Installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *Step 3: Verification*\n"
            "`python --version` in terminal ‚Äî should show Python 3.X.X\n\n"
            "üîπ *Step 4: Download PyCharm*\n"
            "[Download PyCharm](https://www.jetbrains.com/pycharm/download)\n"
            "‚Äî Install the Community edition\n\n"
            "üîπ *Step 5: Connect Python*\n"
            "New Project ‚Üí ‚öôÔ∏è Add Interpreter ‚Üí System Interpreter ‚Üí path:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Check:*\n"
            "Create a file with code:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "Press ‚ñ∂Ô∏è Run"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )


    elif query.data == "ifelif":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="sezere")],
                    [InlineKeyboardButton("last chapter", callback_data="ebatttttttttt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Conditions in Python: if, elif, else*\n\n"
            "üîπ *What is a condition?*\n"
            "‚Äî It‚Äôs a way to run code only if a certain condition is met.\n"
            "‚Äî Uses if, elif, else\n\n"
            "üîπ *Syntax:*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"You are an adult\")\n"
            "elif age >= 14:\n    print(\"You are a teenager\")\nelse:\n    print(\"You are a child\")\n```\n\n"
            "üîπ *Comparison operators:* ==, !=, >, <, >=, <=\n"
            "üîπ *Logical operators:* and, or, not\n\n"
            "‚úÖ *Try it yourself:*\n"
            "```python\nname = input(\"Your name: \")\nif name == \"Tom\":\n    print(\"Hello, Tom!\")\n"
            "else:\n    print(\"Hello, guest!\")\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "ebatttttttttt":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="ifelif")],
                    [InlineKeyboardButton("last chapter", callback_data="socsinyourmouthe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Variables and Data Types in Python*\n\n"
            "üîπ *What is a variable?*\n"
            "‚Äî It‚Äôs a name for storing data. The type is determined automatically.\n\n"
            "üîπ *Variable examples:*\n"
            "`x = 10` ‚Äî integer (int)\n"
            "`name = \"Tom\"` ‚Äî string (str)\n"
            "`pi = 3.14` ‚Äî floating point number (float)\n\n"
            "üîπ *Main data types:*\n"
            "- int ‚Äî whole numbers\n"
            "- float ‚Äî decimal numbers\n"
            "- str ‚Äî text strings\n"
            "- bool ‚Äî True / False (logic)\n\n"
            "üîπ *How to print data?*\n"
            "`print(x)`\n"
            "`print(name)`\n"
            "`print(pi)`\n\n"
            "‚úÖ *Try it yourself:*\n"
            "```python\nage = 15\ncity = \"Moscow\"\nis_student = True\n\n"
            "print(\"Age:\", age)\nprint(\"City:\", city)\nprint(\"Student:\", is_student)\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "sezere":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="tututut")],
                    [InlineKeyboardButton("last chapter", callback_data="ebaniyzavozastviiii")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: for and while Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a construct to repeatedly execute a block of code.\n"
                                      "‚Äî Used to iterate over lists, numbers, and other collections.\n\n"
                                      "============================\n"
                                      "üîπ *for loop:*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n\n"
                                      "üî∏ range(5) creates a sequence: 0, 1, 2, 3, 4\n\n"
                                      "============================\n"
                                      "üîπ *while loop:*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî Repeats the block while the condition is true.\n\n"
                                      "============================\n"
                                      "üîπ *Iterate over list with for:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- for ‚Äî good for iterating elements\n"
                                      "- while ‚Äî runs as long as condition is true\n"
                                      "- To stop the loop early, use `break`\n\n"
                                      "üí° Loops are the foundation for automation and processing large data!\n"
                                      "Try writing a simple loop yourself to print a list of numbers or words!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "ebaniyzavozastviiii":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="sezere")],
                    [InlineKeyboardButton("last chapter", callback_data="ebatttttttttt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Conditions in Python: if, elif, else*\n\n"
            "üîπ *What is a condition?*\n"
            "‚Äî It‚Äôs a way to run code only if a certain condition is met.\n"
            "‚Äî Uses if, elif, else\n\n"
            "üîπ *Syntax:*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"You are an adult\")\n"
            "elif age >= 14:\n    print(\"You are a teenager\")\nelse:\n    print(\"You are a child\")\n```\n\n"
            "üîπ *Comparison operators:* ==, !=, >, <, >=, <=\n"
            "üîπ *Logical operators:* and, or, not\n\n"
            "‚úÖ *Try it yourself:*\n"
            "```python\nname = input(\"Your name: \")\nif name == \"Tom\":\n    print(\"Hello, Tom!\")\n"
            "else:\n    print(\"Hello, guest!\")\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "tututut":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="onyxx")],
                    [InlineKeyboardButton("last chapter", callback_data="pizdecebaniystozasmertvnishite")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: Lists*\n\n"
                                      "üîπ *What is a list?*\n"
                                      "‚Äî It‚Äôs an ordered collection of elements.\n"
                                      "‚Äî You can store numbers, strings, and even other lists inside.\n\n"
                                      "============================\n"
                                      "üîπ *List example:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî A list of three strings.\n\n"
                                      "üî∏ Access by index:\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *Modify and add elements:*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # Replace 'banana' with 'kiwi'\nfruits.append(\"pear\")  # Add element\n```\n\n"
                                      "============================\n"
                                      "üîπ *Iterate over the list:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ Prints each element in the list.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Indexes start at 0\n"
                                      "- Can store elements of different types\n"
                                      "- Lists are mutable (you can add, remove elements)\n\n"
                                      "üí° Lists are one of the most powerful tools for working with data collections in Python.\n"
                                      "Try creating your own list and looping through it!"
                                      ,
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "pizdecebaniystozasmertvnishite":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="tututut")],
                    [InlineKeyboardButton("last chapter", callback_data="ebaniyzavozastviiii")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: for and while Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a construct to repeatedly execute a block of code.\n"
                                      "‚Äî Used to iterate over lists, numbers, and other collections.\n\n"
                                      "============================\n"
                                      "üîπ *for loop:*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n\n"
                                      "üî∏ range(5) creates a sequence: 0, 1, 2, 3, 4\n\n"
                                      "============================\n"
                                      "üîπ *while loop:*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî Repeats the block while the condition is true.\n\n"
                                      "============================\n"
                                      "üîπ *Iterate over list with for:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- for ‚Äî good for iterating elements\n"
                                      "- while ‚Äî runs as long as condition is true\n"
                                      "- To stop the loop early, use `break`\n\n"
                                      "üí° Loops are the foundation for automation and processing large data!\n"
                                      "Try writing a simple loop yourself to print a list of numbers or words!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "onyxx":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="xoxoxooxooxoxeeetoyavovremayaprisel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è *Functions in Python*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî It‚Äôs a block of code that performs a specific task.\n"
                                      "‚Äî Functions help avoid code repetition and make programs easier to understand.\n\n"
                                      "============================\n"
                                      "üîπ *Simple function:*\n"
                                      "```python\ndef say_hello():\n    print(\"Hello, world!\")\n\nsay_hello()  # Call the function\n```\n"
                                      "‚Äî The keyword `def`, function name, parentheses, and colon.\n"
                                      "‚Äî Everything inside runs when the function is called.\n\n"
                                      "============================\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```python\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\n```\n"
                                      "‚Äî You can pass values into the function.\n"
                                      "‚Äî These are called arguments or parameters.\n\n"
                                      "============================\n"
                                      "üîπ *Function with return value (`return`):*\n"
                                      "```python\ndef square(x):\n    return x * x\n\nresult = square(5)\nprint(result)\n```\n"
                                      "‚Äî `return` sends back the result of the function.\n"
                                      "‚Äî You can save the result into a variable.\n\n"
                                      "============================\n"
                                      "‚úÖ *Why are functions important?*\n"
                                      "- Make code compact and readable\n"
                                      "- Allow reusing the same code block\n"
                                      "- Enable splitting large programs into logical parts\n\n"
                                      "üí° First, try writing a function that prints your name, then one that returns the sum of two numbers!\n"
                                      "Functions are the foundation of any programming language! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "xoxoxooxooxoxeeetoyavovremayaprisel":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="onyxx")],
                    [InlineKeyboardButton("last chapter", callback_data="pizdecebaniystozasmertvnishite")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: Lists*\n\n"
                                      "üîπ *What is a list?*\n"
                                      "‚Äî It‚Äôs an ordered collection of elements.\n"
                                      "‚Äî You can store numbers, strings, and even other lists inside.\n\n"
                                      "============================\n"
                                      "üîπ *List example:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî A list of three strings.\n\n"
                                      "üî∏ Access by index:\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *Modify and add elements:*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # Replace 'banana' with 'kiwi'\nfruits.append(\"pear\")  # Add element\n```\n\n"
                                      "============================\n"
                                      "üîπ *Iterate over the list:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ Prints each element in the list.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Indexes start at 0\n"
                                      "- Can store elements of different types\n"
                                      "- Lists are mutable (you can add, remove elements)\n\n"
                                      "üí° Lists are one of the most powerful tools for working with data collections in Python.\n"
                                      "Try creating your own list and looping through it!"
                                      ,
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "cpones":
        keyboard = [[InlineKeyboardButton("‚öô Start", callback_data="rezere")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("¬´¬ª", reply_markup=reply_markup)

    elif query.data == "rezere":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="vezere")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ Setup and Start:*\n\n"
            "üîπ *Step 1: Install the compiler*\n"
            "[Download MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî Install gcc and add the bin path to your PATH environment variable\n\n"
            "üîπ *Step 2: Download an editor*\n"
            "[Download Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *Step 3: Check the compiler:*\n"
            "`g++ --version`\n\n"
            "üîπ *Step 4: Simple code:*\n"
            "```cpp\n#include <iostream>\\nint main\\(\\) {\\n"
            "    std::cout << \"Hello, world!\";\\n    return 0;\\n}\\n```\n"
            "Save as `main.cpp`, compile:\n"
            "`g++ main.cpp -o main`\n"
            "`./main`"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "vezere":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="cpp4")],
                    [InlineKeyboardButton("last chapter", callback_data="modaiskustvokulinariya")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: Variables and Data Types*\n\n"
            "üîπ *What is a variable?*\n"
            "‚Äî It‚Äôs a named memory area for storing data.\n"
            "‚Äî You must declare a variable with a type before using it.\n\n"
            "üîπ *Examples:*\n"
            "`int age = 15;`\n"
            "`double pi = 3.14;`\n"
            "`char grade = 'A';`\n"
            "`bool isOnline = true;`\n"
            "`std::string name = \"Tom\";`\n\n"
            "üîπ *Example output:*\n"
            "```cpp\n#include <iostream>\\n#include <string>\\n\\nint main\\(\\) {\\n"
            "    int age = 15;\\n    std::string name = \"Tom\";\\n"
            "    std::cout << \"Name: \" << name << \"\\n\";\\n"
            "    std::cout << \"Age: \" << age << \"\\n\";\\n    return 0;\\n}\\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "modaiskustvokulinariya":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="vezere")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ Setup and Start:*\n\n"
            "üîπ *Step 1: Install the compiler*\n"
            "[Download MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî Install gcc and add the bin path to your PATH environment variable\n\n"
            "üîπ *Step 2: Download an editor*\n"
            "[Download Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *Step 3: Check the compiler:*\n"
            "`g++ --version`\n\n"
            "üîπ *Step 4: Simple code:*\n"
            "```cpp\n#include <iostream>\\nint main\\(\\) {\\n"
            "    std::cout << \"Hello, world!\";\\n    return 0;\\n}\\n```\n"
            "Save as `main.cpp`, compile:\n"
            "`g++ main.cpp -o main`\n"
            "`./main`"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )


    elif query.data == "cpp4":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="bejingg")],
                    [InlineKeyboardButton("last chapter", callback_data="soliiiiiiinaranuebalat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: Conditions (if, else, else if)*\n\n"
            "üîπ *What is a condition?*\n"
            "‚Äî Allows executing code when conditions are met.\n\n"
            "üîπ *Example:*\n"
            "```cpp\n#include <iostream>\\nusing namespace std;\\n\\nint main\\(\\) {\\n"
            "    int age = 16;\\n"
            "    if \\(age >= 18\\) {\\n        cout << \"You are an adult\";\\n"
            "    } else if \\(age >= 14\\) {\\n        cout << \"You are a teenager\";\\n"
            "    } else {\\n        cout << \"You are a child\";\\n    }\\n    return 0;\\n}\\n```\n\n"
            "üîπ *Operators:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Logic:* `&&`, `||`, `!`\n\n"
            "‚úÖ *Try it yourself!*"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )
    elif query.data == "soliiiiiiinaranuebalat":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="cpp4")],
                    [InlineKeyboardButton("last chapter", callback_data="modaiskustvokulinariya")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: Variables and Data Types*\n\n"
            "üîπ *What is a variable?*\n"
            "‚Äî It‚Äôs a named memory area for storing data.\n"
            "‚Äî You must declare a variable with a type before using it.\n\n"
            "üîπ *Examples:*\n"
            "`int age = 15;`\n"
            "`double pi = 3.14;`\n"
            "`char grade = 'A';`\n"
            "`bool isOnline = true;`\n"
            "`std::string name = \"Tom\";`\n\n"
            "üîπ *Example output:*\n"
            "```cpp\n#include <iostream>\\n#include <string>\\n\\nint main\\(\\) {\\n"
            "    int age = 15;\\n    std::string name = \"Tom\";\\n"
            "    std::cout << \"Name: \" << name << \"\\n\";\\n"
            "    std::cout << \"Age: \" << age << \"\\n\";\\n    return 0;\\n}\\n```"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "bejingg":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="venomouss")],
                    [InlineKeyboardButton("last chapter", callback_data="owiworweuwruworwwe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *C++: Loops (for, while, do while)*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a way to repeatedly execute the same block of code while a condition is true.\n\n"
                                      "üîπ *Types of loops in C++:*\n"
                                      "- `for` ‚Äî when you know the number of iterations beforehand\n"
                                      "- `while` ‚Äî runs while the condition is true\n"
                                      "- `do while` ‚Äî runs first, then checks the condition\n\n"
                                      "============================\n"
                                      "üîπ *Example: for*\n"
                                      "```cpp\nfor \\(int i = 0; i < 5; i\\+\\+\\) {\\n    cout << i << \" \"\\;\\n}\\n```\n"
                                      "üî∏ Output: `0 1 2 3 4`\n\n"
                                      "============================\n"
                                      "üîπ *Example: while*\n"
                                      "```cpp\nint i = 0;\\nwhile \\(i < 3\\) {\\n    cout << i << endl;\\n    i\\+\\+;\\n}\\n```\n"
                                      "üî∏ Output: `0`, `1`, `2`\n\n"
                                      "============================\n"
                                      "üîπ *Example: do while*\n"
                                      "```cpp\nint i = 0;\\ndo {\\n    cout << i << endl;\\n    i\\+\\+;\\n} while \\(i < 2\\);\\n```\n"
                                      "üî∏ Output: `0`, `1`\n\n"
                                      "============================\n"
                                      "‚úÖ *When to use?*\n"
                                      "- `for` ‚Äî convenient for counters (`i = 0; i < N; i++`)\n"
                                      "- `while` ‚Äî when you don‚Äôt know how many times in advance\n"
                                      "- `do while` ‚Äî guarantees at least one run\n\n"
                                      "Try it yourself!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "owiworweuwruworwwe":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="bejingg")],
                    [InlineKeyboardButton("last chapter", callback_data="soliiiiiiinaranuebalat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: Conditions (if, else, else if)*\n\n"
            "üîπ *What is a condition?*\n"
            "‚Äî Allows executing code when conditions are met.\n\n"
            "üîπ *Example:*\n"
            "```cpp\n#include <iostream>\\nusing namespace std;\\n\\nint main\\(\\) {\\n"
            "    int age = 16;\\n"
            "    if \\(age >= 18\\) {\\n        cout << \"You are an adult\";\\n"
            "    } else if \\(age >= 14\\) {\\n        cout << \"You are a teenager\";\\n"
            "    } else {\\n        cout << \"You are a child\";\\n    }\\n    return 0;\\n}\\n```\n\n"
            "üîπ *Operators:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Logic:* `&&`, `||`, `!`\n\n"
            "‚úÖ *Try it yourself!*"
            ,
            parse_mode="Markdown", reply_markup=reply_markup
        )

    elif query.data == "venomouss":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="zerotrusts")],
                    [InlineKeyboardButton("last chapter", callback_data="izsamariamsimd")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: Arrays*\n\n"
                                      "üîπ *What is an array?*\n"
                                      "‚Äî It‚Äôs a collection of elements of **the same type**, stored contiguously in memory.\n"
                                      "‚Äî Each element has its own index (starting at 0).\n\n"
                                      "============================\n"
                                      "üîπ *Array example:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\\n```\n"
                                      "‚Äî Creates an array of 5 elements of type int.\n\n"
                                      "üî∏ Access elements:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Print all elements using a loop:*\n"
                                      "```cpp\nfor \\(int i = 0; i < 5; i\\+\\+\\) {\\n    cout << numbers\\[i\\] << \" \"\\;\\n}\\n```\n"
                                      "üî∏ Output: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Input values from user:*\n"
                                      "```cpp\nint a[3];\\nfor \\(int i = 0; i < 3; i\\+\\+\\) {\\n    cin >> a\\[i\\];\\n}\\n```\n"
                                      "üî∏ Stores 3 numbers in the array.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Indexes go from `0` to `n - 1`\n"
                                      "- Going out of array bounds = ‚ùå error (UB ‚Äî undefined behavior)\n"
                                      "- All elements are the same type (int, float, char, etc.)\n\n"
                                      "üí° Arrays are fundamental. With them, you‚Äôll learn memory management, sorting, algorithms!\n\n"
                                      "Try creating an array and printing its elements!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "izsamariamsimd":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="venomouss")],
                    [InlineKeyboardButton("last chapter", callback_data="owiworweuwruworwwe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *C++: Loops (for, while, do while)*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a way to repeatedly execute the same block of code while a condition is true.\n\n"
                                      "üîπ *Types of loops in C++:*\n"
                                      "- `for` ‚Äî when you know the number of iterations beforehand\n"
                                      "- `while` ‚Äî runs while the condition is true\n"
                                      "- `do while` ‚Äî runs first, then checks the condition\n\n"
                                      "============================\n"
                                      "üîπ *Example: for*\n"
                                      "```cpp\nfor \\(int i = 0; i < 5; i\\+\\+\\) {\\n    cout << i << \" \"\\;\\n}\\n```\n"
                                      "üî∏ Output: `0 1 2 3 4`\n\n"
                                      "============================\n"
                                      "üîπ *Example: while*\n"
                                      "```cpp\nint i = 0;\\nwhile \\(i < 3\\) {\\n    cout << i << endl;\\n    i\\+\\+;\\n}\\n```\n"
                                      "üî∏ Output: `0`, `1`, `2`\n\n"
                                      "============================\n"
                                      "üîπ *Example: do while*\n"
                                      "```cpp\nint i = 0;\\ndo {\\n    cout << i << endl;\\n    i\\+\\+;\\n} while \\(i < 2\\);\\n```\n"
                                      "üî∏ Output: `0`, `1`\n\n"
                                      "============================\n"
                                      "‚úÖ *When to use?*\n"
                                      "- `for` ‚Äî convenient for counters (`i = 0; i < N; i++`)\n"
                                      "- `while` ‚Äî when you don‚Äôt know how many times in advance\n"
                                      "- `do while` ‚Äî guarantees at least one run\n\n"
                                      "Try it yourself!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "zerotrusts":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="amburanmal")],
                    [InlineKeyboardButton("last chapter", callback_data="zinanzinsnedeji")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: Strings*\n\n"
                                      "üîπ *What is a string?*\n"
                                      "‚Äî It‚Äôs a sequence of characters, like a name or phrase.\n"
                                      "‚Äî In C++, you can use a char array or the `std::string` class.\n\n"
                                      "============================\n"
                                      "üîπ *String as a char array:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\\n```\n"
                                      "üî∏ The `\\0` character is automatically added at the end ‚Äî it marks the string‚Äôs end.\n"
                                      "üî∏ The array size must be larger than the string length.\n\n"
                                      "============================\n"
                                      "üîπ *Strings with `std::string`:*\n"
                                      "```cpp\n#include <string>\\n\\nstd::string city = \"Baku\";\\n```\n"
                                      "‚Äî This method is easier and safer.\n\n"
                                      "============================\n"
                                      "üîπ *Basic operations:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\\n\\n"
                                      "cout << name << endl;         // Print the string\\n"
                                      "cout << name.length() << endl; // String length\\n"
                                      "name += \" Hardy\";             // Concatenation\\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *User input for string:*\n"
                                      "```cpp\nstd::string userName;\\ncout << \"Enter name: \";\\ncin >> userName;\\n```\n"
                                      "‚ùó `cin` reads input until the first space. For a full phrase:\n"
                                      "```cpp\nstd::string fullName;\\ngetline(cin, fullName);\\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- `std::string` is easier and safer than `char` arrays\n"
                                      "- You can easily concatenate, measure length, and find characters\n"
                                      "- For Cyrillic or other unicode, encoding setup may be needed\n\n"
                                      "üí° Strings are the foundation for working with text, forms, messages!\n"
                                      "Try creating a string and printing it! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "zinanzinsnedeji":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="zerotrusts")],
                    [InlineKeyboardButton("last chapter", callback_data="izsamariamsimd")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: Arrays*\n\n"
                                      "üîπ *What is an array?*\n"
                                      "‚Äî It‚Äôs a collection of elements of **the same type**, stored contiguously in memory.\n"
                                      "‚Äî Each element has its own index (starting at 0).\n\n"
                                      "============================\n"
                                      "üîπ *Array example:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\\n```\n"
                                      "‚Äî Creates an array of 5 elements of type int.\n\n"
                                      "üî∏ Access elements:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Print all elements using a loop:*\n"
                                      "```cpp\nfor \\(int i = 0; i < 5; i\\+\\+\\) {\\n    cout << numbers\\[i\\] << \" \"\\;\\n}\\n```\n"
                                      "üî∏ Output: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Input values from user:*\n"
                                      "```cpp\nint a[3];\\nfor \\(int i = 0; i < 3; i\\+\\+\\) {\\n    cin >> a\\[i\\];\\n}\\n```\n"
                                      "üî∏ Stores 3 numbers in the array.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Indexes go from `0` to `n - 1`\n"
                                      "- Going out of array bounds = ‚ùå error (UB ‚Äî undefined behavior)\n"
                                      "- All elements are the same type (int, float, char, etc.)\n\n"
                                      "üí° Arrays are fundamental. With them, you‚Äôll learn memory management, sorting, algorithms!\n\n"
                                      "Try creating an array and printing its elements!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "amburanmal":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="crchemole")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C++: Functions*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî It‚Äôs a block of code that performs a specific task.\n"
                                      "‚Äî Helps structure the program and avoid repetition.\n\n"
                                      "============================\n"
                                      "üîπ *Simple function:*\n"
                                      "```cpp\nvoid sayHello\\(\\) {\\n    cout << \"Hello, world!\" << endl;\\n}\\n\\nint main\\(\\) {\\n    sayHello\\(\\);\\n    return 0;\\n}\\n```\n"
                                      "‚Äî The keyword `void` means the function returns nothing.\n"
                                      "‚Äî Call the function by its name.\n\n"
                                      "============================\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```cpp\nvoid greet\\(string name\\) {\\n    cout << \"Hello, \" << name << endl;\\n}\\n\\nint main\\(\\) {\\n    greet\\(\"Alice\"\\);\\n    return 0;\\n}\\n```\n"
                                      "‚Äî You can pass data into the function.\n"
                                      "‚Äî Parameters are specified in parentheses in the declaration.\n\n"
                                      "============================\n"
                                      "üîπ *Function with return value:*\n"
                                      "```cpp\nint square\\(int x\\) {\\n    return x * x;\\n}\\n\\nint main\\(\\) {\\n    int res = square\\(5\\);\\n    cout << res;\\n    return 0;\\n}\\n```\n"
                                      "‚Äî Specify the return type (e.g., `int`).\n"
                                      "‚Äî Use `return` to send back the result.\n\n"
                                      "============================\n"
                                      "‚úÖ *Why are functions important?*\n"
                                      "- Code becomes compact and clear\n"
                                      "- You can reuse the same code\n"
                                      "- The program is easy to split into parts\n\n"
                                      "üí° Try writing your own function that sums two numbers and returns the result!\n"
                                      "Functions are the foundation of good C++ code! üöÄ",
                                      reply_markup=reply_markup)
    elif query.data == "crchemole":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="amburanmal")],
                    [InlineKeyboardButton("last chapter", callback_data="zinanzinsnedeji")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: Strings*\n\n"
                                      "üîπ *What is a string?*\n"
                                      "‚Äî It‚Äôs a sequence of characters, like a name or phrase.\n"
                                      "‚Äî In C++, you can use a char array or the `std::string` class.\n\n"
                                      "============================\n"
                                      "üîπ *String as a char array:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\\n```\n"
                                      "üî∏ The `\\0` character is automatically added at the end ‚Äî it marks the string‚Äôs end.\n"
                                      "üî∏ The array size must be larger than the string length.\n\n"
                                      "============================\n"
                                      "üîπ *Strings with `std::string`:*\n"
                                      "```cpp\n#include <string>\\n\\nstd::string city = \"Baku\";\\n```\n"
                                      "‚Äî This method is easier and safer.\n\n"
                                      "============================\n"
                                      "üîπ *Basic operations:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\\n\\n"
                                      "cout << name << endl;         // Print the string\\n"
                                      "cout << name.length() << endl; // String length\\n"
                                      "name += \" Hardy\";             // Concatenation\\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *User input for string:*\n"
                                      "```cpp\nstd::string userName;\\ncout << \"Enter name: \";\\ncin >> userName;\\n```\n"
                                      "‚ùó `cin` reads input until the first space. For a full phrase:\n"
                                      "```cpp\nstd::string fullName;\\ngetline(cin, fullName);\\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- `std::string` is easier and safer than `char` arrays\n"
                                      "- You can easily concatenate, measure length, and find characters\n"
                                      "- For Cyrillic or other unicode, encoding setup may be needed\n\n"
                                      "üí° Strings are the foundation for working with text, forms, messages!\n"
                                      "Try creating a string and printing it! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "jvones":
        keyboard = [[InlineKeyboardButton("‚öô Start", callback_data="lexust")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Let's start!\nChapter 1:", reply_markup=reply_markup)
    elif query.data == "lexust":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="lex")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript Setup and Start:*\n\n"
                                      "üîπ *Step 1: Download an editor*\n"
                                      "[Download Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Step 2: Check Node\\.js installation*\n"
                                      "[Download Node\\.js](https://nodejs.org/)\n"
                                      "‚Äî Install and check version:\n"
                                      "`node --version`\n\n"
                                      "üîπ *Step 3: Simple code:*\n"
                                      "Create a file `main.js` with code:\n"
                                      "```js\nconsole.log\\(\"Hello, world!\"\\);\\n```\n"
                                      "Run it in the terminal:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript is your first step to creating websites, bots, and apps!*",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "lex":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="lextu")],
                    [InlineKeyboardButton("last chapter", callback_data="tiutuosiojimvpsiieee")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Variables and Data Types*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî It‚Äôs a named container for data.\n"
                                      "‚Äî Declared with `let`, `const`, or the older `var` keyword.\n\n"
                                      "üîπ *Examples:*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Console output:*\n"
                                      "```js\nlet age = 15;\\nlet name = \"Tom\";\\nconsole.log\\(\"Name:\\\", name\\);\\nconsole.log\\(\"Age:\\\", age\\);\\n```\n"
                                      "üí° *Tip:* Use `const` for values that don‚Äôt change and `let` for variables that can change."
                                      ,
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "tiutuosiojimvpsiieee":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="lex")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript Setup and Start:*\n\n"
                                      "üîπ *Step 1: Download an editor*\n"
                                      "[Download Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Step 2: Check Node\\.js installation*\n"
                                      "[Download Node\\.js](https://nodejs.org/)\n"
                                      "‚Äî Install and check version:\n"
                                      "`node --version`\n\n"
                                      "üîπ *Step 3: Simple code:*\n"
                                      "Create a file `main.js` with code:\n"
                                      "```js\nconsole.log\\(\"Hello, world!\"\\);\\n```\n"
                                      "Run it in the terminal:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript is your first step to creating websites, bots, and apps!*",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "lextu":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="porsche")],
                    [InlineKeyboardButton("last chapter", callback_data="marlonmogspercentofpeople")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Conditions and Comparisons*\n\n"
                                      "üîπ *What is a condition?*\n"
                                      "‚Äî It‚Äôs a check where the code inside the block runs if the expression evaluates to `true`.\n"
                                      "‚Äî In JavaScript, this is done with the `if` statement.\n\n"
                                      "üîπ *Example:*\n"
                                      "```js\nlet age = 18;\\nif \\(age >= 18\\) {\\n    console.log\\(\"Access granted\"\\);\\n} else {\\n    console.log\\(\"Access denied\"\\);\\n}\\n```\n\n"
                                      "üîπ *Comparison operators:*\n"
                                      "`==` ‚Äî compares by value (can convert types)\n"
                                      "`===` ‚Äî strict comparison (checks both type and value)\n"
                                      "`!=` ‚Äî not equal (by value)\n"
                                      "`!==` ‚Äî strict not equal (by type and value)\n"
                                      "`>` ‚Äî greater than\n"
                                      "`<` ‚Äî less than\n"
                                      "`>=` ‚Äî greater or equal\n"
                                      "`<=` ‚Äî less or equal\n\n"
                                      "üí° *Important:* It‚Äôs better to use `===` and `!==` to avoid unexpected errors caused by type coercion."
                                      ,
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "marlonmogspercentofpeople":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="lextu")],
                    [InlineKeyboardButton("last chapter", callback_data="tiutuosiojimvpsiieee")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Variables and Data Types*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî It‚Äôs a named container for data.\n"
                                      "‚Äî Declared with `let`, `const`, or the older `var` keyword.\n\n"
                                      "üîπ *Examples:*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Console output:*\n"
                                      "```js\nlet age = 15;\\nlet name = \"Tom\";\\nconsole.log\\(\"Name:\\\", name\\);\\nconsole.log\\(\"Age:\\\", age\\);\\n```\n"
                                      "üí° *Tip:* Use `const` for values that don‚Äôt change and `let` for variables that can change."
                                      ,
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "porsche":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="ferrari")],
                    [InlineKeyboardButton("last chapter", callback_data="popaodkpaskpopofpajmamam")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Logical Operators*\n\n"
                                      "üîπ *What are they?*\n"
                                      "‚Äî Logical operators help combine conditions.\n"
                                      "‚Äî They allow checking multiple conditions at once.\n\n"
                                      "üîπ *Types of logical operators:*\n"
                                      "`&&` ‚Äî AND (both conditions must be true)\n"
                                      "`||` ‚Äî OR (at least one condition is true)\n"
                                      "`!` ‚Äî NOT (negation, flips the value)\n\n"
                                      "üîπ *Examples:*\n"
                                      "```js\nlet age = 20;\\nlet hasPassport = true;\\n\nif \\(age >= 18 && hasPassport\\) {\\n    console.log\\(\"Access granted\"\\);\\n} else {\\n    console.log\\(\"Access denied\"\\);\\n}\\n```\n\n"
                                      "```js\nlet isOnline = false;\\nif \\(!isOnline\\) {\\n    console.log\\(\"User is offline\"\\);\\n}\\n```\n\n"
                                      "üí° *Important:* Parentheses are evaluated first, then operators.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )
    elif query.data == "popaodkpaskpopofpajmamam":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="porsche")],
                    [InlineKeyboardButton("last chapter", callback_data="marlonmogspercentofpeople")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Conditions and Comparisons*\n\n"
                                      "üîπ *What is a condition?*\n"
                                      "‚Äî It‚Äôs a check where the code inside the block runs if the expression evaluates to `true`.\n"
                                      "‚Äî In JavaScript, this is done with the `if` statement.\n\n"
                                      "üîπ *Example:*\n"
                                      "```js\nlet age = 18;\\nif \\(age >= 18\\) {\\n    console.log\\(\"Access granted\"\\);\\n} else {\\n    console.log\\(\"Access denied\"\\);\\n}\\n```\n\n"
                                      "üîπ *Comparison operators:*\n"
                                      "`==` ‚Äî compares by value (can convert types)\n"
                                      "`===` ‚Äî strict comparison (checks both type and value)\n"
                                      "`!=` ‚Äî not equal (by value)\n"
                                      "`!==` ‚Äî strict not equal (by type and value)\n"
                                      "`>` ‚Äî greater than\n"
                                      "`<` ‚Äî less than\n"
                                      "`>=` ‚Äî greater or equal\n"
                                      "`<=` ‚Äî less or equal\n\n"
                                      "üí° *Important:* It‚Äôs better to use `===` and `!==` to avoid unexpected errors caused by type coercion."
                                      ,
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "ferrari":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="dod")],
                    [InlineKeyboardButton("last chapter", callback_data="viytisuximizvodi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a way to repeat a block of code multiple times.\n"
                                      "‚Äî Used for working with arrays, repetitive tasks, and automation.\n\n"
                                      "============================\n"
                                      "üîπ *for loop*\n"
                                      "```js\nfor \\(let i = 0; i < 5; i\\+\\+\\) {\\n    console.log\\(i\\);\\n}\\n```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n"
                                      "`i++` means increase the counter by 1 each time.\n\n"
                                      "============================\n"
                                      "üîπ *while loop*\n"
                                      "```js\nlet x = 0;\\nwhile \\(x < 3\\) {\\n    console.log\\(x\\);\\n    x\\+\\+;\\n}\\n```\n"
                                      "‚Äî Runs the code while `x < 3`.\n\n"
                                      "============================\n"
                                      "üîπ *do...while loop*\n"
                                      "```js\nlet y = 0;\\ndo {\\n    console.log\\(y\\);\\n    y\\+\\+;\\n} while \\(y < 2\\);\\n```\n"
                                      "‚Äî Executes the code at least once even if the condition is false.\n\n"
                                      "============================\n"
                                      "üîπ *Example: looping over an array*\n"
                                      "```js\nlet fruits = \\[\"üçé\", \"üçå\", \"üçá\"\\];\\nfor \\(let i = 0; i < fruits.length; i\\+\\+\\) {\\n    console.log\\(fruits\\[i\\]\\);\\n}\\n```\n"
                                      "‚Äî Iterates over all elements in the array.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Easy to create an infinite loop (don‚Äôt forget to update the counter!)\n"
                                      "- Use `break` to exit the loop\n"
                                      "- `continue` skips the current iteration\n\n"
                                      "üí° Loops are a key tool for working with data structures and automating tasks!\n"
                                      "Try writing a loop that prints numbers from 10 down to 1 in reverse order! üöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "viytisuximizvodi":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="ferrari")],
                    [InlineKeyboardButton("last chapter", callback_data="popaodkpaskpopofpajmamam")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Logical Operators*\n\n"
                                      "üîπ *What are they?*\n"
                                      "‚Äî Logical operators help combine conditions.\n"
                                      "‚Äî They allow checking multiple conditions at once.\n\n"
                                      "üîπ *Types of logical operators:*\n"
                                      "`&&` ‚Äî AND (both conditions must be true)\n"
                                      "`||` ‚Äî OR (at least one condition is true)\n"
                                      "`!` ‚Äî NOT (negation, flips the value)\n\n"
                                      "üîπ *Examples:*\n"
                                      "```js\nlet age = 20;\\nlet hasPassport = true;\\n\nif \\(age >= 18 && hasPassport\\) {\\n    console.log\\(\"Access granted\"\\);\\n} else {\\n    console.log\\(\"Access denied\"\\);\\n}\\n```\n\n"
                                      "```js\nlet isOnline = false;\\nif \\(!isOnline\\) {\\n    console.log\\(\"User is offline\"\\);\\n}\\n```\n\n"
                                      "üí° *Important:* Parentheses are evaluated first, then operators.",
                                      parse_mode="Markdown", reply_markup=reply_markup
                                      )

    elif query.data == "dod":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="sremon")],
                    [InlineKeyboardButton("last chapter", callback_data="nunutireihgtj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Functions explained*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî A named piece of code that does a specific job.\n"
                                      "‚Äî You can call it many times without copying code.\n"
                                      "‚Äî It‚Äôs the base of structured programming.\n\n"
                                      "üîπ *Why use functions?*\n"
                                      "‚úî Avoid repeating code\n"
                                      "‚úî Split program into logical parts\n"
                                      "‚úî Take inputs \\(arguments\\) and return results\n\n"
                                      "üîπ *Simple function example:*\n"
                                      "```js\n"
                                      "function sayHello() {\n"
                                      "  console.log(\"Hello!\"\\);\n"
                                      "}\n\n"
                                      "sayHello\\(\\); // call function\n"
                                      "```\n"
                                      "üí° `sayHello` prints \"Hello!\" every time it‚Äôs called.\n\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```js\n"
                                      "function greet\\(name\\) {\n"
                                      "  console.log\\(\"Hello, \" + name\\);\n"
                                      "}\n\n"
                                      "greet\\(\"Tom\"\\);\n"
                                      "greet\\(\"Anna\"\\);\n"
                                      "```\n"
                                      "üí° `name` lets you send different values to the function.\n\n"
                                      "üîπ *Function that returns a value:*\n"
                                      "```js\n"
                                      "function square\\(number\\) {\n"
                                      "  return number * number;\n"
                                      "}\n\n"
                                      "console.log\\(square\\(4\\)\\); // 16\n"
                                      "```\n"
                                      "üí° `return` gives back the result to use later.\n\n"
                                      "üîπ *Remember:*\n"
                                      "‚úî Call functions only after declaring them\n"
                                      "‚úî Code inside runs only when called\n"
                                      "‚úî You can pass many arguments\n\n"
                                      "Functions make your code cleaner, easier, and flexible!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "nunutireihgtj":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="dod")],
                    [InlineKeyboardButton("last chapter", callback_data="viytisuximizvodi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî It‚Äôs a way to repeat a block of code multiple times.\n"
                                      "‚Äî Used for working with arrays, repetitive tasks, and automation.\n\n"
                                      "============================\n"
                                      "üîπ *for loop*\n"
                                      "```js\nfor \\(let i = 0; i < 5; i\\+\\+\\) {\\n    console.log\\(i\\);\\n}\\n```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n"
                                      "`i++` means increase the counter by 1 each time.\n\n"
                                      "============================\n"
                                      "üîπ *while loop*\n"
                                      "```js\nlet x = 0;\\nwhile \\(x < 3\\) {\\n    console.log\\(x\\);\\n    x\\+\\+;\\n}\\n```\n"
                                      "‚Äî Runs the code while `x < 3`.\n\n"
                                      "============================\n"
                                      "üîπ *do...while loop*\n"
                                      "```js\nlet y = 0;\\ndo {\\n    console.log\\(y\\);\\n    y\\+\\+;\\n} while \\(y < 2\\);\\n```\n"
                                      "‚Äî Executes the code at least once even if the condition is false.\n\n"
                                      "============================\n"
                                      "üîπ *Example: looping over an array*\n"
                                      "```js\nlet fruits = \\[\"üçé\", \"üçå\", \"üçá\"\\];\\nfor \\(let i = 0; i < fruits.length; i\\+\\+\\) {\\n    console.log\\(fruits\\[i\\]\\);\\n}\\n```\n"
                                      "‚Äî Iterates over all elements in the array.\n\n"
                                      "============================\n"
                                      "‚úÖ *Important to remember:*\n"
                                      "- Easy to create an infinite loop (don‚Äôt forget to update the counter!)\n"
                                      "- Use `break` to exit the loop\n"
                                      "- `continue` skips the current iteration\n\n"
                                      "üí° Loops are a key tool for working with data structures and automating tasks!\n"
                                      "Try writing a loop that prints numbers from 10 down to 1 in reverse order! üöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "sremon":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="rioioirrrroeoirpire")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaScript: Objects*\n\n"
                                      "üîπ *What is an object?*\n"
                                      "‚Äî A structure to store related data and functions.\n"
                                      "‚Äî Consists of \"key: value\" pairs.\n\n"
                                      "============================\n"
                                      "üîπ *Simple object example:*\n"
                                      "```js\n"
                                      "let person = {\n"
                                      "  name: \"Tom\",\n"
                                      "  age: 25,\n"
                                      "  isStudent: true\n"
                                      "};\n"
                                      "```\n"
                                      "üî∏ Access properties:\n"
                                      "`person.name` ‚Üí \"Tom\"\n"
                                      "`person[\"age\"]` ‚Üí 25\n\n"
                                      "============================\n"
                                      "üîπ *Object with a method:*\n"
                                      "```js\n"
                                      "let car = {\n"
                                      "  brand: \"Toyota\",\n"
                                      "  start: function() {\n"
                                      "    console.log(\"Engine started\");\n"
                                      "  }\n"
                                      "};\n\n"
                                      "car.start();\n"
                                      "```\n"
                                      "============================\n"
                                      "‚úÖ *Why use objects?*\n"
                                      "- Store complex data together\n"
                                      "- Model real-world entities\n"
                                      "- Essential for DOM, APIs, games\n\n"
                                      "üí° Try creating an object \"phone\" with properties \"model\", \"year\" and a method \"call()\"!",
                                      parse_mode="Markdown",reply_markup = reply_markup )
    elif query.data == "rioioirrrroeoirpire":
        keyboard = [[InlineKeyboardButton("next chapter‚û°Ô∏è", callback_data="sremon")],
                    [InlineKeyboardButton("last chapter", callback_data="nunutireihgtj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Functions explained*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî A named piece of code that does a specific job.\n"
                                      "‚Äî You can call it many times without copying code.\n"
                                      "‚Äî It‚Äôs the base of structured programming.\n\n"
                                      "üîπ *Why use functions?*\n"
                                      "‚úî Avoid repeating code\n"
                                      "‚úî Split program into logical parts\n"
                                      "‚úî Take inputs \\(arguments\\) and return results\n\n"
                                      "üîπ *Simple function example:*\n"
                                      "```js\n"
                                      "function sayHello() {\n"
                                      "  console.log(\"Hello!\"\\);\n"
                                      "}\n\n"
                                      "sayHello\\(\\); // call function\n"
                                      "```\n"
                                      "üí° `sayHello` prints \"Hello!\" every time it‚Äôs called.\n\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```js\n"
                                      "function greet\\(name\\) {\n"
                                      "  console.log\\(\"Hello, \" + name\\);\n"
                                      "}\n\n"
                                      "greet\\(\"Tom\"\\);\n"
                                      "greet\\(\"Anna\"\\);\n"
                                      "```\n"
                                      "üí° `name` lets you send different values to the function.\n\n"
                                      "üîπ *Function that returns a value:*\n"
                                      "```js\n"
                                      "function square\\(number\\) {\n"
                                      "  return number * number;\n"
                                      "}\n\n"
                                      "console.log\\(square\\(4\\)\\); // 16\n"
                                      "```\n"
                                      "üí° `return` gives back the result to use later.\n\n"
                                      "üîπ *Remember:*\n"
                                      "‚úî Call functions only after declaring them\n"
                                      "‚úî Code inside runs only when called\n"
                                      "‚úî You can pass many arguments\n\n"
                                      "Functions make your code cleaner, easier, and flexible!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "toomycas":
        keyboard = [[InlineKeyboardButton("‚òï Start learning Java", callback_data="office")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Java", reply_markup=reply_markup)
    elif query.data == "office":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="siren")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: Installation & First Project*\n\n"
                                      "üîπ *Step 1: Download and Install JDK*\n"
                                      "[üîó Official Download Page](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî Choose the Java SE Development Kit (JDK) for your operating system\n"
                                      "‚Äî During installation, check `Add JAVA to PATH` (if available)\n\n"
                                      "üîπ *Step 2: Verify Installation*\n"
                                      "Open your terminal or command prompt and type:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "If versions appear, installation was successful!\n\n"
                                      "üîπ *Step 3: Install an IDE (Development Tool)*\n"
                                      "‚úÖ [IntelliJ IDEA Community (Recommended)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Extension](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Step 4: Write Your First Java Code!*\n"
                                      "Create a file named `Main.java` and enter:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Then run it in your terminal:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ Expected output: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *You‚Äôre ready to start learning Java!*\n"
                                      "Next up: variables, conditionals, loops, functions, and object-oriented programming!\n\n"
                                      "üëá Click the button below to start the next lesson!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "siren":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="style")],
                    [InlineKeyboardButton("last chapter", callback_data="prptprppeprepeppafroiguhtgksahs")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Variables and Data Types*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî A variable is a name used to store data.\n"
                                      "‚Äî Each variable must be defined with a specific data type.\n\n"
                                      "üîπ *Basic data types:*\n"
                                      "- `int`: integers, e.g. `42`\n"
                                      "- `double`: decimals, e.g. `3.14`\n"
                                      "- `char`: single character, e.g. `'A'`\n"
                                      "- `boolean`: logic values, `true` or `false`\n"
                                      "- `String`: text, e.g. `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *Declaring and using variables:*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ Use `System.out.println()` to print variables:\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ Output:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Tips:*\n"
                                      "- Java is a statically typed language, so every variable needs a type.\n"
                                      "- Variable names are case-sensitive: `Name` ‚â† `name`\n"
                                      "- Use clear names: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° Try declaring your own variables and print them using `System.out.println()`!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "prptprppeprepeppafroiguhtgksahs":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="siren")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: Installation & First Project*\n\n"
                                      "üîπ *Step 1: Download and Install JDK*\n"
                                      "[üîó Official Download Page](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî Choose the Java SE Development Kit (JDK) for your operating system\n"
                                      "‚Äî During installation, check `Add JAVA to PATH` (if available)\n\n"
                                      "üîπ *Step 2: Verify Installation*\n"
                                      "Open your terminal or command prompt and type:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "If versions appear, installation was successful!\n\n"
                                      "üîπ *Step 3: Install an IDE (Development Tool)*\n"
                                      "‚úÖ [IntelliJ IDEA Community (Recommended)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Extension](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Step 4: Write Your First Java Code!*\n"
                                      "Create a file named `Main.java` and enter:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Then run it in your terminal:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ Expected output: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *You‚Äôre ready to start learning Java!*\n"
                                      "Next up: variables, conditionals, loops, functions, and object-oriented programming!\n\n"
                                      "üëá Click the button below to start the next lesson!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "style":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="for")],
                    [InlineKeyboardButton("last chapter", callback_data="ooptoripitprittoiprt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Conditional Statements (if, else, else if)*\n\n"
                                      "üîπ *What is a conditional statement?*\n"
                                      "‚Äî It lets the program run different code depending on a condition.\n\n"
                                      "============================\n"
                                      "üîπ *Example code:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"You are an adult\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"You are a teenager\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"You are a child\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Comparison operators:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *Logical operators:* `&&` (and), `||` (or), `!` (not)\n\n"
                                      "‚úÖ *Try this:*\n"
                                      "Write a program that prints a message based on a person‚Äôs age!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "ooptoripitprittoiprt":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="style")],
                    [InlineKeyboardButton("last chapter", callback_data="prptprppeprepeppafroiguhtgksahs")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Variables and Data Types*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî A variable is a name used to store data.\n"
                                      "‚Äî Each variable must be defined with a specific data type.\n\n"
                                      "üîπ *Basic data types:*\n"
                                      "- `int`: integers, e.g. `42`\n"
                                      "- `double`: decimals, e.g. `3.14`\n"
                                      "- `char`: single character, e.g. `'A'`\n"
                                      "- `boolean`: logic values, `true` or `false`\n"
                                      "- `String`: text, e.g. `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *Declaring and using variables:*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ Use `System.out.println()` to print variables:\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ Output:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Tips:*\n"
                                      "- Java is a statically typed language, so every variable needs a type.\n"
                                      "- Variable names are case-sensitive: `Name` ‚â† `name`\n"
                                      "- Use clear names: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° Try declaring your own variables and print them using `System.out.println()`!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "for":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="men")],
                    [InlineKeyboardButton("last chapter", callback_data="crchcscddddddddddsdlkjnfhkl")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî A loop lets you run a block of code multiple times.\n"
                                      "‚Äî Useful for repetition, automation, and working with data.\n\n"
                                      "============================\n"
                                      "üîπ *for loop example:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n\n"
                                      "============================\n"
                                      "üîπ *while loop example:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Repeats while the condition is true.\n\n"
                                      "============================\n"
                                      "üîπ *do...while loop example:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî Runs the block at least once, even if condition is false.\n\n"
                                      "============================\n"
                                      "‚úÖ *Good to know:*\n"
                                      "- Use `break` to exit a loop early\n"
                                      "- Use `continue` to skip to the next iteration\n"
                                      "- Avoid infinite loops by updating conditions\n\n"
                                      "üí° Try writing a loop that counts down from 10 to 1!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "crchcscddddddddddsdlkjnfhkl":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="for")],
                    [InlineKeyboardButton("last chapter", callback_data="ooptoripitprittoiprt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Conditional Statements (if, else, else if)*\n\n"
                                      "üîπ *What is a conditional statement?*\n"
                                      "‚Äî It lets the program run different code depending on a condition.\n\n"
                                      "============================\n"
                                      "üîπ *Example code:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"You are an adult\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"You are a teenager\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"You are a child\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Comparison operators:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *Logical operators:* `&&` (and), `||` (or), `!` (not)\n\n"
                                      "‚úÖ *Try this:*\n"
                                      "Write a program that prints a message based on a person‚Äôs age!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "men":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="brands")],
                    [InlineKeyboardButton("last chapter", callback_data="potipotipoti")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Arrays*\n\n"
                                      "üîπ *What is an array?*\n"
                                      "‚Äî An array is a collection of elements of the same type, stored in sequence in memory.\n"
                                      "‚Äî Each element has an index (starting from 0).\n\n"
                                      "============================\n"
                                      "üîπ *Creating an integer array:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî This creates an array of 5 integers.\n\n"
                                      "üî∏ Accessing elements:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Print all elements using a for loop:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` gives the size of the array.\n\n"
                                      "============================\n"
                                      "üîπ *Get input from the user:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî This stores 3 numbers entered by the user.\n\n"
                                      "============================\n"
                                      "‚úÖ *Key Reminders:*\n"
                                      "- Indexes go from `0` to `n - 1`\n"
                                      "- Array size is fixed\n"
                                      "- Going out of bounds causes an error (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Arrays are the foundation of data structures, sorting, and algorithms!\n"
                                      "Try creating your own array and printing its elements!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "potipotipoti":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="men")],
                    [InlineKeyboardButton("last chapter", callback_data="crchcscddddddddddsdlkjnfhkl")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: Loops*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî A loop lets you run a block of code multiple times.\n"
                                      "‚Äî Useful for repetition, automation, and working with data.\n\n"
                                      "============================\n"
                                      "üîπ *for loop example:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Prints numbers from 0 to 4.\n\n"
                                      "============================\n"
                                      "üîπ *while loop example:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Repeats while the condition is true.\n\n"
                                      "============================\n"
                                      "üîπ *do...while loop example:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî Runs the block at least once, even if condition is false.\n\n"
                                      "============================\n"
                                      "‚úÖ *Good to know:*\n"
                                      "- Use `break` to exit a loop early\n"
                                      "- Use `continue` to skip to the next iteration\n"
                                      "- Avoid infinite loops by updating conditions\n\n"
                                      "üí° Try writing a loop that counts down from 10 to 1!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "brands":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="its")],
                    [InlineKeyboardButton("last chapter", callback_data="kkhkhhkkjkjhkhkoji")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: Methods (Functions)*\n\n"
                                      "üîπ *What is a method?*\n"
                                      "‚Äî A method is a block of code that performs a specific task.\n"
                                      "‚Äî You can call it multiple times without rewriting the code.\n\n"
                                      "============================\n"
                                      "üîπ *Why use methods?*\n"
                                      "‚úîÔ∏è Avoid code repetition\n"
                                      "‚úîÔ∏è Makes the program clearer and easier to maintain\n"
                                      "‚úîÔ∏è Can accept parameters and return results\n\n"
                                      "============================\n"
                                      "üîπ *Simple example:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"Hello!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // Call the method\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî The `sayHello` method prints \"Hello!\".\n\n"
                                      "============================\n"
                                      "üîπ *Method with parameters:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"Hello, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Alice\");\n"
                                      "```\n"
                                      "‚Äî Parameters make methods more flexible.\n\n"
                                      "============================\n"
                                      "üîπ *Method with return value:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî Use `return` to send back the result.\n\n"
                                      "============================\n"
                                      "‚úÖ *Remember:*\n"
                                      "- All methods must be inside a class\n"
                                      "- `main()` is the program‚Äôs entry point\n"
                                      "- `void` means no value is returned\n\n"
                                      "üí° Try writing your own method to print your name or add two numbers! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "kkhkhhkkjkjhkhkoji":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="brands")],
                    [InlineKeyboardButton("last chapter", callback_data="potipotipoti")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Arrays*\n\n"
                                      "üîπ *What is an array?*\n"
                                      "‚Äî An array is a collection of elements of the same type, stored in sequence in memory.\n"
                                      "‚Äî Each element has an index (starting from 0).\n\n"
                                      "============================\n"
                                      "üîπ *Creating an integer array:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî This creates an array of 5 integers.\n\n"
                                      "üî∏ Accessing elements:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Print all elements using a for loop:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` gives the size of the array.\n\n"
                                      "============================\n"
                                      "üîπ *Get input from the user:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî This stores 3 numbers entered by the user.\n\n"
                                      "============================\n"
                                      "‚úÖ *Key Reminders:*\n"
                                      "- Indexes go from `0` to `n - 1`\n"
                                      "- Array size is fixed\n"
                                      "- Going out of bounds causes an error (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Arrays are the foundation of data structures, sorting, and algorithms!\n"
                                      "Try creating your own array and printing its elements!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "its":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="baybaybygridlskdfrgreoji")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üèóÔ∏è *Java: Classes & Objects*\n\n"
                                      "üîπ *What is a class?*\n"
                                      "‚Äî A class is a blueprint for creating objects.\n"
                                      "‚Äî It defines the properties (data) and behaviors (methods) of objects.\n\n"
                                      "üîπ *What is an object?*\n"
                                      "‚Äî An instance created based on a class; the actual member in the program.\n\n"
                                      "============================\n"
                                      "üîπ *Simple example:*\n"
                                      "```java\n"
                                      "public class Dog {\n"
                                      "    String name;\n"
                                      "    int age;\n\n"
                                      "    void bark() {\n"
                                      "        System.out.println(name + \": Woof!\" );\n"
                                      "    }\n"
                                      "}\n\n"
                                      "public class Main {\n"
                                      "    public static void main(String[] args) {\n"
                                      "        Dog myDog = new Dog();\n"
                                      "        myDog.name = \"Blackie\";\n"
                                      "        myDog.age = 3;\n"
                                      "        myDog.bark();\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî The class `Dog` has two properties and one method.\n"
                                      "‚Äî `myDog` is an object of class `Dog`, which can call methods and set properties.\n\n"
                                      "============================\n"
                                      "üîπ *Important concepts:*\n"
                                      "- Class names should start with uppercase letters: `Person`, `Car`, `Animal`, etc.\n"
                                      "- Use `new` to create objects\n"
                                      "- Methods can access the object‚Äôs properties\n\n"
                                      "‚úÖ *Classes and objects are the core of Java*\n"
                                      "‚Äî Almost all Java programs are designed around objects!\n\n"
                                      "üí° Next, we will dive into constructors, encapsulation, inheritance, and polymorphism! üöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "baybaybygridlskdfrgreoji":
        keyboard = [[InlineKeyboardButton("Next Chapter ‚û°", callback_data="its")],
                    [InlineKeyboardButton("last chapter", callback_data="kkhkhhkkjkjhkhkoji")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: Methods (Functions)*\n\n"
                                      "üîπ *What is a method?*\n"
                                      "‚Äî A method is a block of code that performs a specific task.\n"
                                      "‚Äî You can call it multiple times without rewriting the code.\n\n"
                                      "============================\n"
                                      "üîπ *Why use methods?*\n"
                                      "‚úîÔ∏è Avoid code repetition\n"
                                      "‚úîÔ∏è Makes the program clearer and easier to maintain\n"
                                      "‚úîÔ∏è Can accept parameters and return results\n\n"
                                      "============================\n"
                                      "üîπ *Simple example:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"Hello!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // Call the method\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî The `sayHello` method prints \"Hello!\".\n\n"
                                      "============================\n"
                                      "üîπ *Method with parameters:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"Hello, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Alice\");\n"
                                      "```\n"
                                      "‚Äî Parameters make methods more flexible.\n\n"
                                      "============================\n"
                                      "üîπ *Method with return value:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî Use `return` to send back the result.\n\n"
                                      "============================\n"
                                      "‚úÖ *Remember:*\n"
                                      "- All methods must be inside a class\n"
                                      "- `main()` is the program‚Äôs entry point\n"
                                      "- `void` means no value is returned\n\n"
                                      "üí° Try writing your own method to print your name or add two numbers! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "huggywugg":
        keyboard = [[InlineKeyboardButton("Let's begin!\n""*Chapter 1:*", callback_data="yveskarlina")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<<>>", reply_markup=reply_markup)
    elif query.data == "yveskarlina":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="legsaca")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *Installing C and Setting Up in CLion IDE*\n\n"
                                      "üîπ *Step 1: Download MinGW Compiler*\n"
                                      "[Download MinGW](https://sourceforge.net/projects/mingw/) ‚Äî install `gcc` and add the `bin` folder to your system PATH\n\n"
                                      "üîπ *Step 2: Download CLion IDE*\n"
                                      "[Download CLion](https://www.jetbrains.com/clion/download/) ‚Äî install the Community or Trial version\n\n"
                                      "üîπ *Step 3: Verify the Installation*\n"
                                      "Open terminal and run:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Step 4: Write a Simple C Program*\n"
                                      "Create a `main.c` file with the following code:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Step 5: Compile and Run the Program*\n"
                                      "In the terminal, run:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Then run the program:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *Check the Output:*\n"
                                      "You should see:\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "legsaca":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="armsakina")],
                    [InlineKeyboardButton("last chapter", callback_data="hastworexes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Variables and Data Types in C*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî A name used to store data in memory.\n"
                                      "‚Äî Each variable has a type that defines what kind of data it holds.\n\n"
                                      "üîπ *Common data types:*\n"
                                      "- `int` ‚Äî integers, e.g.: `42`\n"
                                      "- `float` ‚Äî floating-point numbers, e.g.: `3.14`\n"
                                      "- `char` ‚Äî a single character, e.g.: `'A'`\n"
                                      "- `double` ‚Äî more precise floating-point numbers\n\n"
                                      "============================\n"
                                      "üîπ *Declaring variables:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Printing to the screen:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Age: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* declare some variables and print their values!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "hastworexes":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="legsaca")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *Installing C and Setting Up in CLion IDE*\n\n"
                                      "üîπ *Step 1: Download MinGW Compiler*\n"
                                      "[Download MinGW](https://sourceforge.net/projects/mingw/) ‚Äî install `gcc` and add the `bin` folder to your system PATH\n\n"
                                      "üîπ *Step 2: Download CLion IDE*\n"
                                      "[Download CLion](https://www.jetbrains.com/clion/download/) ‚Äî install the Community or Trial version\n\n"
                                      "üîπ *Step 3: Verify the Installation*\n"
                                      "Open terminal and run:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Step 4: Write a Simple C Program*\n"
                                      "Create a `main.c` file with the following code:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Step 5: Compile and Run the Program*\n"
                                      "In the terminal, run:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Then run the program:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *Check the Output:*\n"
                                      "You should see:\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "armsakina":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="sirenseacreaturrank")],
                    [InlineKeyboardButton("last chapter", callback_data="uusuasdaudodsuodaioasdau")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *Operators and Expressions in C*\n\n"
                                      "üîπ *What is an operator?*\n"
                                      "‚Äî A symbol or combination of symbols that perform operations on data.\n\n"
                                      "üîπ *Types of operators:*\n"
                                      "- Arithmetic: `+`, `-`, `*`, `/`, `%`\n"
                                      "- Assignment: `=`, `+=`, `-=`, `*=`, etc.\n"
                                      "- Comparison: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- Logical: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *Example of arithmetic operations:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *Example of comparison and logic:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x is less than y and y is positive\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* write expressions using different operators and print the results!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "uusuasdaudodsuodaioasdau":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="armsakina")],
                    [InlineKeyboardButton("last chapter", callback_data="hastworexes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Variables and Data Types in C*\n\n"
                                      "üîπ *What is a variable?*\n"
                                      "‚Äî A name used to store data in memory.\n"
                                      "‚Äî Each variable has a type that defines what kind of data it holds.\n\n"
                                      "üîπ *Common data types:*\n"
                                      "- `int` ‚Äî integers, e.g.: `42`\n"
                                      "- `float` ‚Äî floating-point numbers, e.g.: `3.14`\n"
                                      "- `char` ‚Äî a single character, e.g.: `'A'`\n"
                                      "- `double` ‚Äî more precise floating-point numbers\n\n"
                                      "============================\n"
                                      "üîπ *Declaring variables:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Printing to the screen:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Age: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* declare some variables and print their values!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "sirenseacreaturrank":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="rankrankrank")],
                    [InlineKeyboardButton("last chapter", callback_data="goluboysahpmurnejdet")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Conditional Statements in C: if, else if, else*\n\n"
                                      "üîπ *What is a conditional statement?*\n"
                                      "‚Äî It allows you to execute different parts of code depending on conditions.\n\n"
                                      "üîπ *Syntax of if:*\n"
                                      "```c\n"
                                      "if (condition) {\n"
                                      "    // code if condition is true\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Using else if and else:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Positive number\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Zero\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Negative number\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Logical operators for conditions:*\n"
                                      "- `&&` ‚Äî AND\n"
                                      "- `||` ‚Äî OR\n"
                                      "- `!` ‚Äî NOT\n\n"
                                      "‚úÖ *Task:* Write a program that checks a number and prints whether it‚Äôs positive, negative, or zero!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "goluboysahpmurnejdet":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="sirenseacreaturrank")],
                    [InlineKeyboardButton("last chapter", callback_data="uusuasdaudodsuodaioasdau")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *Operators and Expressions in C*\n\n"
                                      "üîπ *What is an operator?*\n"
                                      "‚Äî A symbol or combination of symbols that perform operations on data.\n\n"
                                      "üîπ *Types of operators:*\n"
                                      "- Arithmetic: `+`, `-`, `*`, `/`, `%`\n"
                                      "- Assignment: `=`, `+=`, `-=`, `*=`, etc.\n"
                                      "- Comparison: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- Logical: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *Example of arithmetic operations:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *Example of comparison and logic:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x is less than y and y is positive\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* write expressions using different operators and print the results!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "rankrankrank":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="krisarank")],
                    [InlineKeyboardButton("last chapter", callback_data="etocecenskiyflot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Loops in C: for, while, do-while*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî Allows repeating a block of code multiple times.\n\n"
                                      "üîπ *for loop:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while loop:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while loop:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* write a loop that prints numbers from 1 to 10!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "etocecenskiyflot":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="rankrankrank")],
                    [InlineKeyboardButton("last chapter", callback_data="goluboysahpmurnejdet")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Conditional Statements in C: if, else if, else*\n\n"
                                      "üîπ *What is a conditional statement?*\n"
                                      "‚Äî It allows you to execute different parts of code depending on conditions.\n\n"
                                      "üîπ *Syntax of if:*\n"
                                      "```c\n"
                                      "if (condition) {\n"
                                      "    // code if condition is true\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Using else if and else:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Positive number\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Zero\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Negative number\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Logical operators for conditions:*\n"
                                      "- `&&` ‚Äî AND\n"
                                      "- `||` ‚Äî OR\n"
                                      "- `!` ‚Äî NOT\n\n"
                                      "‚úÖ *Task:* Write a program that checks a number and prints whether it‚Äôs positive, negative, or zero!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )


    elif query.data == "krisarank":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="tentiicsranking")],
                    [InlineKeyboardButton("last chapter", callback_data="eroutuwrfnmzxnj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *Functions in C*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî A block of code that performs a specific task.\n"
                                      "‚Äî Helps organize the program and reuse code.\n\n"
                                      "üîπ *Declaring and calling a function:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // function call\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"Hello, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Function with return value:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"The square of 5 is %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try writing a function that adds two numbers and returns the result!*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "eroutuwrfnmzxnj":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="krisarank")],
                    [InlineKeyboardButton("last chapter", callback_data="etocecenskiyflot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Loops in C: for, while, do-while*\n\n"
                                      "üîπ *What is a loop?*\n"
                                      "‚Äî Allows repeating a block of code multiple times.\n\n"
                                      "üîπ *for loop:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while loop:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while loop:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"Iteration %d\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Try it yourself:* write a loop that prints numbers from 1 to 10!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "tentiicsranking":
        keyboard = [[InlineKeyboardButton("last chapter", callback_data="nbxbhdbschdsivud")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìå *Pointers in C*\n\n"
                                      "üîπ *What is a pointer?*\n"
                                      "‚Äî A pointer is a variable that stores the memory address of another variable.\n"
                                      "‚Äî Used for efficient memory handling, arrays, and function manipulation.\n\n"
                                      "üîπ *Basic pointer example:*\n"
                                      "```c\n"
                                      "int x = 10;\n"
                                      "int* ptr = &x;\n"
                                      "printf(\"Value: %d\\n\", *ptr); // dereferencing\n"
                                      "```\n"
                                      "‚Äî `&x` gets the address of variable `x`\n"
                                      "‚Äî `*ptr` accesses the value at that address\n\n"
                                      "üîπ *Explanation:*\n"
                                      "- `int* ptr;` ‚Äî pointer to an integer\n"
                                      "- `*` ‚Äî dereferencing (get value at address)\n"
                                      "- `&` ‚Äî address-of operator\n\n"
                                      "============================\n"
                                      "üîπ *Modifying value through a pointer:*\n"
                                      "```c\n"
                                      "int a = 5;\n"
                                      "int* p = &a;\n"
                                      "*p = 100;\n"
                                      "printf(\"%d\\n\", a); // prints 100\n"
                                      "```\n"
                                      "‚úÖ The pointer modifies the original variable's value.\n\n"
                                      "============================\n"
                                      "üîπ *Printing addresses:*\n"
                                      "```c\n"
                                      "int val = 42;\n"
                                      "printf(\"Address of variable: %p\\n\", &val);\n"
                                      "```\n"
                                      "‚Äî `%p` is used to print memory addresses.\n\n"
                                      "============================\n"
                                      "üí° Pointers are a fundamental part of C.\n"
                                      "They are essential for working with arrays, strings, functions, and memory management.\n\n"
                                      "üìé In the next chapter, you'll learn about *arrays and pointers*!\n",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "nbxbhdbschdsivud":
        keyboard = [[InlineKeyboardButton("Next chapter ‚û°", callback_data="tentiicsranking")],
                    [InlineKeyboardButton("last chapter", callback_data="eroutuwrfnmzxnj")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *Functions in C*\n\n"
                                      "üîπ *What is a function?*\n"
                                      "‚Äî A block of code that performs a specific task.\n"
                                      "‚Äî Helps organize the program and reuse code.\n\n"
                                      "üîπ *Declaring and calling a function:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // function call\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Function with parameters:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"Hello, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Function with return value:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"The square of 5 is %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Try writing a function that adds two numbers and returns the result!*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)




    if query.data == "firstchinese":
        keyboard = [[InlineKeyboardButton("üî• ÈñãÂßãÂ≠∏Áøí", callback_data="zzz")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Âó®ÔºÅ‰Ω†Ê∫ñÂÇôÂ•ΩÂ≠∏ÁøíÁ®ãÂºèË®≠Ë®à‰∫ÜÂóéÔºü",
            reply_markup=reply_markup)
    elif query.data == "zzz":
        keyboard = [
            [InlineKeyboardButton("Á®ãÂºèË®≠Ë®àË™ûË®Ä", callback_data="cont")],
            [InlineKeyboardButton("Á∂≤Ë∑ØÂÆâÂÖ®", callback_data="cybers")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üöÄ Â§™Ê£í‰∫ÜÔºÅÁèæÂú®ÈÅ∏Êìá‰Ω†ÊÉ≥Â≠∏ÁøíÁöÑÂÖßÂÆπÔºö",
            reply_markup=reply_markup
        )
    elif query.data == "cont":
        keyboard = [
            [InlineKeyboardButton("üêç Python ", callback_data="pt")],
            [InlineKeyboardButton("‚öôÔ∏è C++ ", callback_data="qew")],
            [InlineKeyboardButton("üü® Javascript", callback_data="srip")],
            [InlineKeyboardButton("‚òï Java Ë™ûË®ÄË™≤Á®ã", callback_data="java_start")],
            [InlineKeyboardButton("üíª C", callback_data="huggywug")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Â•ΩÔºÅÁèæÂú®ÈÅ∏Êìá‰Ω†ÊÉ≥Â≠∏ÁøíÁöÑË™ûË®Ä",
            reply_markup=reply_markup
        )

    elif query.data == "cybers":
        keyboard = [
            [InlineKeyboardButton("üì°Á∂≤Áµ°", callback_data="cyberxx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "ÈñãÂßãÂêßÔºÅ \nÁ¨¨ 1 Á´†Ôºö",
            reply_markup=reply_markup
        )

    elif query.data == "cyberxx":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="nextxx")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Á∂≤Ë∑Ø (Networks)* ÊòØÁ∞°ÂñÆÁöÑÈÄ£Êé•Áâ©‰ª∂„ÄÇ\n"
                                      "‰æãÂ¶ÇÔºå‰Ω†ÁöÑÊúãÂèãÂúàÔºö‰Ω†ÂÄëÈÄèÈÅéÂÖ±ÂêåËààË∂£„ÄÅÊÑõÂ•Ω„ÄÅÊäÄËÉΩÁ≠âÂΩºÊ≠§ÈÄ£Áµê„ÄÇüß†ü§ù\n\n"
                                      "üì° *Á∂≤Ë∑ØÁÑ°Ëôï‰∏çÂú®Ôºö*\n"
                                      "„ÄÄ- üöá ÂüéÂ∏ÇÁöÑÂÖ¨ÂÖ±‰∫§ÈÄöÁ≥ªÁµ±\n"
                                      "„ÄÄ- ‚ö° ÂúãÂÆ∂ÁöÑÈõªÂäõÂü∫Á§éË®≠ÊñΩ\n"
                                      "„ÄÄ- üèòÔ∏è ÈÑ∞Â±Ö‰πãÈñìÁöÑ‰∫§ÊµÅ\n"
                                      "„ÄÄ- ‚úâÔ∏è ÈÉµÊîøÁ≥ªÁµ±ÂÇ≥ÈÅû‰ø°‰ª∂ÂíåÂåÖË£π\n\n"
                                      "üíª *Âú®ÁßëÊäÄÈ†òÂüüÔºåÊ¶ÇÂøµÁõ∏ÂêåÔºåÂè™ÊòØÊáâÁî®Âú®Ë®≠ÂÇô‰πãÈñì„ÄÇ*\n"
                                      "ÊÉ≥ÊÉ≥‰Ω†ÁöÑÊâãÊ©ü üì±Ôºö‰Ω†‰ΩøÁî®ÂÆÉÊòØÁÇ∫‰∫ÜÂèñÂæóË≥áË®ä„ÄÇ\n\n"
                                      "üì∂ *ÊàëÂÄëÂ∞á‰∏ÄËµ∑Â≠∏ÁøíË®≠ÂÇôÂ¶Ç‰Ωï‰∫§ÊèõË≥áÊñôÔºå‰ª•ÂèäÂÆÉÂÄëÈÅµÂæ™ÁöÑË¶èÂâá„ÄÇ*\n\n"
                                      "üñ•Ô∏è *Á∂≤Ë∑ØÂèØ‰ª•ÂåÖÂê´ 2 ÂÄãÂà∞Êï∏ÂçÅÂÑÑÂÄãË®≠ÂÇôÔºö*\n"
                                      "„ÄÄ- üíª Á≠ÜË®òÂûãÈõªËÖ¶\n"
                                      "„ÄÄ- üì± Êô∫ÊÖßÂûãÊâãÊ©ü\n"
                                      "„ÄÄ- üì∑ Áõ£ÊéßÊîùÂΩ±Ê©ü\n"
                                      "„ÄÄ- üö¶ Á¥ÖÁ∂†Ááà\n"
                                      "„ÄÄ- üåæ Ëæ≤Ê•≠Ë®≠ÂÇô\n\n"
                                      "üîå *Á∂≤Ë∑ØÂ∑≤Á∂ìÊ∑±ÂÖ•ÊàëÂÄëÁöÑÊó•Â∏∏ÁîüÊ¥ªÔºö*\n"
                                      "„ÄÄ- ‚õÖ Â§©Ê∞£Ë≥áÊñôÁöÑËíêÈõÜ\n"
                                      "„ÄÄ- ‚ö° ÈõªÂäõ‰æõÊáâÁµ¶ÂÆ∂Â∫≠\n"
                                      "„ÄÄ- üö¶ ÈÅìË∑Ø‰∫§ÈÄöÁÆ°ÁêÜ\n\n"
                                      "üõ°Ô∏è Âõ†ÁÇ∫Á∂≤Ë∑ØÊòØÁèæ‰ª£ÁîüÊ¥ª‰∏çÂèØÊàñÁº∫ÁöÑ‰∏ÄÈÉ®ÂàÜÔºå\n"
                                      "‰∫ÜËß£Á∂≤Ë∑ØÂü∫Êú¨ÂéüÁêÜÊòØÂ≠∏ÁøíË≥áÂÆâÁöÑÂü∫Á§é„ÄÇ\n\n"
                                      "üë• Ë´ãÁúã‰∏ãÂúñÔºöAlice„ÄÅBob Âíå Jim Âª∫Á´ã‰∫ÜËá™Â∑±ÁöÑÂ∞èÁ∂≤Ë∑ØÔºÅ\n"
                                      "ÊàëÂÄëÁ®çÂæåÊúÉÂõûÂà∞ÈÄôÂÄãË©±È°å‚Ä¶‚Ä¶\n\n"
                                      "*Á¨¨‰∏ÄÁ´†Â∞±Âú®ÈÄôË£°ÔºÅÔºÅ*\n"
                                      "*Á¨¨‰∏ÄÁ´†Â∑≤Á∂ìÈñãÂßãÔºÅÔºÅ*",
                                      parse_mode="Markdown"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "nextxx":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="twopp")],
            [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="imgladifdjvjfdvnifnvrecvbryyee")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *Á¨¨‰∫åÁ´†ÔºöÊ∑±ÂÖ•‰∫ÜËß£Á∂≤ÈöõÁ∂≤Ë∑ØÔºÅ*\n\n"
                                      "ÁèæÂú®‰Ω†Â∑≤Á∂ìÁü•ÈÅìÁ∂≤Ë∑ØÊòØ‰ªÄÈ∫º‚Äî‚ÄîÁ∞°ÂñÆ‰æÜË™™Â∞±ÊòØÈÄ£Êé•Âú®‰∏ÄËµ∑ÁöÑË®≠ÂÇô‚Äî‚ÄîÊé•‰∏ã‰æÜÊàëÂÄë‰æÜ‰∫ÜËß£Á∂≤ÈöõÁ∂≤Ë∑ØÊòØÂ¶Ç‰ΩïÈÅã‰ΩúÁöÑ„ÄÇ\n\n"
                                      "üì° Á∂≤ÈöõÁ∂≤Ë∑ØÂ∞±ÊòØÁî±Ë®±Â§öÂ∞èÂûãÁ∂≤Ë∑ØÁõ∏‰∫íÈÄ£Êé•ÁµÑÊàêÁöÑ‰∏ÄÂÄã*ÈæêÂ§ßÁ∂≤Ë∑Ø*„ÄÇ\n\n"
                                      "üë´ ÊÉ≥ÂÉè Alice Ë™çË≠ò‰∫ÜÊñ∞ÊúãÂèã Zayn Âíå TobyÔºåÂ•πÊÉ≥‰ªãÁ¥π‰ªñÂÄëÁµ¶ Bob Âíå Jim Ë™çË≠ò„ÄÇ‰ΩÜÊúâÂÄãÂïèÈ°åÔºöÂè™Êúâ Alice ËÉΩÁêÜËß£ÂÖ©ÁµÑ‰∫∫ÁöÑË™ûË®Ä„ÄÇÊñºÊòØÂ•πÊàêÁÇ∫‰∫Ü‰∏ÄÂ∫ß*Ê©ãÊ®ë*ÔºåÁèæÂú®Â§ßÂÆ∂ÈÉΩÂèØ‰ª•ÈÄèÈÅéÂ•πÊ∫ùÈÄö„ÄÇÈÄôÂ∞±ÊòØ‰∏ÄÂÄãÊñ∞ÁöÑÁ∂≤Ë∑Ø‰æãÂ≠ê„ÄÇ\n\n"
                                      "üìú Á∂≤ÈöõÁ∂≤Ë∑ØÁöÑÁ¨¨‰∏ÄÂÄãÁâàÊú¨Âá∫ÁèæÂú®1960Âπ¥‰ª£Êú´Ôºå‰ΩúÁÇ∫ÁæéÂúãËªçÊñπË≥áÂä©ÁöÑ*ARPANET*Â∞àÊ°àÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇ\n"
                                      "ÈÄôÊòØÁ¨¨‰∏ÄÂÄãÁúüÊ≠£ÈÅã‰ΩúÁöÑÈõªËÖ¶Á∂≤Ë∑Ø„ÄÇ\n\n"
                                      "üåç 1989Âπ¥ÔºåTim Berners-Lee ÊèêÂá∫‰∫Ü*ÂÖ®ÁêÉË≥áË®äÁ∂≤ (WWW)*ÁöÑÊ¶ÇÂøµÔºåËÆìÁ∂≤ÈöõÁ∂≤Ë∑ØÊàêÁÇ∫ÂàÜ‰∫´ËàáÂÑ≤Â≠òË≥áË®äÁöÑ‰æøÂà©Â∑•ÂÖ∑„ÄÇ\n\n"
                                      "üîå Â¶Ç‰ªäÔºåÁ∂≤ÈöõÁ∂≤Ë∑ØÂ∞±ÂÉè‰∏ÄÂÄãÁî±Êï∏ÂçÉÂÄãÂ∞èÂúòÈöäÁµÑÊàêÁöÑÂ∑®Â§ß‰ø±Ê®ÇÈÉ®„ÄÇÁ∂≤Ë∑ØÂàÜÁÇ∫ÂÖ©Á®ÆÈ°ûÂûãÔºö\n"
                                      "„ÄÄ- üîí ÁßÅ‰∫∫Á∂≤Ë∑Ø\n"
                                      "„ÄÄ- üåê ÂÖ¨ÂÖ±Á∂≤Ë∑ØÔºåÂÖ©ËÄÖÂêàËµ∑‰æÜÂ∞±ÊòØÊàëÂÄëÊâÄË™™ÁöÑÁ∂≤ÈöõÁ∂≤Ë∑Ø\n\n"
                                      "üí° Á∂≤Ë∑Ø‰∏äÁöÑË®≠ÂÇô‰ΩøÁî®ÁâπÊÆäÁöÑ*Ë≠òÂà•Á¢º*ÔºàÊàëÂÄëÁ®çÂæåÊúÉË¨õÂà∞Ôºâ‰æÜÂ∞ãÊâæÂΩºÊ≠§‰∏¶‰∫§ÊèõË≥áÊñô„ÄÇ",
                                      parse_mode="Markdown"

                                      ,
                                      reply_markup=reply_markup)
    elif query.data == "imgladifdjvjfdvnifnvrecvbryyee":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="nextxx")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Á∂≤Ë∑Ø (Networks)* ÊòØÁ∞°ÂñÆÁöÑÈÄ£Êé•Áâ©‰ª∂„ÄÇ\n"
                                      "‰æãÂ¶ÇÔºå‰Ω†ÁöÑÊúãÂèãÂúàÔºö‰Ω†ÂÄëÈÄèÈÅéÂÖ±ÂêåËààË∂£„ÄÅÊÑõÂ•Ω„ÄÅÊäÄËÉΩÁ≠âÂΩºÊ≠§ÈÄ£Áµê„ÄÇüß†ü§ù\n\n"
                                      "üì° *Á∂≤Ë∑ØÁÑ°Ëôï‰∏çÂú®Ôºö*\n"
                                      "„ÄÄ- üöá ÂüéÂ∏ÇÁöÑÂÖ¨ÂÖ±‰∫§ÈÄöÁ≥ªÁµ±\n"
                                      "„ÄÄ- ‚ö° ÂúãÂÆ∂ÁöÑÈõªÂäõÂü∫Á§éË®≠ÊñΩ\n"
                                      "„ÄÄ- üèòÔ∏è ÈÑ∞Â±Ö‰πãÈñìÁöÑ‰∫§ÊµÅ\n"
                                      "„ÄÄ- ‚úâÔ∏è ÈÉµÊîøÁ≥ªÁµ±ÂÇ≥ÈÅû‰ø°‰ª∂ÂíåÂåÖË£π\n\n"
                                      "üíª *Âú®ÁßëÊäÄÈ†òÂüüÔºåÊ¶ÇÂøµÁõ∏ÂêåÔºåÂè™ÊòØÊáâÁî®Âú®Ë®≠ÂÇô‰πãÈñì„ÄÇ*\n"
                                      "ÊÉ≥ÊÉ≥‰Ω†ÁöÑÊâãÊ©ü üì±Ôºö‰Ω†‰ΩøÁî®ÂÆÉÊòØÁÇ∫‰∫ÜÂèñÂæóË≥áË®ä„ÄÇ\n\n"
                                      "üì∂ *ÊàëÂÄëÂ∞á‰∏ÄËµ∑Â≠∏ÁøíË®≠ÂÇôÂ¶Ç‰Ωï‰∫§ÊèõË≥áÊñôÔºå‰ª•ÂèäÂÆÉÂÄëÈÅµÂæ™ÁöÑË¶èÂâá„ÄÇ*\n\n"
                                      "üñ•Ô∏è *Á∂≤Ë∑ØÂèØ‰ª•ÂåÖÂê´ 2 ÂÄãÂà∞Êï∏ÂçÅÂÑÑÂÄãË®≠ÂÇôÔºö*\n"
                                      "„ÄÄ- üíª Á≠ÜË®òÂûãÈõªËÖ¶\n"
                                      "„ÄÄ- üì± Êô∫ÊÖßÂûãÊâãÊ©ü\n"
                                      "„ÄÄ- üì∑ Áõ£ÊéßÊîùÂΩ±Ê©ü\n"
                                      "„ÄÄ- üö¶ Á¥ÖÁ∂†Ááà\n"
                                      "„ÄÄ- üåæ Ëæ≤Ê•≠Ë®≠ÂÇô\n\n"
                                      "üîå *Á∂≤Ë∑ØÂ∑≤Á∂ìÊ∑±ÂÖ•ÊàëÂÄëÁöÑÊó•Â∏∏ÁîüÊ¥ªÔºö*\n"
                                      "„ÄÄ- ‚õÖ Â§©Ê∞£Ë≥áÊñôÁöÑËíêÈõÜ\n"
                                      "„ÄÄ- ‚ö° ÈõªÂäõ‰æõÊáâÁµ¶ÂÆ∂Â∫≠\n"
                                      "„ÄÄ- üö¶ ÈÅìË∑Ø‰∫§ÈÄöÁÆ°ÁêÜ\n\n"
                                      "üõ°Ô∏è Âõ†ÁÇ∫Á∂≤Ë∑ØÊòØÁèæ‰ª£ÁîüÊ¥ª‰∏çÂèØÊàñÁº∫ÁöÑ‰∏ÄÈÉ®ÂàÜÔºå\n"
                                      "‰∫ÜËß£Á∂≤Ë∑ØÂü∫Êú¨ÂéüÁêÜÊòØÂ≠∏ÁøíË≥áÂÆâÁöÑÂü∫Á§é„ÄÇ\n\n"
                                      "üë• Ë´ãÁúã‰∏ãÂúñÔºöAlice„ÄÅBob Âíå Jim Âª∫Á´ã‰∫ÜËá™Â∑±ÁöÑÂ∞èÁ∂≤Ë∑ØÔºÅ\n"
                                      "ÊàëÂÄëÁ®çÂæåÊúÉÂõûÂà∞ÈÄôÂÄãË©±È°å‚Ä¶‚Ä¶\n\n"
                                      "*Á¨¨‰∏ÄÁ´†Â∞±Âú®ÈÄôË£°ÔºÅÔºÅ*\n"
                                      "*Á¨¨‰∏ÄÁ´†Â∑≤Á∂ìÈñãÂßãÔºÅÔºÅ*",
                                      parse_mode="Markdown"
                                      ,
                                      reply_markup=reply_markup)


    elif query.data == "twopp":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="threepp")],
            [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="yapyupizdatiyviskimolodoye")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì° ÁÇ∫‰∫ÜËÆìË®≠ÂÇôËÉΩÂú®Á∂≤Ë∑Ø‰∏≠ÈÄö‰ø°‰∏¶‰øùÊåÅÁß©Â∫èÔºåÂÆÉÂÄëÂøÖÈ†àÔºö\n"
                                      "‚Äî Ëæ®Ë™çËá™Â∑±\n"
                                      "‚Äî Ë¢´ÂÖ∂‰ªñË®≠ÂÇôËæ®Ë™ç\n\n"
                                      "üí° Ë®≠ÂÇôÂ∞±ÂÉè‰∫∫‰∏ÄÊ®£Ôºö\n"
                                      "‚Äî ÊàëÂÄëÊúâÂêçÂ≠óÔºàÂèØ‰ª•ÊîπËÆäÔºâ\n"
                                      "‚Äî ‰πüÊúâÊåáÁ¥ãÔºàÊ∞∏ÈÅ†ÂîØ‰∏ÄÔºâ\n\n"
                                      "üì± Ë®≠ÂÇô‰πüÊúâÂÖ©Á®Æ„ÄåË≠òÂà•„ÄçÊñπÂºèÔºö\n"
                                      "‚Äî IP ‰ΩçÂùÄÔºàüìç ÂèØËÆäÔºâ\n"
                                      "‚Äî MAC ‰ΩçÂùÄÔºàüîí Ê∞∏‰πÖÔºåÂÉèÊåáÁ¥ãÔºâ\n\n"
                                      "=====================\n"
                                      "üîπ IP ‰ΩçÂùÄ\n"
                                      "IP ‰ΩçÂùÄÂ∞±ÂÉèË®≠ÂÇôÂú®Á∂≤Ë∑Ø‰∏≠ÁöÑÊö´ÊôÇÂêçÂ≠ó„ÄÇ\n"
                                      "ÂÆÉÁî±4ÂÄãÊï∏Â≠óÔºàÂÖ´‰ΩçÂÖÉÁµÑÔºâÁµÑÊàêÔºå‰∏≠ÈñìÁî®ÈªûÂàÜÈöîÔºö\n"
                                      "ÁØÑ‰æãÔºö192.168.0.1\n\n"
                                      "üîÅ ‰∏ÄÂÄã IP ÂèØ‰ª•Ë¢´ÂàÜÈÖçÁµ¶Âè¶‰∏ÄÂÄãË®≠ÂÇôÔºå‰ΩÜÂêå‰∏ÄÁ∂≤Ë∑Ø‰∏≠‰∏çËÉΩÊúâÂÖ©Âè∞Ë®≠ÂÇôÂêåÊôÇ‰ΩøÁî®Áõ∏ÂêåÁöÑ IP„ÄÇ\n\n"
                                      "üåç IP ÊúâÂÖ©Á®ÆÈ°ûÂûãÔºö\n"
                                      "‚Äî ÁßÅ‰∫∫ IP ‚Äî Áî®ÊñºÂçÄÂüüÁ∂≤Ë∑ØÔºàÂÆ∂Ë£°„ÄÅËæ¶ÂÖ¨ÂÆ§Ôºâ\n"
                                      "‚Äî ÂÖ¨ÂÖ± IP ‚Äî Âú®Á∂≤ÈöõÁ∂≤Ë∑Ø‰∏äÂèØË¶ã\n\n"
                                      "üßæ ÁØÑ‰æãÔºö\n\n"
                                      "Ë®≠ÂÇô\tÁßÅ‰∫∫ IP\tÂÖ¨ÂÖ± IP\n"
                                      "ÊàëÁöÑÈõªËÖ¶\t192.168.1.77\t86.157.52.21\n"
                                      "Âè¶‰∏ÄÂè∞ÈõªËÖ¶\t192.168.1.74\t86.157.52.21\n\n"
                                      "üîç ÂÖ©Âè∞Ë®≠ÂÇôÊúâÁõ∏ÂêåÁöÑÂÖ¨ÂÖ± IPÔºàÂêå‰∏ÄÂÄãË™øË£ΩËß£Ë™øÂô®ÔºâÔºå‰ΩÜ‰∏çÂêåÁöÑÁßÅ‰∫∫ IPÔºåÈÄôÂ∞±ÊòØÂÆÉÂÄëÂ¶Ç‰ΩïÂú®Âêå‰∏ÄÁ∂≤Ë∑Ø‰∏≠ÈÄöË®ä„ÄÇ\n\n"
                                      "=====================\n"
                                      "üåê ÂïèÈ°åÔºöIP ‰ΩçÂùÄ‰∏çÂ§†Áî®ÔºÅ\n"
                                      "IPv4 ÊúâÁ¥Ñ42.9ÂÑÑÂÄã‰ΩçÂùÄÔºà2^32ÔºâÔºå‰ΩÜÂÖ®ÁêÉË®≠ÂÇôÊï∏ÈáèÈÅîÊï∏ÁôæÂÑÑ„ÄÇ\n\n"
                                      "üí° Ëß£Ê±∫ÊñπÊ°àÔºö\n"
                                      "‚Äî IPv6 ÊúâË∂ÖÈÅé340ÂÖÜÂÄã‰ΩçÂùÄÔºà2^128Ôºâ\n"
                                      "‚Äî Êõ¥ÊúâÊïàÁéá\n"
                                      "‚Äî ‰ΩçÂùÄÊï∏ÈáèÂ§öÂæóÂ§ö\n\n"
                                      "ÁØÑ‰æãÔºö\n"
                                      "‚Äî IPv4: 192.168.1.1\n"
                                      "‚Äî IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\n"
                                      "=====================\n"
                                      "üîπ MAC ‰ΩçÂùÄ\n"
                                      "ÊØèÂÄãË®≠ÂÇôÊúâ‰∏ÄÂÄãÁ∂≤Ë∑Ø‰ªãÈù¢Âç°ÔºåÂ∏∂ÊúâÂîØ‰∏ÄÁöÑ MAC ‰ΩçÂùÄ„ÄÇ\n"
                                      "Ê†ºÂºèÔºöa4:c3:f0:85:ac:2dÔºà6ÂÄã‰ΩçÂÖÉÁµÑÁöÑÂçÅÂÖ≠ÈÄ≤Âà∂Ôºâ\n\n"
                                      "üõ† Ââç6ÂÄãÂ≠óÂÖÉÊòØË£ΩÈÄ†ÂïÜÁ∑®Á¢º„ÄÇ\n"
                                      "üìå Âæå6ÂÄãÂ≠óÂÖÉÊòØË®≠ÂÇôÂîØ‰∏ÄÁ∑®Ëôü„ÄÇ\n\n"
                                      "üí• ‰ΩÜ MAC ‰ΩçÂùÄÂèØ‰ª•Ë¢´ÂÅΩÈÄ†ÔºåÁ®±ÁÇ∫ÂÅΩË£ùÔºàspoofingÔºâÔºö\n"
                                      "‚Äî ÊîªÊìäËÄÖÂèØÂÅáË£ùÊàêÂè¶‰∏ÄË®≠ÂÇô„ÄÇ\n"
                                      "‚Äî ‰æãÂ¶ÇÔºåËã•Èò≤ÁÅ´ÁâÜÂè™ÂÖÅË®±ÁÆ°ÁêÜÂì°ÁöÑ MACÔºåÊîªÊìäËÄÖÂ∞±ËÉΩÊ¨∫È®ôÁ≥ªÁµ±ÔºÅ\n\n"
                                      "=====================\n"
                                      "üìå Á∏ΩÁµêÔºö\n"
                                      "üîπ IP ‚Äî ÊúÉÈö®Á∂≤Ë∑ØÊîπËÆä„ÄÇ\n"
                                      "üîπ MAC ‚Äî Ê∞∏‰πÖ‰∏îÂîØ‰∏Ä„ÄÇ\n"
                                      "üîπ ÂÆâÂÖ®ËÄÉÈáèÔºöIP Âíå MAC ÈÉΩ‰∏ç‰øùË≠âÁúüÂØ¶Ë∫´‰ªΩ„ÄÇ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "yapyupizdatiyviskimolodoye":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="twopp")],
            [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="imgladifdjvjfdvnifnvrecvbryyee")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *Á¨¨‰∫åÁ´†ÔºöÊ∑±ÂÖ•‰∫ÜËß£Á∂≤ÈöõÁ∂≤Ë∑ØÔºÅ*\n\n"
                                      "ÁèæÂú®‰Ω†Â∑≤Á∂ìÁü•ÈÅìÁ∂≤Ë∑ØÊòØ‰ªÄÈ∫º‚Äî‚ÄîÁ∞°ÂñÆ‰æÜË™™Â∞±ÊòØÈÄ£Êé•Âú®‰∏ÄËµ∑ÁöÑË®≠ÂÇô‚Äî‚ÄîÊé•‰∏ã‰æÜÊàëÂÄë‰æÜ‰∫ÜËß£Á∂≤ÈöõÁ∂≤Ë∑ØÊòØÂ¶Ç‰ΩïÈÅã‰ΩúÁöÑ„ÄÇ\n\n"
                                      "üì° Á∂≤ÈöõÁ∂≤Ë∑ØÂ∞±ÊòØÁî±Ë®±Â§öÂ∞èÂûãÁ∂≤Ë∑ØÁõ∏‰∫íÈÄ£Êé•ÁµÑÊàêÁöÑ‰∏ÄÂÄã*ÈæêÂ§ßÁ∂≤Ë∑Ø*„ÄÇ\n\n"
                                      "üë´ ÊÉ≥ÂÉè Alice Ë™çË≠ò‰∫ÜÊñ∞ÊúãÂèã Zayn Âíå TobyÔºåÂ•πÊÉ≥‰ªãÁ¥π‰ªñÂÄëÁµ¶ Bob Âíå Jim Ë™çË≠ò„ÄÇ‰ΩÜÊúâÂÄãÂïèÈ°åÔºöÂè™Êúâ Alice ËÉΩÁêÜËß£ÂÖ©ÁµÑ‰∫∫ÁöÑË™ûË®Ä„ÄÇÊñºÊòØÂ•πÊàêÁÇ∫‰∫Ü‰∏ÄÂ∫ß*Ê©ãÊ®ë*ÔºåÁèæÂú®Â§ßÂÆ∂ÈÉΩÂèØ‰ª•ÈÄèÈÅéÂ•πÊ∫ùÈÄö„ÄÇÈÄôÂ∞±ÊòØ‰∏ÄÂÄãÊñ∞ÁöÑÁ∂≤Ë∑Ø‰æãÂ≠ê„ÄÇ\n\n"
                                      "üìú Á∂≤ÈöõÁ∂≤Ë∑ØÁöÑÁ¨¨‰∏ÄÂÄãÁâàÊú¨Âá∫ÁèæÂú®1960Âπ¥‰ª£Êú´Ôºå‰ΩúÁÇ∫ÁæéÂúãËªçÊñπË≥áÂä©ÁöÑ*ARPANET*Â∞àÊ°àÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇ\n"
                                      "ÈÄôÊòØÁ¨¨‰∏ÄÂÄãÁúüÊ≠£ÈÅã‰ΩúÁöÑÈõªËÖ¶Á∂≤Ë∑Ø„ÄÇ\n\n"
                                      "üåç 1989Âπ¥ÔºåTim Berners-Lee ÊèêÂá∫‰∫Ü*ÂÖ®ÁêÉË≥áË®äÁ∂≤ (WWW)*ÁöÑÊ¶ÇÂøµÔºåËÆìÁ∂≤ÈöõÁ∂≤Ë∑ØÊàêÁÇ∫ÂàÜ‰∫´ËàáÂÑ≤Â≠òË≥áË®äÁöÑ‰æøÂà©Â∑•ÂÖ∑„ÄÇ\n\n"
                                      "üîå Â¶Ç‰ªäÔºåÁ∂≤ÈöõÁ∂≤Ë∑ØÂ∞±ÂÉè‰∏ÄÂÄãÁî±Êï∏ÂçÉÂÄãÂ∞èÂúòÈöäÁµÑÊàêÁöÑÂ∑®Â§ß‰ø±Ê®ÇÈÉ®„ÄÇÁ∂≤Ë∑ØÂàÜÁÇ∫ÂÖ©Á®ÆÈ°ûÂûãÔºö\n"
                                      "„ÄÄ- üîí ÁßÅ‰∫∫Á∂≤Ë∑Ø\n"
                                      "„ÄÄ- üåê ÂÖ¨ÂÖ±Á∂≤Ë∑ØÔºåÂÖ©ËÄÖÂêàËµ∑‰æÜÂ∞±ÊòØÊàëÂÄëÊâÄË™™ÁöÑÁ∂≤ÈöõÁ∂≤Ë∑Ø\n\n"
                                      "üí° Á∂≤Ë∑Ø‰∏äÁöÑË®≠ÂÇô‰ΩøÁî®ÁâπÊÆäÁöÑ*Ë≠òÂà•Á¢º*ÔºàÊàëÂÄëÁ®çÂæåÊúÉË¨õÂà∞Ôºâ‰æÜÂ∞ãÊâæÂΩºÊ≠§‰∏¶‰∫§ÊèõË≥áÊñô„ÄÇ",
                                      parse_mode="Markdown"

                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "threepp":
        keyboard = [[InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="doctorhannibalpsycho")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì° Ping ÊòØ‰∏ÄÁ®ÆÂü∫Êú¨ÁöÑÁ∂≤Ë∑ØÂ∑•ÂÖ∑ÔºåÁî®‰æÜÊ™¢Êü•ÂÖ©ÂÄãË®≠ÂÇô‰πãÈñìÁöÑÈÄ£Êé•ÁãÄÊÖã„ÄÇ\n"
            "ÂÆÉ‰ΩøÁî® ICMP ÂçîË≠∞ÔºàÁ∂≤ÈöõÁ∂≤Ë∑ØÊéßÂà∂Ë®äÊÅØÂçîË≠∞ÔºâÔºå\n"
            "ÂÇ≥ÈÄÅÁâπÊÆäÁöÑÂõûËÅ≤Ë´ãÊ±ÇÔºå‰∏¶Á≠âÂæÖÁõÆÊ®ôÁØÄÈªûÁöÑÂõûËÅ≤ÂõûË¶Ü„ÄÇ\n\n"
            "ÈÄèÈÅé PingÔºå‰Ω†ÂèØ‰ª•Âà§Êñ∑ÈÄ£Á∑öÊòØÂê¶Ê≠£Â∏∏‰ª•ÂèäÁ©©ÂÆöÂ∫¶„ÄÇ\n"
            "‰πüËÉΩÊ∏¨ÈáèÂ∞ÅÂåÖÂæû‰∏ÄÂè∞Ë®≠ÂÇôÂÇ≥ÈÄÅÂà∞Âè¶‰∏ÄÂè∞Ë®≠ÂÇôÊâÄÈúÄÁöÑÊØ´ÁßíÊï∏„ÄÇ\n\n"
            "ÈÄôÂÄãÂ∑•ÂÖ∑ÂÖßÂª∫ÊñºÂ§ßÂ§öÊï∏‰ΩúÊ•≠Á≥ªÁµ±‰∏≠ÔºåÂåÖÊã¨ Linux Âíå Windows„ÄÇ\n"
            "Âü∑Ë°å Ping Êåá‰ª§ÔºåÂè™ÈúÄÂú®ÁµÇÁ´ØÊ©üÊàñÂëΩ‰ª§ÊèêÁ§∫Â≠óÂÖÉËº∏ÂÖ•Ôºö\n"
            "`ping IP‰ΩçÂùÄ` Êàñ `ping Á∂≤Á´ôÂêçÁ®±`„ÄÇ\n\n"
            "‰æãÂ¶ÇÔºåÂü∑Ë°åÊåá‰ª§ `ping 192.168.1.254`Ôºå\n"
            "‰Ω†ÊúÉÁúãÂà∞ÈÄÅÂá∫ÂíåÊé•Êî∂ÁöÑÂ∞ÅÂåÖÊï∏ÈáèÔºå\n"
            "‰ª•ÂèäÂπ≥ÂùáÂõûÊáâÊôÇÈñìÔºà‰æãÂ¶ÇÔºö4.16 ÊØ´ÁßíÔºâ„ÄÇ",
            parse_mode="Markdown",
            reply_markup = reply_markup
        )
    elif query.data == "doctorhannibalpsycho":
        keyboard = [
            [InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="threepp")],
            [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="yapyupizdatiyviskimolodoye")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì° ÁÇ∫‰∫ÜËÆìË®≠ÂÇôËÉΩÂú®Á∂≤Ë∑Ø‰∏≠ÈÄö‰ø°‰∏¶‰øùÊåÅÁß©Â∫èÔºåÂÆÉÂÄëÂøÖÈ†àÔºö\n"
                                      "‚Äî Ëæ®Ë™çËá™Â∑±\n"
                                      "‚Äî Ë¢´ÂÖ∂‰ªñË®≠ÂÇôËæ®Ë™ç\n\n"
                                      "üí° Ë®≠ÂÇôÂ∞±ÂÉè‰∫∫‰∏ÄÊ®£Ôºö\n"
                                      "‚Äî ÊàëÂÄëÊúâÂêçÂ≠óÔºàÂèØ‰ª•ÊîπËÆäÔºâ\n"
                                      "‚Äî ‰πüÊúâÊåáÁ¥ãÔºàÊ∞∏ÈÅ†ÂîØ‰∏ÄÔºâ\n\n"
                                      "üì± Ë®≠ÂÇô‰πüÊúâÂÖ©Á®Æ„ÄåË≠òÂà•„ÄçÊñπÂºèÔºö\n"
                                      "‚Äî IP ‰ΩçÂùÄÔºàüìç ÂèØËÆäÔºâ\n"
                                      "‚Äî MAC ‰ΩçÂùÄÔºàüîí Ê∞∏‰πÖÔºåÂÉèÊåáÁ¥ãÔºâ\n\n"
                                      "=====================\n"
                                      "üîπ IP ‰ΩçÂùÄ\n"
                                      "IP ‰ΩçÂùÄÂ∞±ÂÉèË®≠ÂÇôÂú®Á∂≤Ë∑Ø‰∏≠ÁöÑÊö´ÊôÇÂêçÂ≠ó„ÄÇ\n"
                                      "ÂÆÉÁî±4ÂÄãÊï∏Â≠óÔºàÂÖ´‰ΩçÂÖÉÁµÑÔºâÁµÑÊàêÔºå‰∏≠ÈñìÁî®ÈªûÂàÜÈöîÔºö\n"
                                      "ÁØÑ‰æãÔºö192.168.0.1\n\n"
                                      "üîÅ ‰∏ÄÂÄã IP ÂèØ‰ª•Ë¢´ÂàÜÈÖçÁµ¶Âè¶‰∏ÄÂÄãË®≠ÂÇôÔºå‰ΩÜÂêå‰∏ÄÁ∂≤Ë∑Ø‰∏≠‰∏çËÉΩÊúâÂÖ©Âè∞Ë®≠ÂÇôÂêåÊôÇ‰ΩøÁî®Áõ∏ÂêåÁöÑ IP„ÄÇ\n\n"
                                      "üåç IP ÊúâÂÖ©Á®ÆÈ°ûÂûãÔºö\n"
                                      "‚Äî ÁßÅ‰∫∫ IP ‚Äî Áî®ÊñºÂçÄÂüüÁ∂≤Ë∑ØÔºàÂÆ∂Ë£°„ÄÅËæ¶ÂÖ¨ÂÆ§Ôºâ\n"
                                      "‚Äî ÂÖ¨ÂÖ± IP ‚Äî Âú®Á∂≤ÈöõÁ∂≤Ë∑Ø‰∏äÂèØË¶ã\n\n"
                                      "üßæ ÁØÑ‰æãÔºö\n\n"
                                      "Ë®≠ÂÇô\tÁßÅ‰∫∫ IP\tÂÖ¨ÂÖ± IP\n"
                                      "ÊàëÁöÑÈõªËÖ¶\t192.168.1.77\t86.157.52.21\n"
                                      "Âè¶‰∏ÄÂè∞ÈõªËÖ¶\t192.168.1.74\t86.157.52.21\n\n"
                                      "üîç ÂÖ©Âè∞Ë®≠ÂÇôÊúâÁõ∏ÂêåÁöÑÂÖ¨ÂÖ± IPÔºàÂêå‰∏ÄÂÄãË™øË£ΩËß£Ë™øÂô®ÔºâÔºå‰ΩÜ‰∏çÂêåÁöÑÁßÅ‰∫∫ IPÔºåÈÄôÂ∞±ÊòØÂÆÉÂÄëÂ¶Ç‰ΩïÂú®Âêå‰∏ÄÁ∂≤Ë∑Ø‰∏≠ÈÄöË®ä„ÄÇ\n\n"
                                      "=====================\n"
                                      "üåê ÂïèÈ°åÔºöIP ‰ΩçÂùÄ‰∏çÂ§†Áî®ÔºÅ\n"
                                      "IPv4 ÊúâÁ¥Ñ42.9ÂÑÑÂÄã‰ΩçÂùÄÔºà2^32ÔºâÔºå‰ΩÜÂÖ®ÁêÉË®≠ÂÇôÊï∏ÈáèÈÅîÊï∏ÁôæÂÑÑ„ÄÇ\n\n"
                                      "üí° Ëß£Ê±∫ÊñπÊ°àÔºö\n"
                                      "‚Äî IPv6 ÊúâË∂ÖÈÅé340ÂÖÜÂÄã‰ΩçÂùÄÔºà2^128Ôºâ\n"
                                      "‚Äî Êõ¥ÊúâÊïàÁéá\n"
                                      "‚Äî ‰ΩçÂùÄÊï∏ÈáèÂ§öÂæóÂ§ö\n\n"
                                      "ÁØÑ‰æãÔºö\n"
                                      "‚Äî IPv4: 192.168.1.1\n"
                                      "‚Äî IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334\n\n"
                                      "=====================\n"
                                      "üîπ MAC ‰ΩçÂùÄ\n"
                                      "ÊØèÂÄãË®≠ÂÇôÊúâ‰∏ÄÂÄãÁ∂≤Ë∑Ø‰ªãÈù¢Âç°ÔºåÂ∏∂ÊúâÂîØ‰∏ÄÁöÑ MAC ‰ΩçÂùÄ„ÄÇ\n"
                                      "Ê†ºÂºèÔºöa4:c3:f0:85:ac:2dÔºà6ÂÄã‰ΩçÂÖÉÁµÑÁöÑÂçÅÂÖ≠ÈÄ≤Âà∂Ôºâ\n\n"
                                      "üõ† Ââç6ÂÄãÂ≠óÂÖÉÊòØË£ΩÈÄ†ÂïÜÁ∑®Á¢º„ÄÇ\n"
                                      "üìå Âæå6ÂÄãÂ≠óÂÖÉÊòØË®≠ÂÇôÂîØ‰∏ÄÁ∑®Ëôü„ÄÇ\n\n"
                                      "üí• ‰ΩÜ MAC ‰ΩçÂùÄÂèØ‰ª•Ë¢´ÂÅΩÈÄ†ÔºåÁ®±ÁÇ∫ÂÅΩË£ùÔºàspoofingÔºâÔºö\n"
                                      "‚Äî ÊîªÊìäËÄÖÂèØÂÅáË£ùÊàêÂè¶‰∏ÄË®≠ÂÇô„ÄÇ\n"
                                      "‚Äî ‰æãÂ¶ÇÔºåËã•Èò≤ÁÅ´ÁâÜÂè™ÂÖÅË®±ÁÆ°ÁêÜÂì°ÁöÑ MACÔºåÊîªÊìäËÄÖÂ∞±ËÉΩÊ¨∫È®ôÁ≥ªÁµ±ÔºÅ\n\n"
                                      "=====================\n"
                                      "üìå Á∏ΩÁµêÔºö\n"
                                      "üîπ IP ‚Äî ÊúÉÈö®Á∂≤Ë∑ØÊîπËÆä„ÄÇ\n"
                                      "üîπ MAC ‚Äî Ê∞∏‰πÖ‰∏îÂîØ‰∏Ä„ÄÇ\n"
                                      "üîπ ÂÆâÂÖ®ËÄÉÈáèÔºöIP Âíå MAC ÈÉΩ‰∏ç‰øùË≠âÁúüÂØ¶Ë∫´‰ªΩ„ÄÇ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)


    elif query.data == "pt":
        keyboard = [[
            InlineKeyboardButton("Âéª", callback_data="numberoness")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Â•ΩÂï¶ÔºÅ ÔºÅÈñãÂßãÊàëÂÄëÁöÑ Python ‰πãÊóÖÂêßüêç¬ª",
            reply_markup=reply_markup)
    elif query.data == "qew":
        keyboard = [[
            InlineKeyboardButton("*Á¨¨‰∏ÄÁ´†*", callback_data="cponess")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Â•ΩÂï¶ÔºÅ ÔºÅÈñãÂßãÊàëÂÄëÁöÑ C++ ‰πãÊóÖ‚öôÔ∏è",
            reply_markup=reply_markup)
    elif query.data == "srip":
        keyboard = [[
            InlineKeyboardButton("Á¨¨1Á´†", callback_data="jvonesss")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Â•ΩÂï¶ÔºÅ ÔºÅÈñãÂïüÊàëÂÄëÁöÑüü® JavaScript ‰πãÊóÖÂêßÔºÅ",
            reply_markup=reply_markup)
    elif query.data == "numberoness":
        keyboard = [[InlineKeyboardButton("üêçÈñãÂßã", callback_data="mcqueenss")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ËÆìÊàëÂÄëÈñãÂßãÂêßÔºÅ\n"
                                      "*Á¨¨‰∏ÄÁ´†Ôºö*", reply_markup=reply_markup)
    elif query.data == "mcqueenss":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="fsociety")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *ÂÆâË£Ö Python 64 ‰ΩçÂèäËøûÊé• PyCharm Community*\n\n"
            "üîπ *Ê≠•È™§ 1Ôºö‰∏ãËΩΩ Python*\n"
            "[‰∏ãËΩΩ Python](https://www.python.org/downloads/) ‚Äî ÈÄâÊã© Windows x86-64 ÂèØÊâßË°åÂÆâË£ÖÁ®ãÂ∫è\n\n"
            "üîπ *Ê≠•È™§ 2ÔºöÂÆâË£Ö*\n"
            "‚Äî ÂãæÈÄâ ‚ÄúAdd Python to PATH‚Äù\n"
            "‚Äî ÈÄâÊã©Ëá™ÂÆö‰πâÂÆâË£Ö ‚Üí ‰∏ã‰∏ÄÊ≠• ‚Üí ‰∏∫ÊâÄÊúâÁî®Êà∑ÂÆâË£Ö ‚Üí ÂÆâË£Ö\n\n"
            "üîπ *Ê≠•È™§ 3ÔºöÈ™åËØÅÂÆâË£Ö*\n"
            "Âú®ÁªàÁ´ØËæìÂÖ• `python --version` ‚Äî Â∫îÊòæÁ§∫ Python 3.X.X\n\n"
            "üîπ *Ê≠•È™§ 4Ôºö‰∏ãËΩΩ PyCharm*\n"
            "[‰∏ãËΩΩ PyCharm](https://www.jetbrains.com/pycharm/download) ‚Äî ÂÆâË£Ö Community ÁâàÊú¨\n\n"
            "üîπ *Ê≠•È™§ 5ÔºöËøûÊé• Python*\n"
            "Êñ∞Âª∫È°πÁõÆ ‚Üí ‚öôÔ∏è Ê∑ªÂä†Ëß£ÈáäÂô® ‚Üí Á≥ªÁªüËß£ÈáäÂô® ‚Üí Ë∑ØÂæÑÔºö\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Ê£ÄÊü•Ôºö*\n"
            "ÂàõÂª∫Êñá‰ª∂ÔºåËæìÂÖ•‰ª£Á†ÅÔºö\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "ÁÇπÂáª ‚ñ∂Ô∏è ËøêË°å\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "fsociety":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="if")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="vmineocenmnogoonblkjfnv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Python ÁöÑËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
            "‚Äî Áî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÁ®±ÔºåË≥áÊñôÂûãÊÖãÊúÉËá™ÂãïÂà§Êñ∑„ÄÇ\n\n"
            "üîπ *ËÆäÊï∏ÁØÑ‰æãÔºö*\n"
            "`x = 10` ‚Äî Êï¥Êï∏ (int)\n"
            "`name = \"Tom\"` ‚Äî Â≠ó‰∏≤ (str)\n"
            "`pi = 3.14` ‚Äî ÊµÆÈªûÊï∏ (float)\n\n"
            "üîπ *‰∏ªË¶ÅË≥áÊñôÂûãÊÖãÔºö*\n"
            "- `int` ‚Äî Êï¥Êï∏\n"
            "- `float` ‚Äî Â∞èÊï∏\n"
            "- `str` ‚Äî ÊñáÂ≠óÂ≠ó‰∏≤\n"
            "- `bool` ‚Äî Â∏ÉÊûóÂÄºÔºö`True` Êàñ `False`\n\n"
            "üîπ *Â¶Ç‰ΩïËº∏Âá∫Ë≥áÊñôÔºü*\n"
            "`print(x)`\n"
            "`print(name)`\n"
            "`print(pi)`\n\n"
            "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö*\n"
            "```python\nage = 15\ncity = \"Ëé´ÊñØÁßë\"\nis_student = True\n\n"
            "print(\"Âπ¥ÈΩ°:\", age)\nprint(\"ÂüéÂ∏Ç:\", city)\nprint(\"Â≠∏Áîü:\", is_student)\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "vmineocenmnogoonblkjfnv":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="fsociety")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *ÂÆâË£Ö Python 64 ‰ΩçÂèäËøûÊé• PyCharm Community*\n\n"
            "üîπ *Ê≠•È™§ 1Ôºö‰∏ãËΩΩ Python*\n"
            "[‰∏ãËΩΩ Python](https://www.python.org/downloads/) ‚Äî ÈÄâÊã© Windows x86-64 ÂèØÊâßË°åÂÆâË£ÖÁ®ãÂ∫è\n\n"
            "üîπ *Ê≠•È™§ 2ÔºöÂÆâË£Ö*\n"
            "‚Äî ÂãæÈÄâ ‚ÄúAdd Python to PATH‚Äù\n"
            "‚Äî ÈÄâÊã©Ëá™ÂÆö‰πâÂÆâË£Ö ‚Üí ‰∏ã‰∏ÄÊ≠• ‚Üí ‰∏∫ÊâÄÊúâÁî®Êà∑ÂÆâË£Ö ‚Üí ÂÆâË£Ö\n\n"
            "üîπ *Ê≠•È™§ 3ÔºöÈ™åËØÅÂÆâË£Ö*\n"
            "Âú®ÁªàÁ´ØËæìÂÖ• `python --version` ‚Äî Â∫îÊòæÁ§∫ Python 3.X.X\n\n"
            "üîπ *Ê≠•È™§ 4Ôºö‰∏ãËΩΩ PyCharm*\n"
            "[‰∏ãËΩΩ PyCharm](https://www.jetbrains.com/pycharm/download) ‚Äî ÂÆâË£Ö Community ÁâàÊú¨\n\n"
            "üîπ *Ê≠•È™§ 5ÔºöËøûÊé• Python*\n"
            "Êñ∞Âª∫È°πÁõÆ ‚Üí ‚öôÔ∏è Ê∑ªÂä†Ëß£ÈáäÂô® ‚Üí Á≥ªÁªüËß£ÈáäÂô® ‚Üí Ë∑ØÂæÑÔºö\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Ê£ÄÊü•Ôºö*\n"
            "ÂàõÂª∫Êñá‰ª∂ÔºåËæìÂÖ•‰ª£Á†ÅÔºö\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "ÁÇπÂáª ‚ñ∂Ô∏è ËøêË°å\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "if":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="sezeresx")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="copagangsmysfhnur")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Python Ê¢ù‰ª∂Ë™ûÂè•Ôºöif„ÄÅelif„ÄÅelse*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ë™ûÂè•Ôºü*\n"
            "‚Äî ÂÉÖÁï∂ÁâπÂÆöÊ¢ù‰ª∂ÊàêÁ´ãÊôÇÊâçÂü∑Ë°åÁ®ãÂºèÁ¢º„ÄÇ\n"
            "‚Äî ‰ΩøÁî® if„ÄÅelif„ÄÅelse ÁµêÊßã„ÄÇ\n\n"
            "üîπ *Ë™ûÊ≥ïÁØÑ‰æãÔºö*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"‰Ω†ÊòØÊàêÂπ¥‰∫∫\")\nelif age >= 14:\n    print(\"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\")\nelse:\n    print(\"‰Ω†ÊòØÂ∞èÂ≠©\")\n```\n\n"
            "üîπ *ÊØîËºÉÈÅãÁÆóÂ≠êÔºö* `==`„ÄÅ`!=`„ÄÅ`>`„ÄÅ`<`„ÄÅ`>=`„ÄÅ`<=`\n"
            "üîπ *ÈÇèËºØÈÅãÁÆóÂ≠êÔºö* `and`„ÄÅ`or`„ÄÅ`not`\n\n"
            "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö*\n"
            "```python\nname = input(\"‰Ω†ÁöÑÂêçÂ≠óÔºö\")\nif name == \"Tom\":\n    print(\"ÂìàÂõâÔºåTomÔºÅ\")\nelse:\n    print(\"ÂìàÂõâÔºåË®™ÂÆ¢ÔºÅ\")\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "copagangsmysfhnur":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="if")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="vmineocenmnogoonblkjfnv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Python ÁöÑËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
            "‚Äî Áî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÁ®±ÔºåË≥áÊñôÂûãÊÖãÊúÉËá™ÂãïÂà§Êñ∑„ÄÇ\n\n"
            "üîπ *ËÆäÊï∏ÁØÑ‰æãÔºö*\n"
            "`x = 10` ‚Äî Êï¥Êï∏ (int)\n"
            "`name = \"Tom\"` ‚Äî Â≠ó‰∏≤ (str)\n"
            "`pi = 3.14` ‚Äî ÊµÆÈªûÊï∏ (float)\n\n"
            "üîπ *‰∏ªË¶ÅË≥áÊñôÂûãÊÖãÔºö*\n"
            "- `int` ‚Äî Êï¥Êï∏\n"
            "- `float` ‚Äî Â∞èÊï∏\n"
            "- `str` ‚Äî ÊñáÂ≠óÂ≠ó‰∏≤\n"
            "- `bool` ‚Äî Â∏ÉÊûóÂÄºÔºö`True` Êàñ `False`\n\n"
            "üîπ *Â¶Ç‰ΩïËº∏Âá∫Ë≥áÊñôÔºü*\n"
            "`print(x)`\n"
            "`print(name)`\n"
            "`print(pi)`\n\n"
            "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö*\n"
            "```python\nage = 15\ncity = \"Ëé´ÊñØÁßë\"\nis_student = True\n\n"
            "print(\"Âπ¥ÈΩ°:\", age)\nprint(\"ÂüéÂ∏Ç:\", city)\nprint(\"Â≠∏Áîü:\", is_student)\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "sezeresx":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="tut")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="yobraputatiriajd")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *PythonÔºöfor Ëàá while Ëø¥Âúà*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî Ëø¥ÂúàÁî®‰æÜÈáçË§áÂü∑Ë°å‰∏ÄÊÆµÁ®ãÂºèÁ¢º„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®‰æÜÈÅçÊ≠∑ÂàóË°®„ÄÅÊï∏Â≠óÂ∫èÂàóÊàñÂÖ∂‰ªñÈõÜÂêà„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥ÂúàÁØÑ‰æãÔºö*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî Ëº∏Âá∫Êï∏Â≠ó 0 Âà∞ 4„ÄÇ\n\n"
                                      "üî∏ `range(5)` ÊúÉÁî¢ÁîüÂ∫èÂàóÔºö0„ÄÅ1„ÄÅ2„ÄÅ3„ÄÅ4\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥ÂúàÁØÑ‰æãÔºö*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî Áï∂Ê¢ù‰ª∂ÁÇ∫ÁúüÔºåÁ®ãÂºèÁ¢ºÂçÄÂ°äÊúÉÈáçË§áÂü∑Ë°å„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Áî® for ÈÅçÊ≠∑ÂàóË°®Ôºö*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- `for` ÈÅ©ÂêàÈÄêÂÄãËôïÁêÜÈõÜÂêàÂÖÉÁ¥†\n"
                                      "- `while` ‰æùÊ¢ù‰ª∂ÈáçË§áÂü∑Ë°å\n"
                                      "- Ëã•Ë¶ÅÊèêÂâçÁµêÊùüËø¥ÂúàÔºå‰ΩøÁî® `break`\n\n"
                                      "üí° Ëø¥ÂúàÊòØËá™ÂãïÂåñËàáË≥áÊñôËôïÁêÜÁöÑÂü∫Á§éÔºÅ\n"
                                      "Ë©¶ËëóÂØ´‰∏ÄÂÄãÁ∞°ÂñÆÁöÑËø¥Âúà‰æÜËº∏Âá∫Êï∏Â≠óÊàñÂñÆË©ûÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "yobraputatiriajd":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="sezeresx")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="copagangsmysfhnur")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Python Ê¢ù‰ª∂Ë™ûÂè•Ôºöif„ÄÅelif„ÄÅelse*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ë™ûÂè•Ôºü*\n"
            "‚Äî ÂÉÖÁï∂ÁâπÂÆöÊ¢ù‰ª∂ÊàêÁ´ãÊôÇÊâçÂü∑Ë°åÁ®ãÂºèÁ¢º„ÄÇ\n"
            "‚Äî ‰ΩøÁî® if„ÄÅelif„ÄÅelse ÁµêÊßã„ÄÇ\n\n"
            "üîπ *Ë™ûÊ≥ïÁØÑ‰æãÔºö*\n"
            "```python\nage = 16\n\nif age >= 18:\n    print(\"‰Ω†ÊòØÊàêÂπ¥‰∫∫\")\nelif age >= 14:\n    print(\"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\")\nelse:\n    print(\"‰Ω†ÊòØÂ∞èÂ≠©\")\n```\n\n"
            "üîπ *ÊØîËºÉÈÅãÁÆóÂ≠êÔºö* `==`„ÄÅ`!=`„ÄÅ`>`„ÄÅ`<`„ÄÅ`>=`„ÄÅ`<=`\n"
            "üîπ *ÈÇèËºØÈÅãÁÆóÂ≠êÔºö* `and`„ÄÅ`or`„ÄÅ`not`\n\n"
            "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö*\n"
            "```python\nname = input(\"‰Ω†ÁöÑÂêçÂ≠óÔºö\")\nif name == \"Tom\":\n    print(\"ÂìàÂõâÔºåTomÔºÅ\")\nelse:\n    print(\"ÂìàÂõâÔºåË®™ÂÆ¢ÔºÅ\")\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "tut":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="yxx")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="letmeshowwhatyougiveup")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *PythonÔºöÂàóË°®ÔºàListÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂàóË°®Ôºü*\n"
                                      "‚Äî ÊúâÂ∫èÁöÑÂÖÉÁ¥†ÈõÜÂêà„ÄÇ\n"
                                      "‚Äî ÂèØ‰ª•Â≠òÊîæÊï∏Â≠ó„ÄÅÂ≠ó‰∏≤ÔºåÁîöËá≥ÂÖ∂‰ªñÂàóË°®„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÂàóË°®ÁØÑ‰æãÔºö*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî ÂåÖÂê´‰∏âÂÄãÂ≠ó‰∏≤ÁöÑÂàóË°®„ÄÇ\n\n"
                                      "üî∏ ÈÄèÈÅéÁ¥¢ÂºïÂ≠òÂèñÂÖÉÁ¥†Ôºö\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *‰øÆÊîπËàáÊñ∞Â¢ûÂÖÉÁ¥†Ôºö*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # Â∞á 'banana' ÊîπÁÇ∫ 'kiwi'\nfruits.append(\"pear\")  # Êñ∞Â¢ûÂÖÉÁ¥†\n```\n\n"
                                      "============================\n"
                                      "üîπ *ÈÅçÊ≠∑ÂàóË°®Ôºö*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ ÈÄêÂÄãËº∏Âá∫ÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Á¥¢ÂºïÂæû 0 ÈñãÂßãË®àÁÆó\n"
                                      "- ÂàóË°®ÂèØÂ≠òÊîæ‰∏çÂêåÈ°ûÂûãÁöÑÂÖÉÁ¥†\n"
                                      "- ÂàóË°®ÊòØÂèØËÆäÁöÑÔºàÂèØÊñ∞Â¢û„ÄÅÂà™Èô§ÂÖÉÁ¥†Ôºâ\n\n"
                                      "üí° ÂàóË°®ÊòØ Python ‰∏≠ËôïÁêÜË≥áÊñôÈõÜÂêàÁöÑÂº∑Â§ßÂ∑•ÂÖ∑„ÄÇ\n"
                                      "Ë©¶ËëóËá™Â∑±ÂâµÂª∫ÂàóË°®‰∏¶Áî®Ëø¥ÂúàÈÅçÊ≠∑ÂÆÉÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "letmeshowwhatyougiveup":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="tut")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="yobraputatiriajd")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *PythonÔºöfor Ëàá while Ëø¥Âúà*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî Ëø¥ÂúàÁî®‰æÜÈáçË§áÂü∑Ë°å‰∏ÄÊÆµÁ®ãÂºèÁ¢º„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®‰æÜÈÅçÊ≠∑ÂàóË°®„ÄÅÊï∏Â≠óÂ∫èÂàóÊàñÂÖ∂‰ªñÈõÜÂêà„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥ÂúàÁØÑ‰æãÔºö*\n"
                                      "```python\nfor i in range(5):\n    print(i)\n```\n"
                                      "‚Äî Ëº∏Âá∫Êï∏Â≠ó 0 Âà∞ 4„ÄÇ\n\n"
                                      "üî∏ `range(5)` ÊúÉÁî¢ÁîüÂ∫èÂàóÔºö0„ÄÅ1„ÄÅ2„ÄÅ3„ÄÅ4\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥ÂúàÁØÑ‰æãÔºö*\n"
                                      "```python\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1\n```\n"
                                      "‚Äî Áï∂Ê¢ù‰ª∂ÁÇ∫ÁúüÔºåÁ®ãÂºèÁ¢ºÂçÄÂ°äÊúÉÈáçË§áÂü∑Ë°å„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Áî® for ÈÅçÊ≠∑ÂàóË°®Ôºö*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- `for` ÈÅ©ÂêàÈÄêÂÄãËôïÁêÜÈõÜÂêàÂÖÉÁ¥†\n"
                                      "- `while` ‰æùÊ¢ù‰ª∂ÈáçË§áÂü∑Ë°å\n"
                                      "- Ëã•Ë¶ÅÊèêÂâçÁµêÊùüËø¥ÂúàÔºå‰ΩøÁî® `break`\n\n"
                                      "üí° Ëø¥ÂúàÊòØËá™ÂãïÂåñËàáË≥áÊñôËôïÁêÜÁöÑÂü∫Á§éÔºÅ\n"
                                      "Ë©¶ËëóÂØ´‰∏ÄÂÄãÁ∞°ÂñÆÁöÑËø¥Âúà‰æÜËº∏Âá∫Êï∏Â≠óÊàñÂñÆË©ûÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "yxx":
        keyboard = [[InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="imyoungblackandrcihiadnpussylicker")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è *PythonÔºöÂáΩÂºèÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n"
                                      "‚Äî ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî ÂáΩÂºèÂèØ‰ª•ÈÅøÂÖçÈáçË§áÁ®ãÂºèÁ¢ºÔºåËÆìÁ®ãÂºèÊõ¥ÊòìËÆÄ„ÄÅÊõ¥ÊúâÊ¢ùÁêÜ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁöÑÂáΩÂºèÔºö*\n"
                                      "```python\ndef say_hello():\n    print(\"Hello, world!\")\n\nsay_hello()  # ÂëºÂè´ÂáΩÂºè\n```\n"
                                      "‚Äî ‰ΩøÁî® `def` ÈóúÈçµÂ≠ó„ÄÅÂáΩÂºèÂêçÁ®±„ÄÅÊã¨ËôüËàáÂÜíËôü„ÄÇ\n"
                                      "‚Äî ÂáΩÂºèÂÖßÁöÑÁ®ãÂºèÁ¢ºÂè™ÊúâÂú®ÂëºÂè´ÊôÇÊâçÊúÉÂü∑Ë°å„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n"
                                      "```python\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\n```\n"
                                      "‚Äî ÂèØ‰ª•ÂÇ≥ÂÖ•ÂÄºÂà∞ÂáΩÂºèÂÖßÈÉ®ÔºåÈÄô‰∫õÂÄºÁ®±ÁÇ∫ÂèÉÊï∏ÔºàargumentsÔºâ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â∏∂ÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºà`return`ÔºâÔºö*\n"
                                      "```python\ndef square(x):\n    return x * x\n\nresult = square(5)\nprint(result)\n```\n"
                                      "‚Äî `return` Áî®‰æÜÂõûÂÇ≥ÁµêÊûú„ÄÇ\n"
                                      "‚Äî ÂõûÂÇ≥ÁöÑÁµêÊûúÂèØ‰ª•Â≠òÂÖ•ËÆäÊï∏„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÁÇ∫‰ªÄÈ∫ºÂáΩÂºèÈáçË¶ÅÔºü*\n"
                                      "- ËÆìÁ®ãÂºèÁ¢ºÊõ¥Á≤æÁ∞°„ÄÅÊòìËÆÄ\n"
                                      "- ÂèØÈáçË§á‰ΩøÁî®Âêå‰∏ÄÊÆµÈÇèËºØ\n"
                                      "- ÂèØÂ∞áÂ§ßÂûãÁ®ãÂºèÊãÜÂàÜÊàêÂ∞èÈÉ®ÂàÜÔºåÊèêÂçáÁµêÊßãÊÄß\n\n"
                                      "üí° Ë©¶ËëóÂØ´‰∏ÄÂÄãÂáΩÂºèÂç∞Âá∫‰Ω†ÁöÑÂêçÂ≠óÔºåÂÜçÂØ´‰∏ÄÂÄãÂáΩÂºèÂõûÂÇ≥ÂÖ©Êï∏Áõ∏Âä†ÁöÑÁµêÊûúÔºÅ\n"
                                      "ÂáΩÂºèÊòØÊØèÁ®ÆÁ®ãÂºèË™ûË®ÄÁöÑÂü∫Á§éÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "imyoungblackandrcihiadnpussylicker":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="yxx")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="letmeshowwhatyougiveup")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *PythonÔºöÂàóË°®ÔºàListÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂàóË°®Ôºü*\n"
                                      "‚Äî ÊúâÂ∫èÁöÑÂÖÉÁ¥†ÈõÜÂêà„ÄÇ\n"
                                      "‚Äî ÂèØ‰ª•Â≠òÊîæÊï∏Â≠ó„ÄÅÂ≠ó‰∏≤ÔºåÁîöËá≥ÂÖ∂‰ªñÂàóË°®„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÂàóË°®ÁØÑ‰æãÔºö*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî ÂåÖÂê´‰∏âÂÄãÂ≠ó‰∏≤ÁöÑÂàóË°®„ÄÇ\n\n"
                                      "üî∏ ÈÄèÈÅéÁ¥¢ÂºïÂ≠òÂèñÂÖÉÁ¥†Ôºö\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *‰øÆÊîπËàáÊñ∞Â¢ûÂÖÉÁ¥†Ôºö*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # Â∞á 'banana' ÊîπÁÇ∫ 'kiwi'\nfruits.append(\"pear\")  # Êñ∞Â¢ûÂÖÉÁ¥†\n```\n\n"
                                      "============================\n"
                                      "üîπ *ÈÅçÊ≠∑ÂàóË°®Ôºö*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ ÈÄêÂÄãËº∏Âá∫ÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Á¥¢ÂºïÂæû 0 ÈñãÂßãË®àÁÆó\n"
                                      "- ÂàóË°®ÂèØÂ≠òÊîæ‰∏çÂêåÈ°ûÂûãÁöÑÂÖÉÁ¥†\n"
                                      "- ÂàóË°®ÊòØÂèØËÆäÁöÑÔºàÂèØÊñ∞Â¢û„ÄÅÂà™Èô§ÂÖÉÁ¥†Ôºâ\n\n"
                                      "üí° ÂàóË°®ÊòØ Python ‰∏≠ËôïÁêÜË≥áÊñôÈõÜÂêàÁöÑÂº∑Â§ßÂ∑•ÂÖ∑„ÄÇ\n"
                                      "Ë©¶ËëóËá™Â∑±ÂâµÂª∫ÂàóË°®‰∏¶Áî®Ëø¥ÂúàÈÅçÊ≠∑ÂÆÉÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "cponess":
        keyboard = [[InlineKeyboardButton("‚öô ÈñãÂßã", callback_data="rezeress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("¬´¬ª", reply_markup=reply_markup)

    elif query.data == "rezeress":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="vezeress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ ÂÆâË£ùËàáÈñãÂßãÔºö*\n\n"
            "üîπ *Ê≠•È©ü 1ÔºöÂÆâË£ùÁ∑®Ë≠ØÂô®*\n"
            "[‰∏ãËºâ MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî ÂÆâË£ù gcc ‰∏¶Â∞á bin Ë≥áÊñôÂ§æË∑ØÂæëÂä†ÂÖ•Á≥ªÁµ±Áí∞Â¢ÉËÆäÊï∏ PATH\n\n"
            "üîπ *Ê≠•È©ü 2Ôºö‰∏ãËºâÁ∑®ËºØÂô®*\n"
            "[‰∏ãËºâ Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *Ê≠•È©ü 3ÔºöÊ™¢Êü•Á∑®Ë≠ØÂô®*\n"
            "`g++ --version`\n\n"
            "üîπ *Ê≠•È©ü 4ÔºöÁ∞°ÂñÆÁ®ãÂºèÁ¢º*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "Â∞áÊ™îÊ°àÂÑ≤Â≠òÁÇ∫ `main.cpp`ÔºåÁ∑®Ë≠ØÊåá‰ª§Ôºö\n"
            "`g++ main.cpp -o main`\n"
            "Âü∑Ë°åÔºö\n"
            "`./main`",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "vezeress":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="cpp5")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="aasaaasasas")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ÔºöËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
            "‚Äî ËÆäÊï∏ÊòØÂÖ∑ÂêçÁöÑË®òÊÜ∂È´îÁ©∫ÈñìÔºåÁî®‰æÜÂÑ≤Â≠òË≥áÊñô„ÄÇ\n"
            "‚Äî ÂøÖÈ†àÂÖàÂÆ£ÂëäËÆäÊï∏ÁöÑÂûãÊÖãÔºåÊâçËÉΩ‰ΩøÁî®„ÄÇ\n\n"
            "üîπ *ÁØÑ‰æãÔºö*\n"
            "`int age = 15;`  // Êï¥Êï∏\n"
            "`double pi = 3.14;`  // ÊµÆÈªûÊï∏\n"
            "`char grade = 'A';`  // Â≠óÂÖÉ\n"
            "`bool isOnline = true;`  // Â∏ÉÊûóÂÄº\n"
            "`std::string name = \"Tom\";`  // Â≠ó‰∏≤\n\n"
            "üîπ *Ëº∏Âá∫Á§∫‰æãÔºö*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"ÂßìÂêçÔºö\" << name << \"\\n\";\n"
            "    std::cout << \"Âπ¥ÈΩ°Ôºö\" << age << \"\\n\";\n    return 0;\n}\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "aasaaasasas":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="vezeress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ ÂÆâË£ùËàáÈñãÂßãÔºö*\n\n"
            "üîπ *Ê≠•È©ü 1ÔºöÂÆâË£ùÁ∑®Ë≠ØÂô®*\n"
            "[‰∏ãËºâ MinGW](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî ÂÆâË£ù gcc ‰∏¶Â∞á bin Ë≥áÊñôÂ§æË∑ØÂæëÂä†ÂÖ•Á≥ªÁµ±Áí∞Â¢ÉËÆäÊï∏ PATH\n\n"
            "üîπ *Ê≠•È©ü 2Ôºö‰∏ãËºâÁ∑®ËºØÂô®*\n"
            "[‰∏ãËºâ Visual Studio Code](https://code.visualstudio.com/)\n\n"
            "üîπ *Ê≠•È©ü 3ÔºöÊ™¢Êü•Á∑®Ë≠ØÂô®*\n"
            "`g++ --version`\n\n"
            "üîπ *Ê≠•È©ü 4ÔºöÁ∞°ÂñÆÁ®ãÂºèÁ¢º*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "Â∞áÊ™îÊ°àÂÑ≤Â≠òÁÇ∫ `main.cpp`ÔºåÁ∑®Ë≠ØÊåá‰ª§Ôºö\n"
            "`g++ main.cpp -o main`\n"
            "Âü∑Ë°åÔºö\n"
            "`./main`",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "cpp5":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="jingg")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="guilty")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++ÔºöÊ¢ù‰ª∂Âà§Êñ∑Ôºàif„ÄÅelse„ÄÅelse ifÔºâ*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ôºü*\n"
            "‚Äî Áï∂ÁâπÂÆöÊ¢ù‰ª∂ÊàêÁ´ãÊôÇÔºåÂü∑Ë°åÁõ∏Â∞çÊáâÁöÑÁ®ãÂºèÁ¢º„ÄÇ\n\n"
            "üîπ *ÁØÑ‰æãÔºö*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"‰Ω†ÊòØÊàêÂπ¥‰∫∫\";\n"
            "    } else if (age >= 14) {\n        cout << \"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\";\n"
            "    } else {\n        cout << \"‰Ω†ÊòØÂ∞èÂ≠©\";\n    }\n"
            "    return 0;\n}\n```\n\n"
            "üîπ *ÈÅãÁÆóÁ¨¶Ôºö* `==`„ÄÅ`!=`„ÄÅ`>`„ÄÅ`<`„ÄÅ`>=`„ÄÅ`<=`\n"
            "üîπ *ÈÇèËºØÁ¨¶ËôüÔºö* `&&`„ÄÅ`||`„ÄÅ`!`\n\n"
            "‚úÖ *Ë©¶ËëóËá™Â∑±ÂØ´‰∏ÄÂÄãÊ¢ù‰ª∂Âà§Êñ∑ÂêßÔºÅ*",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "guilty":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="cpp5")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="aasaaasasas")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ÔºöËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
            "‚Äî ËÆäÊï∏ÊòØÂÖ∑ÂêçÁöÑË®òÊÜ∂È´îÁ©∫ÈñìÔºåÁî®‰æÜÂÑ≤Â≠òË≥áÊñô„ÄÇ\n"
            "‚Äî ÂøÖÈ†àÂÖàÂÆ£ÂëäËÆäÊï∏ÁöÑÂûãÊÖãÔºåÊâçËÉΩ‰ΩøÁî®„ÄÇ\n\n"
            "üîπ *ÁØÑ‰æãÔºö*\n"
            "`int age = 15;`  // Êï¥Êï∏\n"
            "`double pi = 3.14;`  // ÊµÆÈªûÊï∏\n"
            "`char grade = 'A';`  // Â≠óÂÖÉ\n"
            "`bool isOnline = true;`  // Â∏ÉÊûóÂÄº\n"
            "`std::string name = \"Tom\";`  // Â≠ó‰∏≤\n\n"
            "üîπ *Ëº∏Âá∫Á§∫‰æãÔºö*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"ÂßìÂêçÔºö\" << name << \"\\n\";\n"
            "    std::cout << \"Âπ¥ÈΩ°Ôºö\" << age << \"\\n\";\n    return 0;\n}\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "jingg":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="venuss")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="yoxagzuvayoxunpoz")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÅ *C++ÔºöËø¥ÂúàÔºàfor„ÄÅwhile„ÄÅdo whileÔºâ*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
            "‚Äî Áï∂Ê¢ù‰ª∂ÊàêÁ´ãÊôÇÔºåÈáçË§áÂü∑Ë°åÂêå‰∏ÄÊÆµÁ®ãÂºèÁ¢º„ÄÇ\n\n"
            "üîπ *C++ ‰∏≠ÁöÑËø¥ÂúàÈ°ûÂûãÔºö*\n"
            "- `for` ‚Äî È†êÂÖàÁü•ÈÅìÂü∑Ë°åÊ¨°Êï∏ÊôÇ‰ΩøÁî®\n"
            "- `while` ‚Äî Ê¢ù‰ª∂ÁÇ∫ÁúüÊôÇÊåÅÁ∫åÂü∑Ë°å\n"
            "- `do while` ‚Äî ÂÖàÂü∑Ë°å‰∏ÄÊ¨°ÔºåÂÜçÊ™¢Êü•Ê¢ù‰ª∂\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºöfor*\n"
            "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0 1 2 3 4`\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºöwhile*\n"
            "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0`„ÄÅ`1`„ÄÅ`2`\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºödo while*\n"
            "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0`„ÄÅ`1`\n\n"
            "============================\n"
            "‚úÖ *‰ΩïÊôÇ‰ΩøÁî®Ôºü*\n"
            "- `for` ‚Äî ÈÅ©ÂêàÂ∑≤Áü•Ê¨°Êï∏ÁöÑË®àÊï∏Âô®ÔºàÂ¶Ç `i = 0; i < N; i++`Ôºâ\n"
            "- `while` ‚Äî ‰∏çÁü•ÈÅìÁ¢∫ÂàáÂü∑Ë°åÊ¨°Êï∏ÊôÇ\n"
            "- `do while` ‚Äî ‰øùË≠âËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°\n\n"
            "üí° Ë©¶ËëóËá™Â∑±ÂØ´ÂØ´ÁúãÂêßÔºÅ",
            parse_mode="Markdown",
            reply_markup=reply_markup)
    elif query.data == "yoxagzuvayoxunpoz":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="jingg")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="guilty")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++ÔºöÊ¢ù‰ª∂Âà§Êñ∑Ôºàif„ÄÅelse„ÄÅelse ifÔºâ*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ôºü*\n"
            "‚Äî Áï∂ÁâπÂÆöÊ¢ù‰ª∂ÊàêÁ´ãÊôÇÔºåÂü∑Ë°åÁõ∏Â∞çÊáâÁöÑÁ®ãÂºèÁ¢º„ÄÇ\n\n"
            "üîπ *ÁØÑ‰æãÔºö*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"‰Ω†ÊòØÊàêÂπ¥‰∫∫\";\n"
            "    } else if (age >= 14) {\n        cout << \"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\";\n"
            "    } else {\n        cout << \"‰Ω†ÊòØÂ∞èÂ≠©\";\n    }\n"
            "    return 0;\n}\n```\n\n"
            "üîπ *ÈÅãÁÆóÁ¨¶Ôºö* `==`„ÄÅ`!=`„ÄÅ`>`„ÄÅ`<`„ÄÅ`>=`„ÄÅ`<=`\n"
            "üîπ *ÈÇèËºØÁ¨¶ËôüÔºö* `&&`„ÄÅ`||`„ÄÅ`!`\n\n"
            "‚úÖ *Ë©¶ËëóËá™Â∑±ÂØ´‰∏ÄÂÄãÊ¢ù‰ª∂Âà§Êñ∑ÂêßÔºÅ*",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "venuss":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="zerotrustss")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="crchemaadsasdadad")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++ÔºöÈô£ÂàóÔºàArraysÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈô£ÂàóÔºü*\n"
                                      "‚Äî ‰∏ÄÁµÑ**Áõ∏ÂêåÈ°ûÂûã**ÁöÑÂÖÉÁ¥†ÔºåÈÄ£Á∫åÂ≠òÊîæÊñºË®òÊÜ∂È´î‰∏≠„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãÂÖÉÁ¥†ÊúâËá™Â∑±ÁöÑÁ¥¢ÂºïÔºàÂæû 0 ÈñãÂßãÔºâ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Èô£ÂàóÁØÑ‰æãÔºö*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî Âª∫Á´ã‰∏ÄÂÄãÂåÖÂê´ 5 ÂÄã int ÂÖÉÁ¥†ÁöÑÈô£Âàó„ÄÇ\n\n"
                                      "üî∏ Â≠òÂèñÂÖÉÁ¥†Ôºö\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Áî®Ëø¥ÂúàËº∏Âá∫ÊâÄÊúâÂÖÉÁ¥†Ôºö*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ Ëº∏Âá∫ÁµêÊûúÔºö`10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Âæû‰ΩøÁî®ËÄÖËº∏ÂÖ•ÂÄºÔºö*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ Â∞á 3 ÂÄãÊï∏Â≠óÂÑ≤Â≠òÂú®Èô£Âàó‰∏≠„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Á¥¢ÂºïÂæû `0` Âà∞ `n - 1`\n"
                                      "- Ë∂ÖÂá∫Èô£ÂàóÈÇäÁïåÊúÉÈÄ†ÊàêÈåØË™§ÔºàÊú™ÂÆöÁæ©Ë°åÁÇ∫Ôºâ‚ùå\n"
                                      "- ÊâÄÊúâÂÖÉÁ¥†ÂøÖÈ†àÊòØÁõ∏ÂêåÈ°ûÂûãÔºàint„ÄÅfloat„ÄÅchar Á≠âÔºâ\n\n"
                                      "üí° Èô£ÂàóÊòØÂü∫Á§é„ÄÇÈÄèÈÅéÈô£ÂàóÔºå‰Ω†ÊúÉÂ≠∏Âà∞Ë®òÊÜ∂È´îÁÆ°ÁêÜ„ÄÅÊéíÂ∫èËàáÊºîÁÆóÊ≥ïÔºÅ\n\n"
                                      "Ë©¶ËëóÂª∫Á´ãÈô£Âàó‰∏¶Ëº∏Âá∫ÂÖÉÁ¥†ÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "crchemaadsasdadad":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="venuss")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="yoxagzuvayoxunpoz")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÅ *C++ÔºöËø¥ÂúàÔºàfor„ÄÅwhile„ÄÅdo whileÔºâ*\n\n"
            "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
            "‚Äî Áï∂Ê¢ù‰ª∂ÊàêÁ´ãÊôÇÔºåÈáçË§áÂü∑Ë°åÂêå‰∏ÄÊÆµÁ®ãÂºèÁ¢º„ÄÇ\n\n"
            "üîπ *C++ ‰∏≠ÁöÑËø¥ÂúàÈ°ûÂûãÔºö*\n"
            "- `for` ‚Äî È†êÂÖàÁü•ÈÅìÂü∑Ë°åÊ¨°Êï∏ÊôÇ‰ΩøÁî®\n"
            "- `while` ‚Äî Ê¢ù‰ª∂ÁÇ∫ÁúüÊôÇÊåÅÁ∫åÂü∑Ë°å\n"
            "- `do while` ‚Äî ÂÖàÂü∑Ë°å‰∏ÄÊ¨°ÔºåÂÜçÊ™¢Êü•Ê¢ù‰ª∂\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºöfor*\n"
            "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0 1 2 3 4`\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºöwhile*\n"
            "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0`„ÄÅ`1`„ÄÅ`2`\n\n"
            "============================\n"
            "üîπ *ÁØÑ‰æãÔºödo while*\n"
            "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
            "üî∏ Ëº∏Âá∫Ôºö`0`„ÄÅ`1`\n\n"
            "============================\n"
            "‚úÖ *‰ΩïÊôÇ‰ΩøÁî®Ôºü*\n"
            "- `for` ‚Äî ÈÅ©ÂêàÂ∑≤Áü•Ê¨°Êï∏ÁöÑË®àÊï∏Âô®ÔºàÂ¶Ç `i = 0; i < N; i++`Ôºâ\n"
            "- `while` ‚Äî ‰∏çÁü•ÈÅìÁ¢∫ÂàáÂü∑Ë°åÊ¨°Êï∏ÊôÇ\n"
            "- `do while` ‚Äî ‰øùË≠âËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°\n\n"
            "üí° Ë©¶ËëóËá™Â∑±ÂØ´ÂØ´ÁúãÂêßÔºÅ",
            parse_mode="Markdown",
            reply_markup=reply_markup)

    elif query.data == "zerotrustss":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="amburanmalll")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="anasnimetsmenyaremenlousvi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++ÔºöÂ≠ó‰∏≤ÔºàStringsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂ≠ó‰∏≤Ôºü*\n"
                                      "‚Äî ‰∏ÄÈÄ£‰∏≤ÁöÑÂ≠óÂÖÉÔºå‰æãÂ¶ÇÂêçÂ≠óÊàñË©ûÂè•„ÄÇ\n"
                                      "‚Äî Âú® C++ ‰∏≠Ôºå‰Ω†ÂèØ‰ª•‰ΩøÁî®Â≠óÂÖÉÈô£ÂàóÔºàchar arrayÔºâÊàñ `std::string` È°ûÂà•„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â≠ó‰∏≤‰ΩúÁÇ∫Â≠óÂÖÉÈô£ÂàóÔºö*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ `\\0` Â≠óÂÖÉÊúÉËá™ÂãïÂä†Âú®Â≠ó‰∏≤Êú´Â∞æÔºåÁî®‰æÜÊ®ôË®òÂ≠ó‰∏≤ÁµêÊùü„ÄÇ\n"
                                      "üî∏ Èô£ÂàóÂ§ßÂ∞èÂøÖÈ†àÂ§ßÊñºÂ≠ó‰∏≤Èï∑Â∫¶„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *‰ΩøÁî® `std::string`Ôºö*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî ÈÄôÁ®ÆÊñπÊ≥ïÊõ¥Á∞°ÂñÆ‰πüÊõ¥ÂÆâÂÖ®„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Âü∫Êú¨Êìç‰ΩúÔºö*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // Ëº∏Âá∫Â≠ó‰∏≤\n"
                                      "cout << name.length() << endl; // Â≠ó‰∏≤Èï∑Â∫¶\n"
                                      "name += \" Hardy\";             // ‰∏≤Êé•Â≠ó‰∏≤\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *Âæû‰ΩøÁî®ËÄÖËº∏ÂÖ•Â≠ó‰∏≤Ôºö*\n"
                                      "```cpp\nstd::string userName;\ncout << \"Enter name: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` ËÆÄÂèñÂà∞Á¨¨‰∏ÄÂÄãÁ©∫ÁôΩÂç≥ÂÅúÊ≠¢„ÄÇÂ¶ÇÈúÄÊï¥Âè•Ëº∏ÂÖ•Ôºö\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- `std::string` ÊØîÂ≠óÂÖÉÈô£ÂàóÊõ¥Á∞°ÂñÆÂÆâÂÖ®\n"
                                      "- ÂèØ‰ª•ËºïÈ¨Ü‰∏≤Êé•„ÄÅÂèñÂæóÈï∑Â∫¶„ÄÅÊêúÂ∞ãÂ≠óÂÖÉ\n"
                                      "- ËôïÁêÜË•øÈáåÁàæÊñáÊàñÂÖ∂‰ªñ Unicode ÂèØËÉΩÈúÄË®≠ÂÆöÁ∑®Á¢º\n\n"
                                      "üí° Â≠ó‰∏≤ÊòØËôïÁêÜÊñáÂ≠ó„ÄÅË°®ÂñÆ„ÄÅË®äÊÅØÁöÑÂü∫Á§éÔºÅ\n"
                                      "Ë©¶ËëóÂª∫Á´ãÂ≠ó‰∏≤‰∏¶Ëº∏Âá∫ÂêßÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "anasnimetsmenyaremenlousvi":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="zerotrustss")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="crchemaadsasdadad")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++ÔºöÈô£ÂàóÔºàArraysÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈô£ÂàóÔºü*\n"
                                      "‚Äî ‰∏ÄÁµÑ**Áõ∏ÂêåÈ°ûÂûã**ÁöÑÂÖÉÁ¥†ÔºåÈÄ£Á∫åÂ≠òÊîæÊñºË®òÊÜ∂È´î‰∏≠„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãÂÖÉÁ¥†ÊúâËá™Â∑±ÁöÑÁ¥¢ÂºïÔºàÂæû 0 ÈñãÂßãÔºâ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Èô£ÂàóÁØÑ‰æãÔºö*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî Âª∫Á´ã‰∏ÄÂÄãÂåÖÂê´ 5 ÂÄã int ÂÖÉÁ¥†ÁöÑÈô£Âàó„ÄÇ\n\n"
                                      "üî∏ Â≠òÂèñÂÖÉÁ¥†Ôºö\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Áî®Ëø¥ÂúàËº∏Âá∫ÊâÄÊúâÂÖÉÁ¥†Ôºö*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ Ëº∏Âá∫ÁµêÊûúÔºö`10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Âæû‰ΩøÁî®ËÄÖËº∏ÂÖ•ÂÄºÔºö*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ Â∞á 3 ÂÄãÊï∏Â≠óÂÑ≤Â≠òÂú®Èô£Âàó‰∏≠„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Á¥¢ÂºïÂæû `0` Âà∞ `n - 1`\n"
                                      "- Ë∂ÖÂá∫Èô£ÂàóÈÇäÁïåÊúÉÈÄ†ÊàêÈåØË™§ÔºàÊú™ÂÆöÁæ©Ë°åÁÇ∫Ôºâ‚ùå\n"
                                      "- ÊâÄÊúâÂÖÉÁ¥†ÂøÖÈ†àÊòØÁõ∏ÂêåÈ°ûÂûãÔºàint„ÄÅfloat„ÄÅchar Á≠âÔºâ\n\n"
                                      "üí° Èô£ÂàóÊòØÂü∫Á§é„ÄÇÈÄèÈÅéÈô£ÂàóÔºå‰Ω†ÊúÉÂ≠∏Âà∞Ë®òÊÜ∂È´îÁÆ°ÁêÜ„ÄÅÊéíÂ∫èËàáÊºîÁÆóÊ≥ïÔºÅ\n\n"
                                      "Ë©¶ËëóÂª∫Á´ãÈô£Âàó‰∏¶Ëº∏Âá∫ÂÖÉÁ¥†ÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "amburanmalll":
        keyboard = [
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="rytttttt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C++ÔºöÂáΩÂºèÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n"
                                      "‚Äî ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî Âπ´Âä©ÁµÑÁπîÁ®ãÂºèÁ¢º‰∏¶ÈÅøÂÖçÈáçË§á„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁöÑÂáΩÂºèÔºö*\n"
                                      "```cpp\nvoid sayHello() {\n    cout << \"Hello, world!\" << endl;\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n"
                                      "‚Äî `void` Ë°®Á§∫ÂáΩÂºèÁÑ°ÂõûÂÇ≥ÂÄº„ÄÇ\n"
                                      "‚Äî ÈÄèÈÅéÂáΩÂºèÂêçÁ®±ÂëºÂè´„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n"
                                      "```cpp\nvoid greet(string name) {\n    cout << \"Hello, \" << name << endl;\n}\n\nint main() {\n    greet(\"Alice\");\n    return 0;\n}\n```\n"
                                      "‚Äî ÂèØ‰ª•ÂÇ≥ÂÖ•Ë≥áÊñôÁµ¶ÂáΩÂºè„ÄÇ\n"
                                      "‚Äî ÂèÉÊï∏Âú®ÂÆ£ÂëäÊôÇÂØ´Âú®Êã¨Ëôü‰∏≠„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÊúâÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºö*\n"
                                      "```cpp\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int res = square(5);\n    cout << res;\n    return 0;\n}\n```\n"
                                      "‚Äî ÊåáÂÆöÂõûÂÇ≥ÂûãÂà•ÔºàÂ¶Ç `int`Ôºâ„ÄÇ\n"
                                      "‚Äî ‰ΩøÁî® `return` ÂõûÂÇ≥ÁµêÊûú„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÁÇ∫‰ΩïÂáΩÂºèÈáçË¶ÅÔºü*\n"
                                      "- ‰ΩøÁ®ãÂºèÁ¢ºÊõ¥Á≤æÁ∞°ËàáÊ∏ÖÊô∞\n"
                                      "- ÂèØÈáçË§á‰ΩøÁî®Áõ∏ÂêåÁ®ãÂºèÁ¢º\n"
                                      "- ÊòìÊñºÊãÜÂàÜÊàêÂ§öÂÄãÈÉ®ÂàÜ\n\n"
                                      "üí° ÂòóË©¶ÂØ´‰∏ÄÂÄãÂáΩÂºèÔºåÂÇ≥ÂÖ•ÂÖ©ÂÄãÊï∏Â≠ó‰∏¶ÂõûÂÇ≥ÂÆÉÂÄëÁöÑÂíåÔºÅ\n"
                                      "ÂáΩÂºèÊòØËâØÂ•Ω C++ Á®ãÂºèÁ¢ºÁöÑÂü∫Á§éÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "rytttttt":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="amburanmalll")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="anasnimetsmenyaremenlousvi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++ÔºöÂ≠ó‰∏≤ÔºàStringsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂ≠ó‰∏≤Ôºü*\n"
                                      "‚Äî ‰∏ÄÈÄ£‰∏≤ÁöÑÂ≠óÂÖÉÔºå‰æãÂ¶ÇÂêçÂ≠óÊàñË©ûÂè•„ÄÇ\n"
                                      "‚Äî Âú® C++ ‰∏≠Ôºå‰Ω†ÂèØ‰ª•‰ΩøÁî®Â≠óÂÖÉÈô£ÂàóÔºàchar arrayÔºâÊàñ `std::string` È°ûÂà•„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â≠ó‰∏≤‰ΩúÁÇ∫Â≠óÂÖÉÈô£ÂàóÔºö*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ `\\0` Â≠óÂÖÉÊúÉËá™ÂãïÂä†Âú®Â≠ó‰∏≤Êú´Â∞æÔºåÁî®‰æÜÊ®ôË®òÂ≠ó‰∏≤ÁµêÊùü„ÄÇ\n"
                                      "üî∏ Èô£ÂàóÂ§ßÂ∞èÂøÖÈ†àÂ§ßÊñºÂ≠ó‰∏≤Èï∑Â∫¶„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *‰ΩøÁî® `std::string`Ôºö*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî ÈÄôÁ®ÆÊñπÊ≥ïÊõ¥Á∞°ÂñÆ‰πüÊõ¥ÂÆâÂÖ®„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Âü∫Êú¨Êìç‰ΩúÔºö*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // Ëº∏Âá∫Â≠ó‰∏≤\n"
                                      "cout << name.length() << endl; // Â≠ó‰∏≤Èï∑Â∫¶\n"
                                      "name += \" Hardy\";             // ‰∏≤Êé•Â≠ó‰∏≤\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *Âæû‰ΩøÁî®ËÄÖËº∏ÂÖ•Â≠ó‰∏≤Ôºö*\n"
                                      "```cpp\nstd::string userName;\ncout << \"Enter name: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` ËÆÄÂèñÂà∞Á¨¨‰∏ÄÂÄãÁ©∫ÁôΩÂç≥ÂÅúÊ≠¢„ÄÇÂ¶ÇÈúÄÊï¥Âè•Ëº∏ÂÖ•Ôºö\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- `std::string` ÊØîÂ≠óÂÖÉÈô£ÂàóÊõ¥Á∞°ÂñÆÂÆâÂÖ®\n"
                                      "- ÂèØ‰ª•ËºïÈ¨Ü‰∏≤Êé•„ÄÅÂèñÂæóÈï∑Â∫¶„ÄÅÊêúÂ∞ãÂ≠óÂÖÉ\n"
                                      "- ËôïÁêÜË•øÈáåÁàæÊñáÊàñÂÖ∂‰ªñ Unicode ÂèØËÉΩÈúÄË®≠ÂÆöÁ∑®Á¢º\n\n"
                                      "üí° Â≠ó‰∏≤ÊòØËôïÁêÜÊñáÂ≠ó„ÄÅË°®ÂñÆ„ÄÅË®äÊÅØÁöÑÂü∫Á§éÔºÅ\n"
                                      "Ë©¶ËëóÂª∫Á´ãÂ≠ó‰∏≤‰∏¶Ëº∏Âá∫ÂêßÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "jvonesss":
        keyboard = [[InlineKeyboardButton("‚öô ÈñãÂßã", callback_data="lexustt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ÈñãÂßãÂêßÔºÅ \nÁ¨¨ 1 Á´†Ôºö", reply_markup=reply_markup)
    elif query.data == "lexustt":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="lexx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript ÂÆâË£ùËàáÂÖ•ÈñÄÔºö*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâÁ∑®ËºØÂô®*\n"
                                      "[‰∏ãËºâ Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Ê≠•È©ü 2ÔºöÁ¢∫Ë™ç Node.js ÊòØÂê¶ÂÆâË£ù*\n"
                                      "[‰∏ãËºâ Node.js](https://nodejs.org/)\n"
                                      "‚Äî ÂÆâË£ùÂæåÂü∑Ë°åÁâàÊú¨Á¢∫Ë™çÊåá‰ª§Ôºö\n"
                                      "`node --version`\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÁ∞°ÂñÆÁ®ãÂºèÁ¢ºÔºö*\n"
                                      "Âª∫Á´ãÊ™îÊ°à `main.js`ÔºåÂÖßÂÆπÔºö\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "Âú®ÁµÇÁ´ØÊ©üÂü∑Ë°åÔºö\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript ÊòØ‰Ω†ÈÇÅÂêëË£Ω‰ΩúÁ∂≤Á´ô„ÄÅÊ©üÂô®‰∫∫ÂíåÊáâÁî®Á®ãÂºèÁöÑÁ¨¨‰∏ÄÊ≠•ÔºÅ*",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "lexx":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="lextutu")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="zatofotkipizdatiyeele")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöËÆäÊï∏ËàáË≥áÊñôÈ°ûÂûã*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî ÊòØÁî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂëΩÂêçÂÆπÂô®„ÄÇ\n"
                                      "‚Äî ‰ΩøÁî® `let`„ÄÅ`const`ÔºåÊàñËàäÁâàÁöÑ `var` ‰æÜÂÆ£Âëä„ÄÇ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Ëº∏Âá∫Âà∞ÊéßÂà∂Âè∞Ôºö*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"Name:\", name);\nconsole.log(\"Age:\", age);\n```\n"
                                      "üí° *ÊèêÁ§∫Ôºö* ‰∏çËÆäÁöÑÂÄºÁî® `const`ÔºåÂèØËÆäÁöÑÁî® `let`„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "zatofotkipizdatiyeele":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="lexx")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript ÂÆâË£ùËàáÂÖ•ÈñÄÔºö*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâÁ∑®ËºØÂô®*\n"
                                      "[‰∏ãËºâ Visual Studio Code](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Ê≠•È©ü 2ÔºöÁ¢∫Ë™ç Node.js ÊòØÂê¶ÂÆâË£ù*\n"
                                      "[‰∏ãËºâ Node.js](https://nodejs.org/)\n"
                                      "‚Äî ÂÆâË£ùÂæåÂü∑Ë°åÁâàÊú¨Á¢∫Ë™çÊåá‰ª§Ôºö\n"
                                      "`node --version`\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÁ∞°ÂñÆÁ®ãÂºèÁ¢ºÔºö*\n"
                                      "Âª∫Á´ãÊ™îÊ°à `main.js`ÔºåÂÖßÂÆπÔºö\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "Âú®ÁµÇÁ´ØÊ©üÂü∑Ë°åÔºö\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript ÊòØ‰Ω†ÈÇÅÂêëË£Ω‰ΩúÁ∂≤Á´ô„ÄÅÊ©üÂô®‰∫∫ÂíåÊáâÁî®Á®ãÂºèÁöÑÁ¨¨‰∏ÄÊ≠•ÔºÅ*",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "lextutu":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="porsc")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="kaknasoxranenkaxe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöÊ¢ù‰ª∂Âà§Êñ∑ËàáÊØîËºÉ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ôºü*\n"
                                      "‚Äî ÊòØ‰∏ÄÁ®ÆÊ™¢Êü•ÔºåÁï∂Ê¢ù‰ª∂ÁÇ∫ `true` ÊôÇÔºåÂçÄÂ°äÂÖßÁöÑÁ®ãÂºèÁ¢ºÊúÉÂü∑Ë°å„ÄÇ\n"
                                      "‚Äî Âú® JavaScript ‰∏≠Ôºå‰ΩøÁî® `if` Ë™ûÂè•‰æÜÂØ¶Áèæ„ÄÇ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"ÂÖÅË®±ÈÄ≤ÂÖ•\");\n} else {\n    console.log(\"ÊãíÁµïÈÄ≤ÂÖ•\");\n}\n```\n\n"
                                      "üîπ *ÊØîËºÉÈÅãÁÆóÂ≠êÔºö*\n"
                                      "`==` ‚Äî ÂÄºÁõ∏Á≠âÔºàÊúÉËá™ÂãïËΩâÂûãÔºâ\n"
                                      "`===` ‚Äî Âö¥Ê†ºÁõ∏Á≠âÔºàÈ°ûÂûãÂíåÂÄºÈÉΩÁõ∏Á≠âÔºâ\n"
                                      "`!=` ‚Äî ‰∏çÁ≠âÊñºÔºàÂÄºÊØîËºÉÔºâ\n"
                                      "`!==` ‚Äî Âö¥Ê†º‰∏çÁ≠âÔºàÈ°ûÂûãÊàñÂÄº‰∏çÂêåÔºâ\n"
                                      "`>` ‚Äî Â§ßÊñº\n"
                                      "`<` ‚Äî Â∞èÊñº\n"
                                      "`>=` ‚Äî Â§ßÊñºÊàñÁ≠âÊñº\n"
                                      "`<=` ‚Äî Â∞èÊñºÊàñÁ≠âÊñº\n\n"
                                      "üí° *ÈáçË¶ÅÊèêÁ§∫Ôºö* Âª∫Ë≠∞‰ΩøÁî® `===` Âíå `!==` ‰ª•ÈÅøÂÖçÂõ†È°ûÂûãËΩâÊèõÂºïËµ∑ÁöÑÈåØË™§„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "kaknasoxranenkaxe":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="lextutu")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="zatofotkipizdatiyeele")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöËÆäÊï∏ËàáË≥áÊñôÈ°ûÂûã*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî ÊòØÁî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂëΩÂêçÂÆπÂô®„ÄÇ\n"
                                      "‚Äî ‰ΩøÁî® `let`„ÄÅ`const`ÔºåÊàñËàäÁâàÁöÑ `var` ‰æÜÂÆ£Âëä„ÄÇ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Ëº∏Âá∫Âà∞ÊéßÂà∂Âè∞Ôºö*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"Name:\", name);\nconsole.log(\"Age:\", age);\n```\n"
                                      "üí° *ÊèêÁ§∫Ôºö* ‰∏çËÆäÁöÑÂÄºÁî® `const`ÔºåÂèØËÆäÁöÑÁî® `let`„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "porsc":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏èÔ∏è", callback_data="ferrarir")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="crzenxoaskxce")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöÈÇèËºØÈÅãÁÆóÂ≠ê*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈÇèËºØÈÅãÁÆóÂ≠êÔºü*\n"
                                      "‚Äî Áî®‰æÜÁµÑÂêàÂ§öÂÄãÊ¢ù‰ª∂Âà§Êñ∑„ÄÇ\n"
                                      "‚Äî ÂèØ‰ª•ÂêåÊôÇÊ™¢Êü•Â§öÂÄãÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ã„ÄÇ\n\n"
                                      "üîπ *Â∏∏Ë¶ãÁöÑÈÇèËºØÈÅãÁÆóÂ≠êÔºö*\n"
                                      "`&&` ‚Äî ‰∏îÔºàÊâÄÊúâÊ¢ù‰ª∂ÈÉΩÂøÖÈ†àÁÇ∫ÁúüÔºâ\n"
                                      "`||` ‚Äî ÊàñÔºàËá≥Â∞ë‰∏ÄÂÄãÊ¢ù‰ª∂ÁÇ∫ÁúüÔºâ\n"
                                      "`!` ‚Äî ÈùûÔºàÂèñÂèçÔºåÊîπËÆäÊ¢ù‰ª∂ÁöÑÁúüÂÅáÔºâ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"ÂÖÅË®±ÈÄ≤ÂÖ•\");\n} else {\n    console.log(\"ÊãíÁµïÈÄ≤ÂÖ•\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"Áî®Êà∂Èõ¢Á∑ö\");\n}\n```\n\n"
                                      "üí° *ÈáçË¶ÅÊèêÁ§∫Ôºö* Êã¨ËôüÂÑ™ÂÖàË®àÁÆóÔºåÊé•ËëóÊâçÊòØÈÇèËºØÈÅãÁÆó„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "crzenxoaskxce":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="porsc")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="kaknasoxranenkaxe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöÊ¢ù‰ª∂Âà§Êñ∑ËàáÊØîËºÉ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ôºü*\n"
                                      "‚Äî ÊòØ‰∏ÄÁ®ÆÊ™¢Êü•ÔºåÁï∂Ê¢ù‰ª∂ÁÇ∫ `true` ÊôÇÔºåÂçÄÂ°äÂÖßÁöÑÁ®ãÂºèÁ¢ºÊúÉÂü∑Ë°å„ÄÇ\n"
                                      "‚Äî Âú® JavaScript ‰∏≠Ôºå‰ΩøÁî® `if` Ë™ûÂè•‰æÜÂØ¶Áèæ„ÄÇ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"ÂÖÅË®±ÈÄ≤ÂÖ•\");\n} else {\n    console.log(\"ÊãíÁµïÈÄ≤ÂÖ•\");\n}\n```\n\n"
                                      "üîπ *ÊØîËºÉÈÅãÁÆóÂ≠êÔºö*\n"
                                      "`==` ‚Äî ÂÄºÁõ∏Á≠âÔºàÊúÉËá™ÂãïËΩâÂûãÔºâ\n"
                                      "`===` ‚Äî Âö¥Ê†ºÁõ∏Á≠âÔºàÈ°ûÂûãÂíåÂÄºÈÉΩÁõ∏Á≠âÔºâ\n"
                                      "`!=` ‚Äî ‰∏çÁ≠âÊñºÔºàÂÄºÊØîËºÉÔºâ\n"
                                      "`!==` ‚Äî Âö¥Ê†º‰∏çÁ≠âÔºàÈ°ûÂûãÊàñÂÄº‰∏çÂêåÔºâ\n"
                                      "`>` ‚Äî Â§ßÊñº\n"
                                      "`<` ‚Äî Â∞èÊñº\n"
                                      "`>=` ‚Äî Â§ßÊñºÊàñÁ≠âÊñº\n"
                                      "`<=` ‚Äî Â∞èÊñºÊàñÁ≠âÊñº\n\n"
                                      "üí° *ÈáçË¶ÅÊèêÁ§∫Ôºö* Âª∫Ë≠∞‰ΩøÁî® `===` Âíå `!==` ‰ª•ÈÅøÂÖçÂõ†È°ûÂûãËΩâÊèõÂºïËµ∑ÁöÑÈåØË™§„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "ferrarir":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="doddo")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="crchemolvkofdovosmcmoe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScriptÔºöËø¥Âúà*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî Áî®‰æÜÈáçË§áÂü∑Ë°å‰∏ÄÊÆµÁ®ãÂºèÁ¢ºÂ§öÊ¨°„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®ÊñºÊìç‰ΩúÈô£Âàó„ÄÅÈáçË§á‰ªªÂãôÂíåËá™ÂãïÂåñ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥Âúà*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî Âç∞Âá∫Âæû 0 Âà∞ 4 ÁöÑÊï∏Â≠ó„ÄÇ\n"
                                      "`i++` Ë°®Á§∫ÊØèÊ¨°Ëø¥ÂúàÂæåË®àÊï∏Âô®Âä† 1„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥Âúà*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî Âè™Ë¶Å `x < 3`ÔºåÂ∞±ÈáçË§áÂü∑Ë°åÂçÄÂ°äÂÖßÁöÑÁ®ãÂºèÁ¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *do...while Ëø¥Âúà*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî ÁÑ°Ë´ñÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºåËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°Á®ãÂºèÁ¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁØÑ‰æãÔºöËø≠‰ª£Èô£ÂàóÂÖÉÁ¥†*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî ÈÄê‰∏ÄËÆÄÂèñÈô£Âàó‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Â∞èÂøÉÈÄ†ÊàêÁÑ°ÈôêËø¥ÂúàÔºàË®òÂæóÊõ¥Êñ∞Ë®àÊï∏Âô®ÔºÅÔºâ\n"
                                      "- ‰ΩøÁî® `break` ÂèØ‰ª•Ë∑≥Âá∫Ëø¥Âúà\n"
                                      "- ‰ΩøÁî® `continue` ÂèØ‰ª•Ë∑≥ÈÅéÊú¨Ê¨°Ëø≠‰ª£\n\n"
                                      "üí° Ëø¥ÂúàÊòØËôïÁêÜË≥áÊñôÁµêÊßãÂíåËá™ÂãïÂåñ‰ªªÂãôÁöÑÈóúÈçµÂ∑•ÂÖ∑ÔºÅ\n"
                                      "Ë©¶Ë©¶ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåÂæû 10 ÂÄíÊï∏Âà∞ 1ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "crchemolvkofdovosmcmoe":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏èÔ∏è", callback_data="ferrarir")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="crzenxoaskxce")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScriptÔºöÈÇèËºØÈÅãÁÆóÂ≠ê*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈÇèËºØÈÅãÁÆóÂ≠êÔºü*\n"
                                      "‚Äî Áî®‰æÜÁµÑÂêàÂ§öÂÄãÊ¢ù‰ª∂Âà§Êñ∑„ÄÇ\n"
                                      "‚Äî ÂèØ‰ª•ÂêåÊôÇÊ™¢Êü•Â§öÂÄãÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ã„ÄÇ\n\n"
                                      "üîπ *Â∏∏Ë¶ãÁöÑÈÇèËºØÈÅãÁÆóÂ≠êÔºö*\n"
                                      "`&&` ‚Äî ‰∏îÔºàÊâÄÊúâÊ¢ù‰ª∂ÈÉΩÂøÖÈ†àÁÇ∫ÁúüÔºâ\n"
                                      "`||` ‚Äî ÊàñÔºàËá≥Â∞ë‰∏ÄÂÄãÊ¢ù‰ª∂ÁÇ∫ÁúüÔºâ\n"
                                      "`!` ‚Äî ÈùûÔºàÂèñÂèçÔºåÊîπËÆäÊ¢ù‰ª∂ÁöÑÁúüÂÅáÔºâ\n\n"
                                      "üîπ *ÁØÑ‰æãÔºö*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"ÂÖÅË®±ÈÄ≤ÂÖ•\");\n} else {\n    console.log(\"ÊãíÁµïÈÄ≤ÂÖ•\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"Áî®Êà∂Èõ¢Á∑ö\");\n}\n```\n\n"
                                      "üí° *ÈáçË¶ÅÊèêÁ§∫Ôºö* Êã¨ËôüÂÑ™ÂÖàË®àÁÆóÔºåÊé•ËëóÊâçÊòØÈÇèËºØÈÅãÁÆó„ÄÇ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "doddo":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="srtdemonessa")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="dislikeeverthynlovevelo")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""‚öôÔ∏è *JavaScriptÔºöÂáΩÂºè‰ªãÁ¥π*\n\n
üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n
‚Äî ÊúâÂêçÂ≠óÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°äÔºåÁî®‰æÜÂü∑Ë°åÁâπÂÆö‰ªªÂãô„ÄÇ\n
‚Äî ‰Ω†ÂèØ‰ª•ÈáçË§áÂëºÂè´ÔºåËÄå‰∏çÈúÄË¶ÅÈáçË§áÊí∞ÂØ´Áõ∏ÂêåÁ®ãÂºèÁ¢º„ÄÇ\n
‚Äî ÂÆÉÊòØÁµêÊßãÂåñÁ®ãÂºèË®≠Ë®àÁöÑÂü∫Á§é„ÄÇ\n\n
üîπ *ÁÇ∫‰ªÄÈ∫ºË¶Å‰ΩøÁî®ÂáΩÂºèÔºü*\n
‚úî ÈÅøÂÖçÈáçË§áÁ®ãÂºèÁ¢º\n
‚úî Â∞áÁ®ãÂºèÂàÜÊàêÈÇèËºØÊ®°ÁµÑ\n
‚úî ÂèØ‰ª•Êé•Êî∂ÂèÉÊï∏ÔºàargumentsÔºâ‰∏¶ÂõûÂÇ≥ÁµêÊûú\n\n
üîπ *Á∞°ÂñÆÁöÑÂáΩÂºèÁØÑ‰æãÔºö*\n
```js
function sayHello() {
  console.log("Hello!");
}

sayHello(); // ÂëºÂè´ÂáΩÂºè
```\n
üí° `sayHello` ÊØèÊ¨°Ë¢´ÂëºÂè´ÊôÇÔºåÊúÉÂç∞Âá∫ "Hello!"„ÄÇ\n\n
üîπ *ÊúâÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n
```js
function greet(name) {
  console.log("Hello, " + name);
}

greet("Tom");
greet("Anna");
```\n
üí° `name` ÂèÉÊï∏ÂÖÅË®±‰Ω†ÂÇ≥ÂÖ•‰∏çÂêåÁöÑÂÄºÔºåÈùàÊ¥ªÊéßÂà∂Ëº∏Âá∫„ÄÇ\n\n
üîπ *ÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºö*\n
```js
function square(number) {
  return number * number;
}

console.log(square(4)); // 16
```\n
üí° `return` Áî®‰æÜÂ∞áÁµêÊûúÂÇ≥ÂõûÔºå‰æõÂÖ∂‰ªñÂú∞Êñπ‰ΩøÁî®„ÄÇ\n\n
üîπ *Ë´ãË®ò‰ΩèÔºö*\n
‚úî ÂáΩÂºèÂøÖÈ†àÂÖàÂÆöÁæ©ÂÜçÂëºÂè´\n
‚úî ÂÖßÈÉ®Á®ãÂºèÁ¢ºÂè™ÊúâÂú®ÂëºÂè´ÊôÇÊâçÊúÉÂü∑Ë°å\n
‚úî ÂèØ‰ª•ÂÇ≥ÂÖ•Â§öÂÄãÂèÉÊï∏\n\n
ÂáΩÂºèËÆì‰Ω†ÁöÑÁ®ãÂºèÁ¢ºÊõ¥‰πæÊ∑®„ÄÅÊõ¥ÊúâÂΩàÊÄßÔºå‰πüÊõ¥ÂÆπÊòìÁ∂≠Ë≠∑ÔºÅ
""",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "dislikeeverthynlovevelo":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="doddo")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="crchemolvkofdovosmcmoe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScriptÔºöËø¥Âúà*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî Áî®‰æÜÈáçË§áÂü∑Ë°å‰∏ÄÊÆµÁ®ãÂºèÁ¢ºÂ§öÊ¨°„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®ÊñºÊìç‰ΩúÈô£Âàó„ÄÅÈáçË§á‰ªªÂãôÂíåËá™ÂãïÂåñ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥Âúà*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî Âç∞Âá∫Âæû 0 Âà∞ 4 ÁöÑÊï∏Â≠ó„ÄÇ\n"
                                      "`i++` Ë°®Á§∫ÊØèÊ¨°Ëø¥ÂúàÂæåË®àÊï∏Âô®Âä† 1„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥Âúà*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî Âè™Ë¶Å `x < 3`ÔºåÂ∞±ÈáçË§áÂü∑Ë°åÂçÄÂ°äÂÖßÁöÑÁ®ãÂºèÁ¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *do...while Ëø¥Âúà*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî ÁÑ°Ë´ñÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºåËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°Á®ãÂºèÁ¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁØÑ‰æãÔºöËø≠‰ª£Èô£ÂàóÂÖÉÁ¥†*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî ÈÄê‰∏ÄËÆÄÂèñÈô£Âàó‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÈÜíÔºö*\n"
                                      "- Â∞èÂøÉÈÄ†ÊàêÁÑ°ÈôêËø¥ÂúàÔºàË®òÂæóÊõ¥Êñ∞Ë®àÊï∏Âô®ÔºÅÔºâ\n"
                                      "- ‰ΩøÁî® `break` ÂèØ‰ª•Ë∑≥Âá∫Ëø¥Âúà\n"
                                      "- ‰ΩøÁî® `continue` ÂèØ‰ª•Ë∑≥ÈÅéÊú¨Ê¨°Ëø≠‰ª£\n\n"
                                      "üí° Ëø¥ÂúàÊòØËôïÁêÜË≥áÊñôÁµêÊßãÂíåËá™ÂãïÂåñ‰ªªÂãôÁöÑÈóúÈçµÂ∑•ÂÖ∑ÔºÅ\n"
                                      "Ë©¶Ë©¶ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåÂæû 10 ÂÄíÊï∏Âà∞ 1ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "srtdemonessa":
        keyboard = [[InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="noanotherpower")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaScriptÔºöÁâ©‰ª∂ (Objects)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÁâ©‰ª∂Ôºü*\n"
                                      "‚Äî Áî®‰æÜÂ≠òÊîæÁõ∏ÈóúË≥áÊñôÂíåÂäüËÉΩÁöÑÁµêÊßã„ÄÇ\n"
                                      "‚Äî ‰ΩøÁî®„ÄåÈçµÔºöÂÄº„ÄçÁöÑÂΩ¢ÂºèÁµÑÊàê„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁâ©‰ª∂ÁØÑ‰æãÔºö*\n"
                                      "```js\n"
                                      "let person = {\n"
                                      "  name: \"Tom\",\n"
                                      "  age: 25,\n"
                                      "  isStudent: true\n"
                                      "};\n"
                                      "```\n"
                                      "üî∏ Â≠òÂèñÂ±¨ÊÄßÔºö\n"
                                      "`person.name` ‚Üí \"Tom\"\n"
                                      "`person[\"age\"]` ‚Üí 25\n\n"
                                      "============================\n"
                                      "üîπ *ÂåÖÂê´ÊñπÊ≥ïÁöÑÁâ©‰ª∂Ôºö*\n"
                                      "```js\n"
                                      "let car = {\n"
                                      "  brand: \"Toyota\",\n"
                                      "  start: function() {\n"
                                      "    console.log(\"ÂºïÊìéÂïüÂãï\");\n"
                                      "  }\n"
                                      "};\n\n"
                                      "car.start();\n"
                                      "```\n"
                                      "============================\n"
                                      "‚úÖ *ÁÇ∫‰ªÄÈ∫º‰ΩøÁî®Áâ©‰ª∂Ôºü*\n"
                                      "- Â∞áË§áÈõúË≥áÊñôÈõÜ‰∏≠ÁÆ°ÁêÜ\n"
                                      "- Ê®°Êì¨ÁèæÂØ¶‰∏ñÁïåÁöÑ‰∫ãÁâ©\n"
                                      "- Âª£Ê≥õÁî®Êñº DOM Êìç‰Ωú„ÄÅAPI ËôïÁêÜÁ≠â\n\n"
                                      "üí° Ë©¶ËëóÂª∫Á´ã‰∏ÄÂÄã \"phone\" Áâ©‰ª∂ÔºåÂåÖÂê´ \"model\"„ÄÅ\"year\" Â±¨ÊÄßËàá \"call()\" ÊñπÊ≥ïÂêßÔºÅ",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "noanotherpower":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°Ô∏è", callback_data="srtdemonessa")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="dislikeeverthynlovevelo")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("""‚öôÔ∏è *JavaScriptÔºöÂáΩÂºè‰ªãÁ¥π*\n\n
        üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n
        ‚Äî ÊúâÂêçÂ≠óÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°äÔºåÁî®‰æÜÂü∑Ë°åÁâπÂÆö‰ªªÂãô„ÄÇ\n
        ‚Äî ‰Ω†ÂèØ‰ª•ÈáçË§áÂëºÂè´ÔºåËÄå‰∏çÈúÄË¶ÅÈáçË§áÊí∞ÂØ´Áõ∏ÂêåÁ®ãÂºèÁ¢º„ÄÇ\n
        ‚Äî ÂÆÉÊòØÁµêÊßãÂåñÁ®ãÂºèË®≠Ë®àÁöÑÂü∫Á§é„ÄÇ\n\n
        üîπ *ÁÇ∫‰ªÄÈ∫ºË¶Å‰ΩøÁî®ÂáΩÂºèÔºü*\n
        ‚úî ÈÅøÂÖçÈáçË§áÁ®ãÂºèÁ¢º\n
        ‚úî Â∞áÁ®ãÂºèÂàÜÊàêÈÇèËºØÊ®°ÁµÑ\n
        ‚úî ÂèØ‰ª•Êé•Êî∂ÂèÉÊï∏ÔºàargumentsÔºâ‰∏¶ÂõûÂÇ≥ÁµêÊûú\n\n
        üîπ *Á∞°ÂñÆÁöÑÂáΩÂºèÁØÑ‰æãÔºö*\n
        ```js
        function sayHello() {
          console.log("Hello!");
        }

        sayHello(); // ÂëºÂè´ÂáΩÂºè
        ```\n
        üí° `sayHello` ÊØèÊ¨°Ë¢´ÂëºÂè´ÊôÇÔºåÊúÉÂç∞Âá∫ "Hello!"„ÄÇ\n\n
        üîπ *ÊúâÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n
        ```js
        function greet(name) {
          console.log("Hello, " + name);
        }

        greet("Tom");
        greet("Anna");
        ```\n
        üí° `name` ÂèÉÊï∏ÂÖÅË®±‰Ω†ÂÇ≥ÂÖ•‰∏çÂêåÁöÑÂÄºÔºåÈùàÊ¥ªÊéßÂà∂Ëº∏Âá∫„ÄÇ\n\n
        üîπ *ÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºö*\n
        ```js
        function square(number) {
          return number * number;
        }

        console.log(square(4)); // 16
        ```\n
        üí° `return` Áî®‰æÜÂ∞áÁµêÊûúÂÇ≥ÂõûÔºå‰æõÂÖ∂‰ªñÂú∞Êñπ‰ΩøÁî®„ÄÇ\n\n
        üîπ *Ë´ãË®ò‰ΩèÔºö*\n
        ‚úî ÂáΩÂºèÂøÖÈ†àÂÖàÂÆöÁæ©ÂÜçÂëºÂè´\n
        ‚úî ÂÖßÈÉ®Á®ãÂºèÁ¢ºÂè™ÊúâÂú®ÂëºÂè´ÊôÇÊâçÊúÉÂü∑Ë°å\n
        ‚úî ÂèØ‰ª•ÂÇ≥ÂÖ•Â§öÂÄãÂèÉÊï∏\n\n
        ÂáΩÂºèËÆì‰Ω†ÁöÑÁ®ãÂºèÁ¢ºÊõ¥‰πæÊ∑®„ÄÅÊõ¥ÊúâÂΩàÊÄßÔºå‰πüÊõ¥ÂÆπÊòìÁ∂≠Ë≠∑ÔºÅ
        """,
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "java_start":
        keyboard = [[InlineKeyboardButton("‚òï ÈñãÂßãÂ≠∏Áøí Java", callback_data="valley")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Java", reply_markup=reply_markup)
    elif query.data == "valley":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="rebirtha")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *JavaÔºöÂÆâË£ùËàáÂª∫Á´ãÁ¨¨‰∏ÄÂÄãÈ†ÖÁõÆ*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâ‰∏¶ÂÆâË£ù JDK*\n"
                                      "[üîó ÂÆòÊñπ‰∏ãËºâÈ†ÅÈù¢](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî Ë´ãÈÅ∏ÊìáÈÅ©Âêà‰Ω†‰ΩúÊ•≠Á≥ªÁµ±ÁöÑ Java SE Development Kit (JDK)\n"
                                      "‚Äî ÂÆâË£ùÊôÇË´ãÂãæÈÅ∏ `Add JAVA to PATH`ÔºàËã•ÊúâÈÅ∏È†ÖÔºâ\n\n"
                                      "üîπ *Ê≠•È©ü 2ÔºöÈ©óË≠âÂÆâË£ùÊòØÂê¶ÊàêÂäü*\n"
                                      "ÊâìÈñãÁµÇÁ´ØÊ©üÔºàÂëΩ‰ª§ÊèêÁ§∫Â≠óÂÖÉÔºâÔºåËº∏ÂÖ•Ôºö\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "Ëã•Âá∫ÁèæÁâàÊú¨Ë≥áË®äÔºå‰ª£Ë°®ÂÆâË£ùÊàêÂäüÔºÅ\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÂÆâË£ùÈñãÁôºÂ∑•ÂÖ∑ÔºàIDEÔºâ*\n"
                                      "‚úÖ [IntelliJ IDEA CommunityÔºàÊé®Ëñ¶Ôºâ](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Êì¥ÂÖÖÂ•ó‰ª∂](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Ê≠•È©ü 4ÔºöÂØ´‰∏ã‰Ω†ÁöÑÁ¨¨‰∏ÄÊÆµ Java Á®ãÂºèÁ¢ºÔºÅ*\n"
                                      "Âª∫Á´ã‰∏ÄÂÄãÂêçÁÇ∫ `Main.java` ÁöÑÊ™îÊ°àÔºåËº∏ÂÖ•Ôºö\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Êé•ËëóÂú®ÁµÇÁ´ØÊ©üÂü∑Ë°åÔºö\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ È†êÊúüËº∏Âá∫Ôºö`Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *‰Ω†Â∑≤Á∂ìÊ∫ñÂÇôÂ•ΩÈñãÂßãÂ≠∏Áøí JavaÔºÅ*\n"
                                      "Êé•‰∏ã‰æÜÂ∞áÂ≠∏ÁøíÔºöËÆäÊï∏„ÄÅÊ¢ù‰ª∂Âà§Êñ∑„ÄÅËø¥Âúà„ÄÅÂáΩÂºèËàáÁâ©‰ª∂Â∞éÂêëÁ®ãÂºèË®≠Ë®àÔºÅ\n\n"
                                      "üëá ÈªûÊìä‰∏ãÊñπÊåâÈàïÔºåÈñãÂßã‰∏ã‰∏ÄË™≤ÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "rebirtha":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silikone")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="racecurse")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaÔºöËÆäÊï∏ËàáË≥áÊñôÂûãÂà•*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî ËÆäÊï∏ÊòØÁî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÂ≠ó„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãËÆäÊï∏ÂøÖÈ†àÂÖàÂÆöÁæ©ÂÆÉÁöÑË≥áÊñôÂûãÂà•„ÄÇ\n\n"
                                      "üîπ *Âü∫Êú¨Ë≥áÊñôÂûãÂà•Ôºö*\n"
                                      "- `int`ÔºöÊï¥Êï∏ÔºåÂ¶Ç `42`\n"
                                      "- `double`ÔºöÂ∞èÊï∏ÔºåÂ¶Ç `3.14`\n"
                                      "- `char`ÔºöÂñÆ‰∏ÄÂ≠óÂÖÉÔºåÂ¶Ç `'A'`\n"
                                      "- `boolean`ÔºöÈÇèËºØÂÄºÔºå`true` Êàñ `false`\n"
                                      "- `String`ÔºöÂ≠ó‰∏≤ÔºåÂ¶Ç `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *ÂÆ£ÂëäËàá‰ΩøÁî®ËÆäÊï∏Ôºö*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ ‰ΩøÁî® `System.out.println()` Âç∞Âá∫ËÆäÊï∏Ôºö\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ Ëº∏Âá∫Ôºö\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Â∞èÊèêÈÜíÔºö*\n"
                                      "- Java ÊòØÂº∑ÂûãÂà•Ë™ûË®ÄÔºåÊØèÂÄãËÆäÊï∏ÈÉΩË¶ÅÂÆöÁæ©ÂûãÂà•„ÄÇ\n"
                                      "- ËÆäÊï∏ÂêçÁ®±ÂçÄÂàÜÂ§ßÂ∞èÂØ´Ôºö`Name` ‚â† `name`\n"
                                      "- ÂëΩÂêçË´ãÊ∏ÖÊ•öÔºö`int n = 5;` ‚ùåÔºå`int score = 5;` ‚úÖ\n\n"
                                      "üí° ÂòóË©¶ÂÆ£Âëä‰∏Ä‰∫õËá™Â∑±ÁöÑËÆäÊï∏Ôºå‰∏¶Áî® `System.out.println()` Âç∞Âá∫‰æÜÂêßÔºÅ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "racecurse":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="rebirtha")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *JavaÔºöÂÆâË£ùËàáÂª∫Á´ãÁ¨¨‰∏ÄÂÄãÈ†ÖÁõÆ*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâ‰∏¶ÂÆâË£ù JDK*\n"
                                      "[üîó ÂÆòÊñπ‰∏ãËºâÈ†ÅÈù¢](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî Ë´ãÈÅ∏ÊìáÈÅ©Âêà‰Ω†‰ΩúÊ•≠Á≥ªÁµ±ÁöÑ Java SE Development Kit (JDK)\n"
                                      "‚Äî ÂÆâË£ùÊôÇË´ãÂãæÈÅ∏ `Add JAVA to PATH`ÔºàËã•ÊúâÈÅ∏È†ÖÔºâ\n\n"
                                      "üîπ *Ê≠•È©ü 2ÔºöÈ©óË≠âÂÆâË£ùÊòØÂê¶ÊàêÂäü*\n"
                                      "ÊâìÈñãÁµÇÁ´ØÊ©üÔºàÂëΩ‰ª§ÊèêÁ§∫Â≠óÂÖÉÔºâÔºåËº∏ÂÖ•Ôºö\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "Ëã•Âá∫ÁèæÁâàÊú¨Ë≥áË®äÔºå‰ª£Ë°®ÂÆâË£ùÊàêÂäüÔºÅ\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÂÆâË£ùÈñãÁôºÂ∑•ÂÖ∑ÔºàIDEÔºâ*\n"
                                      "‚úÖ [IntelliJ IDEA CommunityÔºàÊé®Ëñ¶Ôºâ](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Êì¥ÂÖÖÂ•ó‰ª∂](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Ê≠•È©ü 4ÔºöÂØ´‰∏ã‰Ω†ÁöÑÁ¨¨‰∏ÄÊÆµ Java Á®ãÂºèÁ¢ºÔºÅ*\n"
                                      "Âª∫Á´ã‰∏ÄÂÄãÂêçÁÇ∫ `Main.java` ÁöÑÊ™îÊ°àÔºåËº∏ÂÖ•Ôºö\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Êé•ËëóÂú®ÁµÇÁ´ØÊ©üÂü∑Ë°åÔºö\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ È†êÊúüËº∏Âá∫Ôºö`Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *‰Ω†Â∑≤Á∂ìÊ∫ñÂÇôÂ•ΩÈñãÂßãÂ≠∏Áøí JavaÔºÅ*\n"
                                      "Êé•‰∏ã‰æÜÂ∞áÂ≠∏ÁøíÔºöËÆäÊï∏„ÄÅÊ¢ù‰ª∂Âà§Êñ∑„ÄÅËø¥Âúà„ÄÅÂáΩÂºèËàáÁâ©‰ª∂Â∞éÂêëÁ®ãÂºèË®≠Ë®àÔºÅ\n\n"
                                      "üëá ÈªûÊìä‰∏ãÊñπÊåâÈàïÔºåÈñãÂßã‰∏ã‰∏ÄË™≤ÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "silikone":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silikon")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="lewiskasdkknknwoe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Ê¢ù‰ª∂Ë™ûÂè• (if, else, else if)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ë™ûÂè•Ôºü*\n"
                                      "‚Äî ËÆìÁ®ãÂºèÊ†πÊìö‰∏çÂêåÊ¢ù‰ª∂Âü∑Ë°å‰∏çÂêåÁöÑ‰ª£Á¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁØÑ‰æã‰ª£Á¢º:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÊàêÂπ¥‰∫∫\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÂ∞èÂ≠©\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÊØîËºÉÈÅãÁÆóÁ¨¶:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *ÈÇèËºØÈÅãÁÆóÁ¨¶:* `&&` (‰∏î), `||` (Êàñ), `!` (Èùû)\n\n"
                                      "‚úÖ *Ë©¶Ë©¶ÁúãÔºö*\n"
                                      "ÂØ´‰∏ÄÊÆµÁ®ãÂºèÔºåÊ†πÊìöÂπ¥ÈΩ°Ëº∏Âá∫Â∞çÊáâË®äÊÅØÔºÅ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "lewiskasdkknknwoe":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silikone")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="racecurse")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaÔºöËÆäÊï∏ËàáË≥áÊñôÂûãÂà•*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî ËÆäÊï∏ÊòØÁî®‰æÜÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÂ≠ó„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãËÆäÊï∏ÂøÖÈ†àÂÖàÂÆöÁæ©ÂÆÉÁöÑË≥áÊñôÂûãÂà•„ÄÇ\n\n"
                                      "üîπ *Âü∫Êú¨Ë≥áÊñôÂûãÂà•Ôºö*\n"
                                      "- `int`ÔºöÊï¥Êï∏ÔºåÂ¶Ç `42`\n"
                                      "- `double`ÔºöÂ∞èÊï∏ÔºåÂ¶Ç `3.14`\n"
                                      "- `char`ÔºöÂñÆ‰∏ÄÂ≠óÂÖÉÔºåÂ¶Ç `'A'`\n"
                                      "- `boolean`ÔºöÈÇèËºØÂÄºÔºå`true` Êàñ `false`\n"
                                      "- `String`ÔºöÂ≠ó‰∏≤ÔºåÂ¶Ç `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *ÂÆ£ÂëäËàá‰ΩøÁî®ËÆäÊï∏Ôºö*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ ‰ΩøÁî® `System.out.println()` Âç∞Âá∫ËÆäÊï∏Ôºö\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ Ëº∏Âá∫Ôºö\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Â∞èÊèêÈÜíÔºö*\n"
                                      "- Java ÊòØÂº∑ÂûãÂà•Ë™ûË®ÄÔºåÊØèÂÄãËÆäÊï∏ÈÉΩË¶ÅÂÆöÁæ©ÂûãÂà•„ÄÇ\n"
                                      "- ËÆäÊï∏ÂêçÁ®±ÂçÄÂàÜÂ§ßÂ∞èÂØ´Ôºö`Name` ‚â† `name`\n"
                                      "- ÂëΩÂêçË´ãÊ∏ÖÊ•öÔºö`int n = 5;` ‚ùåÔºå`int score = 5;` ‚úÖ\n\n"
                                      "üí° ÂòóË©¶ÂÆ£Âëä‰∏Ä‰∫õËá™Â∑±ÁöÑËÆäÊï∏Ôºå‰∏¶Áî® `System.out.println()` Âç∞Âá∫‰æÜÂêßÔºÅ",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "silikon":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silik")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="vistoriyuonvikladivayetgrustniyeblete")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: Ëø¥Âúà (Loops)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî ËÆìÁ®ãÂºèÈáçË§áÂü∑Ë°åÊüêÊÆµ‰ª£Á¢ºÔºåÁõ¥Âà∞Ê¢ù‰ª∂‰∏çÊàêÁ´ã„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®ÊñºËôïÁêÜÈáçË§á‰ªªÂãôÂíåÈÅçÊ≠∑Ë≥áÊñô„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Ëº∏Âá∫ 0 Âà∞ 4„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *do...while Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî ÁÑ°Ë´ñÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºåËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÁ§∫:*\n"
                                      "- Â∞èÂøÉÈÅøÂÖçÁÑ°ÈôêËø¥Âúà\n"
                                      "- ‰ΩøÁî® `break` ÁµÇÊ≠¢Ëø¥Âúà\n"
                                      "- ‰ΩøÁî® `continue` Ë∑≥ÈÅéÊú¨Ê¨°Ëø¥Âúà\n\n"
                                      "üí° ÂòóË©¶ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåÂæû 10 ÂÄíÊï∏Âà∞ 1ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "vistoriyuonvikladivayetgrustniyeblete":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silikon")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="lewiskasdkknknwoe")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Ê¢ù‰ª∂Ë™ûÂè• (if, else, else if)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Ë™ûÂè•Ôºü*\n"
                                      "‚Äî ËÆìÁ®ãÂºèÊ†πÊìö‰∏çÂêåÊ¢ù‰ª∂Âü∑Ë°å‰∏çÂêåÁöÑ‰ª£Á¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁØÑ‰æã‰ª£Á¢º:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÊàêÂπ¥‰∫∫\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÈùíÂ∞ëÂπ¥\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"‰Ω†ÊòØÂ∞èÂ≠©\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÊØîËºÉÈÅãÁÆóÁ¨¶:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *ÈÇèËºØÈÅãÁÆóÁ¨¶:* `&&` (‰∏î), `||` (Êàñ), `!` (Èùû)\n\n"
                                      "‚úÖ *Ë©¶Ë©¶ÁúãÔºö*\n"
                                      "ÂØ´‰∏ÄÊÆµÁ®ãÂºèÔºåÊ†πÊìöÂπ¥ÈΩ°Ëº∏Âá∫Â∞çÊáâË®äÊÅØÔºÅ",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "silik":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="siuu")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="tictoxocesnaveshatinogdaddedushku")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaÔºöÈô£Âàó (Arrays)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈô£ÂàóÔºü*\n"
                                      "‚Äî Èô£ÂàóÊòØÂêåÈ°ûÂûãÂÖÉÁ¥†ÁöÑÈõÜÂêàÔºåÈ†ÜÂ∫èÊéíÂàó‰∏¶ÂÑ≤Â≠òÂú®Ë®òÊÜ∂È´î‰∏≠„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãÂÖÉÁ¥†ÈÉΩÊúâÁ¥¢ÂºïÔºàÂæû 0 ÈñãÂßãÔºâ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Âª∫Á´ã‰∏ÄÂÄãÊï¥Êï∏Èô£ÂàóÔºö*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî Âª∫Á´ãÂê´Êúâ 5 ÂÄãÊï¥Êï∏ÁöÑÈô£Âàó„ÄÇ\n\n"
                                      "üî∏ ÂèñÂæóÂÖÉÁ¥†Ôºö\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Áî® for Ëø¥ÂúàËº∏Âá∫ÊâÄÊúâÂÖÉÁ¥†Ôºö*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî ‰ΩøÁî® `numbers.length` Ë°®Á§∫Èô£ÂàóÈï∑Â∫¶„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÂæûÁî®Êà∂Ëº∏ÂÖ•ÂÖÉÁ¥†Ôºö*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî ÂÑ≤Â≠òÁî®Êà∂Ëº∏ÂÖ•ÁöÑ 3 ÂÄãÊï∏Â≠ó„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçÈªûÊèêÁ§∫Ôºö*\n"
                                      "- Á¥¢ÂºïÂæû `0` Âà∞ `n - 1`\n"
                                      "- Èô£ÂàóÂ§ßÂ∞è‰∏çÂèØËÆä\n"
                                      "- Ë∂ÖÂá∫Á¥¢ÂºïÁØÑÂúçÊúÉÂ∞éËá¥ÈåØË™§ (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Èô£ÂàóÊòØÂ≠∏ÁøíË≥áÊñôÁµêÊßã„ÄÅÊéíÂ∫èËàáÊºîÁÆóÊ≥ïÁöÑËµ∑ÈªûÔºÅË©¶Ë©¶ÂØ´‰∏ÄÂÄãÈô£Âàó‰∏¶È°ØÁ§∫ÂÆÉÁöÑÂÖßÂÆπÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "tictoxocesnaveshatinogdaddedushku":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="silik")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="vistoriyuonvikladivayetgrustniyeblete")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: Ëø¥Âúà (Loops)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî ËÆìÁ®ãÂºèÈáçË§áÂü∑Ë°åÊüêÊÆµ‰ª£Á¢ºÔºåÁõ¥Âà∞Ê¢ù‰ª∂‰∏çÊàêÁ´ã„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®ÊñºËôïÁêÜÈáçË§á‰ªªÂãôÂíåÈÅçÊ≠∑Ë≥áÊñô„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *for Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Ëº∏Âá∫ 0 Âà∞ 4„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *while Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *do...while Ëø¥ÂúàÁØÑ‰æã:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî ÁÑ°Ë´ñÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºåËá≥Â∞ëÂü∑Ë°å‰∏ÄÊ¨°„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçË¶ÅÊèêÁ§∫:*\n"
                                      "- Â∞èÂøÉÈÅøÂÖçÁÑ°ÈôêËø¥Âúà\n"
                                      "- ‰ΩøÁî® `break` ÁµÇÊ≠¢Ëø¥Âúà\n"
                                      "- ‰ΩøÁî® `continue` Ë∑≥ÈÅéÊú¨Ê¨°Ëø¥Âúà\n\n"
                                      "üí° ÂòóË©¶ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåÂæû 10 ÂÄíÊï∏Âà∞ 1ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "siuu":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="suii")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="odinbiznesmenustavsiyotsvoyegostarika")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *JavaÔºöÊñπÊ≥ïÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊñπÊ≥ïÔºü*\n"
                                      "‚Äî ÊñπÊ≥ïÔºàMethodÔºâÊòØ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî ‰Ω†ÂèØ‰ª•Â§öÊ¨°ÂëºÂè´ÂÆÉÔºåËÄå‰∏çÈúÄÈáçË§áÂØ´‰ª£Á¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁÇ∫‰ªÄÈ∫ºË¶Å‰ΩøÁî®ÊñπÊ≥ïÔºü*\n"
                                      "‚úîÔ∏è ÈÅøÂÖçÈáçË§á‰ª£Á¢º\n"
                                      "‚úîÔ∏è Á®ãÂºèÊõ¥Ê∏ÖÊô∞„ÄÅÊòìÊñºÁ∂≠Ë≠∑\n"
                                      "‚úîÔ∏è ÂèØ‰ª•Êé•Êî∂ÂèÉÊï∏‰∏¶ÂÇ≥ÂõûÁµêÊûú\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁØÑ‰æãÔºö*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"‰Ω†Â•ΩÔºÅ\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // ÂëºÂè´ÊñπÊ≥ï\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `sayHello` ÊñπÊ≥ïÊúÉÂç∞Âá∫ \"‰Ω†Â•ΩÔºÅ\"„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÊñπÊ≥ïÔºö*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"‰Ω†Â•Ω, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Â∞èÊòé\");\n"
                                      "```\n"
                                      "‚Äî ÂèÉÊï∏ËÆìÊñπÊ≥ïËÆäÂæóÊõ¥ÈùàÊ¥ª„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÊúâÂõûÂÇ≥ÂÄºÁöÑÊñπÊ≥ïÔºö*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî ‰ΩøÁî® `return` ÂõûÂÇ≥Ë®àÁÆóÁµêÊûú„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *Ë®ò‰ΩèÔºö*\n"
                                      "- ÊâÄÊúâÊñπÊ≥ïÂøÖÈ†àÊîæÂú®È°ûÂà•ÔºàclassÔºâ‰∏≠\n"
                                      "- `main()` ÊòØÁ®ãÂºèÁöÑÈÄ≤ÂÖ•Èªû\n"
                                      "- `void` Ë°®Á§∫‰∏çÂõûÂÇ≥‰ªª‰ΩïË≥áÊñô\n\n"
                                      "üí° ÂòóË©¶Ëá™Â∑±ÂØ´‰∏ÄÂÄãÊñπÊ≥ïÔºåÂç∞Âá∫‰Ω†ÁöÑÂêçÂ≠óÊàñË®àÁÆóÂÖ©Êï∏Áõ∏Âä†ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "odinbiznesmenustavsiyotsvoyegostarika":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="siuu")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="tictoxocesnaveshatinogdaddedushku")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaÔºöÈô£Âàó (Arrays)*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈô£ÂàóÔºü*\n"
                                      "‚Äî Èô£ÂàóÊòØÂêåÈ°ûÂûãÂÖÉÁ¥†ÁöÑÈõÜÂêàÔºåÈ†ÜÂ∫èÊéíÂàó‰∏¶ÂÑ≤Â≠òÂú®Ë®òÊÜ∂È´î‰∏≠„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãÂÖÉÁ¥†ÈÉΩÊúâÁ¥¢ÂºïÔºàÂæû 0 ÈñãÂßãÔºâ„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Âª∫Á´ã‰∏ÄÂÄãÊï¥Êï∏Èô£ÂàóÔºö*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî Âª∫Á´ãÂê´Êúâ 5 ÂÄãÊï¥Êï∏ÁöÑÈô£Âàó„ÄÇ\n\n"
                                      "üî∏ ÂèñÂæóÂÖÉÁ¥†Ôºö\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Áî® for Ëø¥ÂúàËº∏Âá∫ÊâÄÊúâÂÖÉÁ¥†Ôºö*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî ‰ΩøÁî® `numbers.length` Ë°®Á§∫Èô£ÂàóÈï∑Â∫¶„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÂæûÁî®Êà∂Ëº∏ÂÖ•ÂÖÉÁ¥†Ôºö*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî ÂÑ≤Â≠òÁî®Êà∂Ëº∏ÂÖ•ÁöÑ 3 ÂÄãÊï∏Â≠ó„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *ÈáçÈªûÊèêÁ§∫Ôºö*\n"
                                      "- Á¥¢ÂºïÂæû `0` Âà∞ `n - 1`\n"
                                      "- Èô£ÂàóÂ§ßÂ∞è‰∏çÂèØËÆä\n"
                                      "- Ë∂ÖÂá∫Á¥¢ÂºïÁØÑÂúçÊúÉÂ∞éËá¥ÈåØË™§ (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Èô£ÂàóÊòØÂ≠∏ÁøíË≥áÊñôÁµêÊßã„ÄÅÊéíÂ∫èËàáÊºîÁÆóÊ≥ïÁöÑËµ∑ÈªûÔºÅË©¶Ë©¶ÂØ´‰∏ÄÂÄãÈô£Âàó‰∏¶È°ØÁ§∫ÂÆÉÁöÑÂÖßÂÆπÂêßÔºÅ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "suii":
        keyboard = [[InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="etojonnyetomoysinle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üèóÔ∏è *JavaÔºöÈ°ûÂà•ËàáÁâ©‰ª∂ÔºàClass & ObjectÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈ°ûÂà•Ôºü*\n"
                                      "‚Äî È°ûÂà•ÊòØ‰∏ÄÁ®ÆËóçÂúñÔºåÁî®‰æÜÂâµÂª∫Áâ©‰ª∂„ÄÇ\n"
                                      "‚Äî ÂÆÉÂÆöÁæ©‰∫ÜÁâ©‰ª∂ÁöÑÂ±¨ÊÄßÔºàË≥áÊñôÔºâËàáË°åÁÇ∫ÔºàÊñπÊ≥ïÔºâ„ÄÇ\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÁâ©‰ª∂Ôºü*\n"
                                      "‚Äî ÊòØ‰æùÊìöÈ°ûÂà•Âª∫Á´ãÁöÑÂØ¶È´îÔºåÊòØÁ®ãÂºè‰∏≠ÁöÑÂØ¶ÈöõÊàêÂì°„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁØÑ‰æãÔºö*\n"
                                      "```java\n"
                                      "public class Dog {\n"
                                      "    String name;\n"
                                      "    int age;\n\n"
                                      "    void bark() {\n"
                                      "        System.out.println(name + \"ÔºöÊ±™Ê±™ÔºÅ\");\n"
                                      "    }\n"
                                      "}\n\n"
                                      "public class Main {\n"
                                      "    public static void main(String[] args) {\n"
                                      "        Dog myDog = new Dog();\n"
                                      "        myDog.name = \"Â∞èÈªë\";\n"
                                      "        myDog.age = 3;\n"
                                      "        myDog.bark();\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî È°ûÂà• `Dog` ÊúâÂÖ©ÂÄãÂ±¨ÊÄßÂíå‰∏ÄÂÄãÊñπÊ≥ï„ÄÇ\n"
                                      "‚Äî `myDog` ÊòØ `Dog` ÁöÑÁâ©‰ª∂ÔºåÂèØ‰ª•ÂëºÂè´ÊñπÊ≥ïËàáË®≠ÂÄº„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÈáçË¶ÅÊ¶ÇÂøµÔºö*\n"
                                      "- È°ûÂà•ÂêçË¶ÅÂ§ßÂØ´Ôºö`Person`, `Car`, `Animal` Á≠â\n"
                                      "- `new` Áî®‰æÜÂâµÂª∫Áâ©‰ª∂\n"
                                      "- ÊñπÊ≥ïÂÖßÂèØÂ≠òÂèñË©≤Áâ©‰ª∂ÁöÑÂ±¨ÊÄß\n\n"
                                      "‚úÖ *È°ûÂà•ËàáÁâ©‰ª∂ÊòØ Java ÁöÑÊ†∏ÂøÉ*\n"
                                      "‚Äî Âπæ‰πéÊâÄÊúâ Java Á®ãÂºèÈÉΩÊòØ‰ª•Áâ©‰ª∂ÁÇ∫‰∏≠ÂøÉ‰æÜË®≠Ë®àÔºÅ\n\n"
                                      "üí° Êé•‰∏ã‰æÜÊàëÂÄëÊúÉÊ∑±ÂÖ•Â≠∏ÁøíÂª∫ÊßãÂ≠ê„ÄÅÂ∞ÅË£ù„ÄÅÁπºÊâøËàáÂ§öÂûãÔºÅüöÄ",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "etojonnyetomoysinle":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="suii")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="odinbiznesmenustavsiyotsvoyegostarika")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *JavaÔºöÊñπÊ≥ïÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊñπÊ≥ïÔºü*\n"
                                      "‚Äî ÊñπÊ≥ïÔºàMethodÔºâÊòØ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî ‰Ω†ÂèØ‰ª•Â§öÊ¨°ÂëºÂè´ÂÆÉÔºåËÄå‰∏çÈúÄÈáçË§áÂØ´‰ª£Á¢º„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÁÇ∫‰ªÄÈ∫ºË¶Å‰ΩøÁî®ÊñπÊ≥ïÔºü*\n"
                                      "‚úîÔ∏è ÈÅøÂÖçÈáçË§á‰ª£Á¢º\n"
                                      "‚úîÔ∏è Á®ãÂºèÊõ¥Ê∏ÖÊô∞„ÄÅÊòìÊñºÁ∂≠Ë≠∑\n"
                                      "‚úîÔ∏è ÂèØ‰ª•Êé•Êî∂ÂèÉÊï∏‰∏¶ÂÇ≥ÂõûÁµêÊûú\n\n"
                                      "============================\n"
                                      "üîπ *Á∞°ÂñÆÁØÑ‰æãÔºö*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"‰Ω†Â•ΩÔºÅ\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // ÂëºÂè´ÊñπÊ≥ï\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `sayHello` ÊñπÊ≥ïÊúÉÂç∞Âá∫ \"‰Ω†Â•ΩÔºÅ\"„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÊñπÊ≥ïÔºö*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"‰Ω†Â•Ω, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Â∞èÊòé\");\n"
                                      "```\n"
                                      "‚Äî ÂèÉÊï∏ËÆìÊñπÊ≥ïËÆäÂæóÊõ¥ÈùàÊ¥ª„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *ÊúâÂõûÂÇ≥ÂÄºÁöÑÊñπÊ≥ïÔºö*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî ‰ΩøÁî® `return` ÂõûÂÇ≥Ë®àÁÆóÁµêÊûú„ÄÇ\n\n"
                                      "============================\n"
                                      "‚úÖ *Ë®ò‰ΩèÔºö*\n"
                                      "- ÊâÄÊúâÊñπÊ≥ïÂøÖÈ†àÊîæÂú®È°ûÂà•ÔºàclassÔºâ‰∏≠\n"
                                      "- `main()` ÊòØÁ®ãÂºèÁöÑÈÄ≤ÂÖ•Èªû\n"
                                      "- `void` Ë°®Á§∫‰∏çÂõûÂÇ≥‰ªª‰ΩïË≥áÊñô\n\n"
                                      "üí° ÂòóË©¶Ëá™Â∑±ÂØ´‰∏ÄÂÄãÊñπÊ≥ïÔºåÂç∞Âá∫‰Ω†ÁöÑÂêçÂ≠óÊàñË®àÁÆóÂÖ©Êï∏Áõ∏Âä†ÔºÅüöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "huggywug":
        keyboard = [[InlineKeyboardButton("ÈñãÂßãÂêßÔºÅ \n„Äå„Äç*Á¨¨ 1 Á´†Ôºö*", callback_data="yveskarlinaka")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<<>>", reply_markup=reply_markup)
    elif query.data == "yveskarlinaka":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="mybau")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *ÂÆâË£ù C ËàáË®≠ÂÆö CLion IDE*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâ MinGW Á∑®Ë≠ØÂô®*\n"
                                      "[‰∏ãËºâ MinGW](https://sourceforge.net/projects/mingw/) ‚Äî ÂÆâË£ù `gcc` ‰∏¶Â∞á `bin` Ë≥áÊñôÂ§æÂä†ÂÖ•Á≥ªÁµ±Áí∞Â¢ÉËÆäÊï∏ PATH\n\n"
                                      "üîπ *Ê≠•È©ü 2Ôºö‰∏ãËºâ CLion IDE*\n"
                                      "[‰∏ãËºâ CLion](https://www.jetbrains.com/clion/download/) ‚Äî ÂÆâË£ùÁ§æÁæ§ÁâàÊàñË©¶Áî®Áâà\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÈ©óË≠âÂÆâË£ùÊòØÂê¶ÊàêÂäü*\n"
                                      "ÊâìÈñãÁµÇÁ´ØÊ©ü‰∏¶Âü∑Ë°åÔºö\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Ê≠•È©ü 4ÔºöÊí∞ÂØ´‰∏ÄÂÄãÁ∞°ÂñÆÁöÑ C Á®ãÂºè*\n"
                                      "Âª∫Á´ãÂêçÁÇ∫ `main.c` ÁöÑÊ™îÊ°àÔºåËº∏ÂÖ•‰ª•‰∏ãÁ®ãÂºèÁ¢ºÔºö\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Ê≠•È©ü 5ÔºöÁ∑®Ë≠Ø‰∏¶Âü∑Ë°åÁ®ãÂºè*\n"
                                      "Âú®ÁµÇÁ´ØÊ©üËº∏ÂÖ•Ôºö\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Êé•ËëóÂü∑Ë°åÔºö\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *Á¢∫Ë™çËº∏Âá∫Ôºö*\n"
                                      "‰Ω†ÊáâË©≤ÊúÉÁúãÂà∞Ôºö\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "mybau":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="sixthousand")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="blyatutebyanetpravle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C Ë™ûË®Ä‰∏≠ÁöÑËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî Áî®‰æÜÂú®Ë®òÊÜ∂È´î‰∏≠ÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÁ®±„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãËÆäÊï∏ÈÉΩÊúâ‰∏ÄÂÄãË≥áÊñôÂûãÊÖãÔºåÊ±∫ÂÆöÂÆÉÊâÄÂÑ≤Â≠òÁöÑË≥áÊñôÁ®ÆÈ°û„ÄÇ\n\n"
                                      "üîπ *Â∏∏Ë¶ãÁöÑË≥áÊñôÂûãÊÖãÔºö*\n"
                                      "- `int` ‚Äî Êï¥Êï∏Ôºå‰æãÂ¶ÇÔºö`42`\n"
                                      "- `float` ‚Äî ÊµÆÈªûÊï∏Ôºå‰æãÂ¶ÇÔºö`3.14`\n"
                                      "- `char` ‚Äî ÂñÆ‰∏ÄÂ≠óÂÖÉÔºå‰æãÂ¶ÇÔºö`'A'`\n"
                                      "- `double` ‚Äî Êõ¥Á≤æÁ¢∫ÁöÑÊµÆÈªûÊï∏\n\n"
                                      "============================\n"
                                      "üîπ *ÂÆ£ÂëäËÆäÊï∏Ôºö*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Ëº∏Âá∫Âà∞Ëû¢ÂπïÔºö*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Âπ¥ÈΩ°: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö* ÂÆ£ÂëäÂπæÂÄãËÆäÊï∏‰∏¶Ëº∏Âá∫ÂÆÉÂÄëÁöÑÂÄºÂêßÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "blyatutebyanetpravle":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="mybau")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *ÂÆâË£ù C ËàáË®≠ÂÆö CLion IDE*\n\n"
                                      "üîπ *Ê≠•È©ü 1Ôºö‰∏ãËºâ MinGW Á∑®Ë≠ØÂô®*\n"
                                      "[‰∏ãËºâ MinGW](https://sourceforge.net/projects/mingw/) ‚Äî ÂÆâË£ù `gcc` ‰∏¶Â∞á `bin` Ë≥áÊñôÂ§æÂä†ÂÖ•Á≥ªÁµ±Áí∞Â¢ÉËÆäÊï∏ PATH\n\n"
                                      "üîπ *Ê≠•È©ü 2Ôºö‰∏ãËºâ CLion IDE*\n"
                                      "[‰∏ãËºâ CLion](https://www.jetbrains.com/clion/download/) ‚Äî ÂÆâË£ùÁ§æÁæ§ÁâàÊàñË©¶Áî®Áâà\n\n"
                                      "üîπ *Ê≠•È©ü 3ÔºöÈ©óË≠âÂÆâË£ùÊòØÂê¶ÊàêÂäü*\n"
                                      "ÊâìÈñãÁµÇÁ´ØÊ©ü‰∏¶Âü∑Ë°åÔºö\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Ê≠•È©ü 4ÔºöÊí∞ÂØ´‰∏ÄÂÄãÁ∞°ÂñÆÁöÑ C Á®ãÂºè*\n"
                                      "Âª∫Á´ãÂêçÁÇ∫ `main.c` ÁöÑÊ™îÊ°àÔºåËº∏ÂÖ•‰ª•‰∏ãÁ®ãÂºèÁ¢ºÔºö\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Ê≠•È©ü 5ÔºöÁ∑®Ë≠Ø‰∏¶Âü∑Ë°åÁ®ãÂºè*\n"
                                      "Âú®ÁµÇÁ´ØÊ©üËº∏ÂÖ•Ôºö\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Êé•ËëóÂü∑Ë°åÔºö\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *Á¢∫Ë™çËº∏Âá∫Ôºö*\n"
                                      "‰Ω†ÊáâË©≤ÊúÉÁúãÂà∞Ôºö\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "sixthousand":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="idgaf")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="cposlsacmmcnjfdie")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Ë™ûË®Ä‰∏≠ÁöÑÈÅãÁÆóÂ≠êËàáÈÅãÁÆóÂºè*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈÅãÁÆóÂ≠êÔºü*\n"
                                      "‚Äî Áî®‰æÜÂ∞çË≥áÊñôÂü∑Ë°åÊìç‰ΩúÁöÑÁ¨¶ËôüÊàñÁ¨¶ËôüÁµÑÂêà„ÄÇ\n\n"
                                      "üîπ *ÈÅãÁÆóÂ≠êÈ°ûÂûãÔºö*\n"
                                      "- ÁÆóË°ìÈÅãÁÆóÂ≠êÔºö`+`„ÄÅ`-`„ÄÅ`*`„ÄÅ`/`„ÄÅ`%`\n"
                                      "- ÊåáÊ¥æÈÅãÁÆóÂ≠êÔºö`=`„ÄÅ`+=`„ÄÅ`-=`„ÄÅ`*=` Á≠â\n"
                                      "- ÊØîËºÉÈÅãÁÆóÂ≠êÔºö`==`„ÄÅ`!=`„ÄÅ`<`„ÄÅ`>`„ÄÅ`<=`„ÄÅ`>=`\n"
                                      "- ÈÇèËºØÈÅãÁÆóÂ≠êÔºö`&&`„ÄÅ`||`„ÄÅ`!`\n\n"
                                      "============================\n"
                                      "üîπ *ÁÆóË°ìÈÅãÁÆóÁØÑ‰æãÔºö*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *ÊØîËºÉËàáÈÇèËºØÁØÑ‰æãÔºö*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x Â∞èÊñº y ‰∏î y ÊòØÊ≠£Êï∏\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö* ÂØ´‰∏Ä‰∫õÂåÖÂê´‰∏çÂêåÈÅãÁÆóÂ≠êÁöÑÈÅãÁÆóÂºè‰∏¶Ëº∏Âá∫ÁµêÊûúÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "cposlsacmmcnjfdie":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="sixthousand")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="blyatutebyanetpravle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C Ë™ûË®Ä‰∏≠ÁöÑËÆäÊï∏ËàáË≥áÊñôÂûãÊÖã*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËÆäÊï∏Ôºü*\n"
                                      "‚Äî Áî®‰æÜÂú®Ë®òÊÜ∂È´î‰∏≠ÂÑ≤Â≠òË≥áÊñôÁöÑÂêçÁ®±„ÄÇ\n"
                                      "‚Äî ÊØèÂÄãËÆäÊï∏ÈÉΩÊúâ‰∏ÄÂÄãË≥áÊñôÂûãÊÖãÔºåÊ±∫ÂÆöÂÆÉÊâÄÂÑ≤Â≠òÁöÑË≥áÊñôÁ®ÆÈ°û„ÄÇ\n\n"
                                      "üîπ *Â∏∏Ë¶ãÁöÑË≥áÊñôÂûãÊÖãÔºö*\n"
                                      "- `int` ‚Äî Êï¥Êï∏Ôºå‰æãÂ¶ÇÔºö`42`\n"
                                      "- `float` ‚Äî ÊµÆÈªûÊï∏Ôºå‰æãÂ¶ÇÔºö`3.14`\n"
                                      "- `char` ‚Äî ÂñÆ‰∏ÄÂ≠óÂÖÉÔºå‰æãÂ¶ÇÔºö`'A'`\n"
                                      "- `double` ‚Äî Êõ¥Á≤æÁ¢∫ÁöÑÊµÆÈªûÊï∏\n\n"
                                      "============================\n"
                                      "üîπ *ÂÆ£ÂëäËÆäÊï∏Ôºö*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Ëº∏Âá∫Âà∞Ëû¢ÂπïÔºö*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Âπ¥ÈΩ°: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö* ÂÆ£ÂëäÂπæÂÄãËÆäÊï∏‰∏¶Ëº∏Âá∫ÂÆÉÂÄëÁöÑÂÄºÂêßÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "idgaf":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="frekal")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="sikioxoxcme")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *C Ë™ûË®Ä‰∏≠ÁöÑÊ¢ù‰ª∂Âà§Êñ∑Ôºöif„ÄÅelse if„ÄÅelse*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Âà§Êñ∑Ôºü*\n"
                                      "‚Äî Ê†πÊìöÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºå‰æÜÂü∑Ë°å‰∏çÂêåÁöÑÁ®ãÂºèÂçÄÂ°ä„ÄÇ\n\n"
                                      "üîπ *if ÁöÑË™ûÊ≥ïÔºö*\n"
                                      "```c\n"
                                      "if (Ê¢ù‰ª∂) {\n"
                                      "    // Áï∂Ê¢ù‰ª∂ÁÇ∫ÁúüÊôÇÂü∑Ë°åÁöÑÁ®ãÂºèÁ¢º\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *‰ΩøÁî® else if Âíå elseÔºö*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Ê≠£Êï∏\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Èõ∂\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Ë≤†Êï∏\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÈÇèËºØÈÅãÁÆóÂ≠êÔºàÁî®ÊñºÊ¢ù‰ª∂Âà§Êñ∑ÔºâÔºö*\n"
                                      "- `&&` ‚Äî ‰∏îÔºàANDÔºâ\n"
                                      "- `||` ‚Äî ÊàñÔºàORÔºâ\n"
                                      "- `!` ‚Äî ÈùûÔºàNOTÔºâ\n\n"
                                      "‚úÖ *‰ªªÂãôÔºö* Êí∞ÂØ´‰∏ÄÂÄãÁ®ãÂºèÔºåÊ™¢Êü•‰∏ÄÂÄãÊï∏Â≠óÔºå‰∏¶Âç∞Âá∫ÂÆÉÊòØÊ≠£Êï∏„ÄÅË≤†Êï∏ÈÇÑÊòØÈõ∂ÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "sikioxoxcme":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="idgaf")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="cposlsacmmcnjfdie")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Ë™ûË®Ä‰∏≠ÁöÑÈÅãÁÆóÂ≠êËàáÈÅãÁÆóÂºè*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÈÅãÁÆóÂ≠êÔºü*\n"
                                      "‚Äî Áî®‰æÜÂ∞çË≥áÊñôÂü∑Ë°åÊìç‰ΩúÁöÑÁ¨¶ËôüÊàñÁ¨¶ËôüÁµÑÂêà„ÄÇ\n\n"
                                      "üîπ *ÈÅãÁÆóÂ≠êÈ°ûÂûãÔºö*\n"
                                      "- ÁÆóË°ìÈÅãÁÆóÂ≠êÔºö`+`„ÄÅ`-`„ÄÅ`*`„ÄÅ`/`„ÄÅ`%`\n"
                                      "- ÊåáÊ¥æÈÅãÁÆóÂ≠êÔºö`=`„ÄÅ`+=`„ÄÅ`-=`„ÄÅ`*=` Á≠â\n"
                                      "- ÊØîËºÉÈÅãÁÆóÂ≠êÔºö`==`„ÄÅ`!=`„ÄÅ`<`„ÄÅ`>`„ÄÅ`<=`„ÄÅ`>=`\n"
                                      "- ÈÇèËºØÈÅãÁÆóÂ≠êÔºö`&&`„ÄÅ`||`„ÄÅ`!`\n\n"
                                      "============================\n"
                                      "üîπ *ÁÆóË°ìÈÅãÁÆóÁØÑ‰æãÔºö*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int sum = a + b;       // 13\n"
                                      "int diff = a - b;      // 7\n"
                                      "int product = a * b;   // 30\n"
                                      "int quotient = a / b;  // 3\n"
                                      "int remainder = a % b; // 1\n"
                                      "```\n\n"
                                      "üîπ *ÊØîËºÉËàáÈÇèËºØÁØÑ‰æãÔºö*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x Â∞èÊñº y ‰∏î y ÊòØÊ≠£Êï∏\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ëá™Â∑±Ë©¶Ë©¶ÁúãÔºö* ÂØ´‰∏Ä‰∫õÂåÖÂê´‰∏çÂêåÈÅãÁÆóÂ≠êÁöÑÈÅãÁÆóÂºè‰∏¶Ëº∏Âá∫ÁµêÊûúÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "frekal":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="sybau")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="nkkmlhhnnbbyuooopyytfv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *C Ë™ûË®Ä‰∏≠ÁöÑËø¥ÂúàÔºöfor„ÄÅwhile„ÄÅdo-while*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî ÂÖÅË®±ÈáçË§áÂü∑Ë°åÊüêÊÆµÁ®ãÂºèÁ¢ºÂ§öÊ¨°„ÄÇ\n\n"
                                      "üîπ *for Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Ë©¶Ë©¶ÁúãÔºö* ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåËº∏Âá∫Âæû 1 Âà∞ 10 ÁöÑÊï∏Â≠óÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "nkkmlhhnnbbyuooopyytfv":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="frekal")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="sikioxoxcme")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *C Ë™ûË®Ä‰∏≠ÁöÑÊ¢ù‰ª∂Âà§Êñ∑Ôºöif„ÄÅelse if„ÄÅelse*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊ¢ù‰ª∂Âà§Êñ∑Ôºü*\n"
                                      "‚Äî Ê†πÊìöÊ¢ù‰ª∂ÊòØÂê¶ÊàêÁ´ãÔºå‰æÜÂü∑Ë°å‰∏çÂêåÁöÑÁ®ãÂºèÂçÄÂ°ä„ÄÇ\n\n"
                                      "üîπ *if ÁöÑË™ûÊ≥ïÔºö*\n"
                                      "```c\n"
                                      "if (Ê¢ù‰ª∂) {\n"
                                      "    // Áï∂Ê¢ù‰ª∂ÁÇ∫ÁúüÊôÇÂü∑Ë°åÁöÑÁ®ãÂºèÁ¢º\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *‰ΩøÁî® else if Âíå elseÔºö*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Ê≠£Êï∏\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Èõ∂\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Ë≤†Êï∏\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÈÇèËºØÈÅãÁÆóÂ≠êÔºàÁî®ÊñºÊ¢ù‰ª∂Âà§Êñ∑ÔºâÔºö*\n"
                                      "- `&&` ‚Äî ‰∏îÔºàANDÔºâ\n"
                                      "- `||` ‚Äî ÊàñÔºàORÔºâ\n"
                                      "- `!` ‚Äî ÈùûÔºàNOTÔºâ\n\n"
                                      "‚úÖ *‰ªªÂãôÔºö* Êí∞ÂØ´‰∏ÄÂÄãÁ®ãÂºèÔºåÊ™¢Êü•‰∏ÄÂÄãÊï∏Â≠óÔºå‰∏¶Âç∞Âá∫ÂÆÉÊòØÊ≠£Êï∏„ÄÅË≤†Êï∏ÈÇÑÊòØÈõ∂ÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "sybau":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="lmao")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="iouyeryhefyrfvnnvreioaojf2q")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Ë™ûË®Ä‰∏≠ÁöÑÂáΩÂºèÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n"
                                      "‚Äî ÊòØ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî ÊúâÂä©ÊñºÁµÑÁπîÁ®ãÂºèÁµêÊßã‰∏¶ÈáçË§á‰ΩøÁî®‰ª£Á¢º„ÄÇ\n\n"
                                      "üîπ *ÂáΩÂºèÁöÑÂÆöÁæ©ËàáÂëºÂè´Ôºö*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"ÂìàÂõâÔºå‰∏ñÁïåÔºÅ\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // ÂëºÂè´ÂáΩÂºè\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"ÂìàÂõâ, %sÔºÅ\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÊúâÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºö*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"5 ÁöÑÂπ≥ÊñπÊòØ %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ë©¶ËëóÂØ´‰∏ÄÂÄãÂáΩÂºèÔºåÂ∞áÂÖ©ÂÄãÊï∏Áõ∏Âä†‰∏¶ÂõûÂÇ≥ÁµêÊûúÂêßÔºÅ*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "iouyeryhefyrfvnnvreioaojf2q":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="sybau")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="nkkmlhhnnbbyuooopyytfv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *C Ë™ûË®Ä‰∏≠ÁöÑËø¥ÂúàÔºöfor„ÄÅwhile„ÄÅdo-while*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØËø¥ÂúàÔºü*\n"
                                      "‚Äî ÂÖÅË®±ÈáçË§áÂü∑Ë°åÊüêÊÆµÁ®ãÂºèÁ¢ºÂ§öÊ¨°„ÄÇ\n\n"
                                      "üîπ *for Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while Ëø¥ÂúàÔºö*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"Á¨¨ %d Ê¨°Ëø¥Âúà\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Ë©¶Ë©¶ÁúãÔºö* ÂØ´‰∏ÄÂÄãËø¥ÂúàÔºåËº∏Âá∫Âæû 1 Âà∞ 10 ÁöÑÊï∏Â≠óÔºÅ\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "lmao":
        keyboard = [[InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†",callback_data="crcvjkbkvnbjfgivjfde")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìå *C Ë™ûË®Ä‰∏≠ÁöÑÊåáÊ®ôÔºàPointersÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÊåáÊ®ôÔºü*\n"
                                      "‚Äî ÊåáÊ®ôÊòØ‰∏ÄÁ®ÆËÆäÊï∏ÔºåÁî®‰æÜÂÑ≤Â≠òÂè¶‰∏ÄÂÄãËÆäÊï∏ÁöÑË®òÊÜ∂È´î‰ΩçÂùÄ„ÄÇ\n"
                                      "‚Äî Â∏∏Áî®ÊñºÈ´òÊïàÁöÑË®òÊÜ∂È´îÊìç‰Ωú„ÄÅÈô£ÂàóËàáÂáΩÂºèËôïÁêÜ„ÄÇ\n\n"
                                      "üîπ *Âü∫Êú¨ÊåáÊ®ôÁØÑ‰æãÔºö*\n"
                                      "```c\n"
                                      "int x = 10;\n"
                                      "int* ptr = &x;\n"
                                      "printf(\"ÂÄºÔºö%d\\n\", *ptr); // Ëß£ÂèÉËÄÉ\n"
                                      "```\n"
                                      "‚Äî `&x` Ë°®Á§∫ÂèñÂæóËÆäÊï∏ `x` ÁöÑ‰ΩçÂùÄ\n"
                                      "‚Äî `*ptr` Ë°®Á§∫ÂèñÂá∫Ë©≤‰ΩçÂùÄÊâÄÂÑ≤Â≠òÁöÑÂÄº\n\n"
                                      "üîπ *Ë™™ÊòéÔºö*\n"
                                      "- `int* ptr;` ‚Äî ÊåáÂêëÊï¥Êï∏ÁöÑÊåáÊ®ô\n"
                                      "- `*` ‚Äî Ëß£ÂèÉËÄÉÈÅãÁÆóÂ≠êÔºàÂèñÂæó‰ΩçÂùÄ‰∏≠ÁöÑÂÄºÔºâ\n"
                                      "- `&` ‚Äî ‰ΩçÂùÄÈÅãÁÆóÂ≠êÔºàÂèñÂæóËÆäÊï∏‰ΩçÂùÄÔºâ\n\n"
                                      "============================\n"
                                      "üîπ *ÈÄèÈÅéÊåáÊ®ô‰øÆÊîπÂÄºÔºö*\n"
                                      "```c\n"
                                      "int a = 5;\n"
                                      "int* p = &a;\n"
                                      "*p = 100;\n"
                                      "printf(\"%d\\n\", a); // Ëº∏Âá∫ 100\n"
                                      "```\n"
                                      "‚úÖ ÊåáÊ®ôÂèØ‰ª•ÊîπËÆäÂéüËÆäÊï∏ÁöÑÂÄº„ÄÇ\n\n"
                                      "============================\n"
                                      "üîπ *Âç∞Âá∫Ë®òÊÜ∂È´î‰ΩçÂùÄÔºö*\n"
                                      "```c\n"
                                      "int val = 42;\n"
                                      "printf(\"ËÆäÊï∏ÁöÑ‰ΩçÂùÄÔºö%p\\n\", &val);\n"
                                      "```\n"
                                      "‚Äî `%p` Áî®‰æÜÂç∞Âá∫Ë®òÊÜ∂È´î‰ΩçÂùÄ„ÄÇ\n\n"
                                      "============================\n"
                                      "üí° ÊåáÊ®ôÊòØ C Ë™ûË®Ä‰∏≠ÈùûÂ∏∏ÈáçË¶ÅÁöÑÊ¶ÇÂøµ„ÄÇ\n"
                                      "ÂÆÉÂÄëË¢´Âª£Ê≥õÊáâÁî®ÊñºÈô£Âàó„ÄÅÂ≠ó‰∏≤„ÄÅÂáΩÂºèÂÇ≥ÈÅûËàáÂãïÊÖãË®òÊÜ∂È´îÁÆ°ÁêÜ‰∏≠„ÄÇ\n\n"
                                      "üìé ‰∏ã‰∏ÄÁ´†ÊàëÂÄëÂ∞áÂ≠∏Áøí *Èô£ÂàóËàáÊåáÊ®ôÔºàArrays and PointersÔºâ*ÔºÅ\n",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "crcvjkbkvnbjfgivjfde":
        keyboard = [[InlineKeyboardButton("‰∏ã‰∏ÄÁ´†‚û°", callback_data="lmao")],
                    [InlineKeyboardButton("ÊúÄÂæå‰∏ÄÁ´†", callback_data="iouyeryhefyrfvnnvreioaojf2q")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Ë™ûË®Ä‰∏≠ÁöÑÂáΩÂºèÔºàFunctionsÔºâ*\n\n"
                                      "üîπ *‰ªÄÈ∫ºÊòØÂáΩÂºèÔºü*\n"
                                      "‚Äî ÊòØ‰∏ÄÊÆµÂü∑Ë°åÁâπÂÆö‰ªªÂãôÁöÑÁ®ãÂºèÁ¢ºÂçÄÂ°ä„ÄÇ\n"
                                      "‚Äî ÊúâÂä©ÊñºÁµÑÁπîÁ®ãÂºèÁµêÊßã‰∏¶ÈáçË§á‰ΩøÁî®‰ª£Á¢º„ÄÇ\n\n"
                                      "üîπ *ÂáΩÂºèÁöÑÂÆöÁæ©ËàáÂëºÂè´Ôºö*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"ÂìàÂõâÔºå‰∏ñÁïåÔºÅ\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // ÂëºÂè´ÂáΩÂºè\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Â∏∂ÂèÉÊï∏ÁöÑÂáΩÂºèÔºö*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"ÂìàÂõâ, %sÔºÅ\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *ÊúâÂõûÂÇ≥ÂÄºÁöÑÂáΩÂºèÔºö*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"5 ÁöÑÂπ≥ÊñπÊòØ %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Ë©¶ËëóÂØ´‰∏ÄÂÄãÂáΩÂºèÔºåÂ∞áÂÖ©ÂÄãÊï∏Áõ∏Âä†‰∏¶ÂõûÂÇ≥ÁµêÊûúÂêßÔºÅ*\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    if query.data == "tuk":
        keyboard = [[InlineKeyboardButton("üî• √ñƒürenmeye ba≈ülayƒ±n", callback_data="mehrab")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Merhaba! Programlama √∂ƒürenmeye hazƒ±r mƒ±sƒ±nƒ±z?",
            reply_markup=reply_markup)
    elif query.data == "mehrab":
        keyboard = [
            [InlineKeyboardButton("programlama dili", callback_data="zehrab")],
            [InlineKeyboardButton("ƒ∞nternet g√ºvenliƒüi", callback_data="cyberindo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üöÄ Harika! ≈ûimdi ne √∂ƒürenmek istediƒüinizi se√ßinÔºö",
            reply_markup=reply_markup
        )
    elif query.data == "zehrab":
        keyboard = [
            [InlineKeyboardButton("üêç Python ", callback_data="ilan")],
            [InlineKeyboardButton("‚öôÔ∏è C++ ", callback_data="heyvanlar")],
            [InlineKeyboardButton("üü® Javascript", callback_data="sriplara")],
            [InlineKeyboardButton("‚òï Java ", callback_data="java_startings")],
            [InlineKeyboardButton("üíª C", callback_data="priletelivmayami")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Tamam! ≈ûimdi √∂ƒürenmek istediƒüiniz dili se√ßin",
            reply_markup=reply_markup
        )

    elif query.data == "cyberindo":
        keyboard = [
            [InlineKeyboardButton("üì°internet aƒüƒ±", callback_data="cyberqwak")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Hadi ba≈ülayalƒ±m! \nB√∂l√ºm 1:",
            reply_markup=reply_markup
        )

    elif query.data == "cyberqwak":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="nextdat")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Aƒülar (Networks)* basit√ße birbirine baƒülƒ± nesnelerdir.\n"
                                      "√ñrneƒüin, arkada≈ü √ßevren: ortak ilgi alanlarƒ±, hobiler, beceriler aracƒ±lƒ±ƒüƒ±yla birbirinize baƒülƒ±sƒ±nƒ±z. üß†ü§ù\n\n"
                                      "üì° *Aƒülar her yerde bulunur:*\n"
                                      "„ÄÄ- üöá ≈ûehirdeki toplu ta≈üƒ±ma sistemi\n"
                                      "„ÄÄ- ‚ö° Ulusal elektrik altyapƒ±sƒ±\n"
                                      "„ÄÄ- üèòÔ∏è Kom≈üular arasƒ±ndaki ileti≈üim\n"
                                      "„ÄÄ- ‚úâÔ∏è Mektup ve kargo g√∂nderen posta sistemleri\n\n"
                                      "üíª *Teknoloji alanƒ±nda da bu kavram aynƒ±dƒ±r, sadece cihazlar arasƒ±nda uygulanƒ±r.*\n"
                                      "Telefonunu d√º≈ü√ºn üì±: Onu bilgiye eri≈ümek i√ßin kullanƒ±rsƒ±n.\n\n"
                                      "üì∂ *Cihazlarƒ±n nasƒ±l veri alƒ±≈üveri≈üi yaptƒ±ƒüƒ±nƒ± ve hangi kurallara uyduklarƒ±nƒ± birlikte √∂ƒüreneceƒüiz.*\n\n"
                                      "üñ•Ô∏è *Bir aƒü 2'den milyarlarca cihaza kadar i√ßerebilir:*\n"
                                      "„ÄÄüíª Diz√ºst√º bilgisayarlar\n"
                                      "„ÄÄ- üì± Akƒ±llƒ± telefonlar\n"
                                      "„ÄÄ- üì∑ G√ºvenlik kameralarƒ±\n"
                                      "„ÄÄ- üö¶ Trafik ƒ±≈üƒ±klarƒ±\n"
                                      "„ÄÄ- üåæ Tarƒ±m makineleri\n\n"
                                      "üîå *Aƒülar g√ºnl√ºk hayatƒ±mƒ±zƒ±n bir par√ßasƒ± haline gelmi≈ütir:*\n"
                                      "„ÄÄ- ‚õÖ Hava durumu verilerinin toplanmasƒ±\n"
                                      "„ÄÄ- ‚ö° Evlerin elektrikle beslenmesi\\n"
                                      "„ÄÄ- üö¶ Trafiƒüin y√∂netilmesi\n\n"
                                      "üõ°Ô∏è Aƒülar modern hayatƒ±n vazge√ßilmez bir par√ßasƒ± olduƒüundan,\n"
                                      "aƒüƒ±n temel prensiplerini anlamak siber g√ºvenlik eƒüitiminin temelidir.\n\n"
                                      "üë• A≈üaƒüƒ±daki diyagrama bak: Alice, Bob ve Jim kendi k√º√ß√ºk aƒülarƒ±nƒ± kurdular!\n"
                                      "Bu konuya daha sonra geri d√∂neceƒüiz\n\n"
                                      "*ƒ∞lk b√∂l√ºm burada ba≈ülƒ±yor!*\n*Haydi ba≈ülayalƒ±m!*",
                                      parse_mode="Markdown"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "nextdat":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="twopples")],
            [InlineKeyboardButton("son b√∂l√ºm", callback_data="chhnbbgbghjve")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *B√∂l√ºm 2: ƒ∞nternete Derinlemesine Dalƒ±≈ü!*\n\n"
                                      "Artƒ±k aƒülarƒ±n ne olduƒüunu biliyorsun ‚Äî basit√ße s√∂ylemek gerekirse, birbirine baƒülƒ± cihazlardƒ±r ‚Äî ≈üimdi internetin nasƒ±l √ßalƒ±≈ütƒ±ƒüƒ±nƒ± ke≈üfedelim.\n\n"
                                      "üì° *ƒ∞nternet*, birbirine baƒülƒ± bir√ßok k√º√ß√ºk aƒüdan olu≈üan *dev bir aƒüdƒ±r*.\n\n"
                                      "üë´ Hayal et ki Alice yeni arkada≈ülar edindi: Zayn ve Toby\\. Onlarƒ± Bob ve Jim ile tanƒ±≈ütƒ±rmak istiyor. Fakat bir sorun var: sadece Alice her iki grubun dilini anlayabiliyor. Bu y√ºzden *bir k√∂pr√º* oluyor ve herkes onun aracƒ±lƒ±ƒüƒ±yla ileti≈üim kurabiliyor\\. Bu da yeni bir aƒü √∂rneƒüidir\\.\\n\\n"
                                      "üìú ƒ∞nternetin ilk versiyonu, 1960'larƒ±n sonlarƒ±nda ABD ordusu tarafƒ±ndan finanse edilen *ARPANET* projesi kapsamƒ±nda ortaya √ßƒ±ktƒ±\n"
                                      "Bu, bilgisayarlar arasƒ±nda √ßalƒ±≈üan ilk ger√ßek aƒüdƒ±\\.\n\n"
                                      "üåç 1989'da Tim Berners-Lee, interneti bilgi payla≈üƒ±mƒ± ve depolama i√ßin kullanƒ±≈ülƒ± hale getiren *World Wide Web (WWW)* kavramƒ±nƒ± √∂nerdi\n\n"
                                      "üîå Bug√ºn internet, binlerce k√º√ß√ºk ekipten olu≈üan b√ºy√ºk bir kul√ºp gibidir\\. Aƒülar iki t√ºre ayrƒ±lƒ±r:\n"
                                      "„ÄÄ- üîí √ñzel Aƒülarn"
                                      "„ÄÄ- üåê Genel Aƒülar ‚Äî bu ikisi birlikte internettir\n\n"
                                      "üí° Aƒüdaki cihazlar, birbirini bulmak ve veri alƒ±≈üveri≈üi yapmak i√ßin √∂zel *tanƒ±mlayƒ±cƒ±lar* kullanƒ±r \\(bunu daha sonra ele alacaƒüƒ±z).",
                                      parse_mode="Markdown"

                                      ,
                                      reply_markup=reply_markup)
    elif query.data == "chhnbbgbghjve":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="nextdat")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîó *Aƒülar (Networks)* basit√ße birbirine baƒülƒ± nesnelerdir.\n"
                                      "√ñrneƒüin, arkada≈ü √ßevren: ortak ilgi alanlarƒ±, hobiler, beceriler aracƒ±lƒ±ƒüƒ±yla birbirinize baƒülƒ±sƒ±nƒ±z. üß†ü§ù\n\n"
                                      "üì° *Aƒülar her yerde bulunur:*\n"
                                      "„ÄÄ- üöá ≈ûehirdeki toplu ta≈üƒ±ma sistemi\n"
                                      "„ÄÄ- ‚ö° Ulusal elektrik altyapƒ±sƒ±\n"
                                      "„ÄÄ- üèòÔ∏è Kom≈üular arasƒ±ndaki ileti≈üim\n"
                                      "„ÄÄ- ‚úâÔ∏è Mektup ve kargo g√∂nderen posta sistemleri\n\n"
                                      "üíª *Teknoloji alanƒ±nda da bu kavram aynƒ±dƒ±r, sadece cihazlar arasƒ±nda uygulanƒ±r.*\n"
                                      "Telefonunu d√º≈ü√ºn üì±: Onu bilgiye eri≈ümek i√ßin kullanƒ±rsƒ±n.\n\n"
                                      "üì∂ *Cihazlarƒ±n nasƒ±l veri alƒ±≈üveri≈üi yaptƒ±ƒüƒ±nƒ± ve hangi kurallara uyduklarƒ±nƒ± birlikte √∂ƒüreneceƒüiz.*\n\n"
                                      "üñ•Ô∏è *Bir aƒü 2'den milyarlarca cihaza kadar i√ßerebilir:*\n"
                                      "„ÄÄüíª Diz√ºst√º bilgisayarlar\n"
                                      "„ÄÄ- üì± Akƒ±llƒ± telefonlar\n"
                                      "„ÄÄ- üì∑ G√ºvenlik kameralarƒ±\n"
                                      "„ÄÄ- üö¶ Trafik ƒ±≈üƒ±klarƒ±\n"
                                      "„ÄÄ- üåæ Tarƒ±m makineleri\n\n"
                                      "üîå *Aƒülar g√ºnl√ºk hayatƒ±mƒ±zƒ±n bir par√ßasƒ± haline gelmi≈ütir:*\n"
                                      "„ÄÄ- ‚õÖ Hava durumu verilerinin toplanmasƒ±\n"
                                      "„ÄÄ- ‚ö° Evlerin elektrikle beslenmesi\\n"
                                      "„ÄÄ- üö¶ Trafiƒüin y√∂netilmesi\n\n"
                                      "üõ°Ô∏è Aƒülar modern hayatƒ±n vazge√ßilmez bir par√ßasƒ± olduƒüundan,\n"
                                      "aƒüƒ±n temel prensiplerini anlamak siber g√ºvenlik eƒüitiminin temelidir.\n\n"
                                      "üë• A≈üaƒüƒ±daki diyagrama bak: Alice, Bob ve Jim kendi k√º√ß√ºk aƒülarƒ±nƒ± kurdular!\n"
                                      "Bu konuya daha sonra geri d√∂neceƒüiz\n\n"
                                      "*ƒ∞lk b√∂l√ºm burada ba≈ülƒ±yor!*\n*Haydi ba≈ülayalƒ±m!*",
                                      parse_mode="Markdown"
                                      ,
                                      reply_markup=reply_markup)

    elif query.data == "twopples":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="threepppipi")],
            [InlineKeyboardButton("son b√∂l√ºm", callback_data="gagrgagfgdgxsfncdee")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì° *Cihazlarƒ±n aƒüda ileti≈üim kurabilmesi ve d√ºzeni koruyabilmesi i√ßin:*\n"
                                      "‚Äî Kendilerini tanƒ±yabilmeleri gerekir\n"
                                      "‚Äî Diƒüer cihazlar tarafƒ±ndan tanƒ±nabilir olmalarƒ± gerekir\n\n"
                                      "üí° *Cihazlar insanlar gibidir:*\n"
                                      "‚Äî Adlarƒ±mƒ±z vardƒ±r (deƒüi≈üebilir)\n"
                                      "‚Äî Parmak izimiz vardƒ±r (benzersiz ve kalƒ±cƒ±\\)\\n\\n"
                                      "üì± *Cihazlarƒ±n da iki t√ºr kimliƒüi vardƒ±r:*\\n"
                                      "‚Äî IP adresi (üìç deƒüi≈üebilir)\n"
                                      "‚Äî MAC adresi (üîí kalƒ±cƒ±, parmak izi gibi\\)\\n\\n"
                                      "=====================\\n"
                                      "üîπ *IP Adresleri*\\n"
                                      "IP adresi, cihazƒ±n aƒüdaki ge√ßici adƒ±dƒ±r\\.\\n"
                                      "D√∂rt sayƒ±dan \\(oktetten\\) olu≈üur ve noktalarla ayrƒ±lƒ±r:\\n"
                                      "√ñrnek: `192.168.0.1`\\n\\n"
                                      "üîÅ Bir IP ba≈üka bir cihaza atanabilir ama aynƒ± aƒüda iki cihaz aynƒ± IP'yi kullanamaz\\.\\n\\n"
                                      "üåç *ƒ∞ki t√ºr IP adresi vardƒ±r:*\\n"
                                      "‚Äî √ñzel IP (ev, ofis i√ßi kullanƒ±m\\)\\n"
                                      "‚Äî Genel IP (internet √ºzerinden g√∂r√ºlebilir\\)\\n\\n"
                                      "üßæ *√ñrnek:*\n"
                                      "`Cihaz t√ñzel IP t tGenel IP`\n"
                                      "`Bilgisayarƒ±m t192.168.1.77\\t86.157.52.21`\n"
                                      "`Diƒüer PC\\t192.168.1.74\\t86.157.52.21`\\n\\n"
                                      "üîç Aynƒ± modeme baƒülƒ±lar \\(genel IP aynƒ±\\), ama √∂zel IP‚Äôleri farklƒ±dƒ±r\\.\n"
                                      "Bu ≈üekilde aynƒ± aƒüda ileti≈üim kurabilirler\\.\\n\\n"
                                      "=====================\\n"
                                      "üåê *Sorun: Yetersiz IP adresi!*\\n"
                                      "IPv4 sadece yakla≈üƒ±k 4\\.29 milyar adres saƒülar \\(2^32\\),\\n"
                                      "ama cihaz sayƒ±sƒ± d√ºnyada onlarca milyarƒ± buluyor\\.\\n\\n"
                                      "üí° *√á√∂z√ºm:*\\n"
                                      "‚Äî IPv6 = 340 trilyon+ adres \\(2^128\\)\\n"
                                      "‚Äî Daha verimli\\n"
                                      "‚Äî √áok daha fazla adres saƒülar\\n\\n"
                                      "√ñrnekler:\\n"
                                      "‚Äî IPv4: `192.168.1.1`\\n"
                                      "‚Äî IPv6: `2001:0db8:85a3:0000:0000:8a2e:0370:7334`\\n\\n"
                                      "=====================\\n"
                                      "üîπ *MAC Adresleri*\\n"
                                      "Her cihazƒ±n benzersiz bir MAC adresi olan aƒü adapt√∂r√º vardƒ±r\\.\\n"
                                      "Format: `a4:c3:f0:85:ac:2d` \\(16'lƒ±k sistemde 6 bayt)\n\n"
                                      "üõ† ƒ∞lk 6 karakter √ºreticiyi temsil eder.\n"
                                      "üìå Son 6 karakter cihazƒ±n benzersiz numarasƒ±dƒ±r\\.\n\n"
                                      "üí• *Ancak MAC adresi sahte olabilir \\(spoofing\\):*\\n"
                                      "‚Äî Bir saldƒ±rgan ba≈üka bir cihaz gibi davranabilir.\n"
                                      "‚Äî √ñrneƒüin, bir g√ºvenlik duvarƒ± sadece y√∂neticinin MAC‚Äôine izin veriyorsa, bu kandƒ±rƒ±labilir.\n\n"
                                      "=====================\n"
                                      "üìå *√ñzet:*\\n"
                                      "üîπ IP ‚Äî aƒüa g√∂re deƒüi≈üir.\n"
                                      "üîπ MAC ‚Äî kalƒ±cƒ± ve benzersiz.\n"
                                      "üîπ G√ºvenlik a√ßƒ±sƒ±ndan, IP veya MAC adresi kimliƒüi %100 doƒürulamaz.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "gagrgagfgdgxsfncdee":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="twopples")],
            [InlineKeyboardButton("son b√∂l√ºm", callback_data="chhnbbgbghjve")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üåê *B√∂l√ºm 2: ƒ∞nternete Derinlemesine Dalƒ±≈ü!*\n\n"
                                      "Artƒ±k aƒülarƒ±n ne olduƒüunu biliyorsun ‚Äî basit√ße s√∂ylemek gerekirse, birbirine baƒülƒ± cihazlardƒ±r ‚Äî ≈üimdi internetin nasƒ±l √ßalƒ±≈ütƒ±ƒüƒ±nƒ± ke≈üfedelim.\n\n"
                                      "üì° *ƒ∞nternet*, birbirine baƒülƒ± bir√ßok k√º√ß√ºk aƒüdan olu≈üan *dev bir aƒüdƒ±r*.\n\n"
                                      "üë´ Hayal et ki Alice yeni arkada≈ülar edindi: Zayn ve Toby\\. Onlarƒ± Bob ve Jim ile tanƒ±≈ütƒ±rmak istiyor. Fakat bir sorun var: sadece Alice her iki grubun dilini anlayabiliyor. Bu y√ºzden *bir k√∂pr√º* oluyor ve herkes onun aracƒ±lƒ±ƒüƒ±yla ileti≈üim kurabiliyor\\. Bu da yeni bir aƒü √∂rneƒüidir\\.\\n\\n"
                                      "üìú ƒ∞nternetin ilk versiyonu, 1960'larƒ±n sonlarƒ±nda ABD ordusu tarafƒ±ndan finanse edilen *ARPANET* projesi kapsamƒ±nda ortaya √ßƒ±ktƒ±\n"
                                      "Bu, bilgisayarlar arasƒ±nda √ßalƒ±≈üan ilk ger√ßek aƒüdƒ±\\.\n\n"
                                      "üåç 1989'da Tim Berners-Lee, interneti bilgi payla≈üƒ±mƒ± ve depolama i√ßin kullanƒ±≈ülƒ± hale getiren *World Wide Web (WWW)* kavramƒ±nƒ± √∂nerdi\n\n"
                                      "üîå Bug√ºn internet, binlerce k√º√ß√ºk ekipten olu≈üan b√ºy√ºk bir kul√ºp gibidir\\. Aƒülar iki t√ºre ayrƒ±lƒ±r:\n"
                                      "„ÄÄ- üîí √ñzel Aƒülarn"
                                      "„ÄÄ- üåê Genel Aƒülar ‚Äî bu ikisi birlikte internettir\n\n"
                                      "üí° Aƒüdaki cihazlar, birbirini bulmak ve veri alƒ±≈üveri≈üi yapmak i√ßin √∂zel *tanƒ±mlayƒ±cƒ±lar* kullanƒ±r \\(bunu daha sonra ele alacaƒüƒ±z).",
                                      parse_mode="Markdown"

                                      ,
                                      reply_markup=reply_markup)
    elif query.data == "threepppipi":
        keyboard = [[InlineKeyboardButton("son b√∂l√ºm", callback_data="unwewewqwq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì° *Ping nedir?*\n\n"
            "*Ping*, iki cihaz arasƒ±ndaki baƒülantƒ±nƒ±n √ßalƒ±≈üƒ±p √ßalƒ±≈ümadƒ±ƒüƒ±nƒ± kontrol etmek i√ßin kullanƒ±lan temel bir aƒü aracƒ±dƒ±r.\n"
            "Ping komutu, *ICMP* \\(Internet Control Message Protocol\\) kullanarak hedef cihaza bir \"echo request\" (yankƒ± isteƒüi\\) g√∂nderir ve \"echo reply\" \\(yankƒ± cevabƒ±\\) almayƒ± bekler.\n\n"
            "=====================\n"
            "üîç *Ping ile ≈üunlarƒ± √∂ƒürenebilirsin:*\n"
            "‚Äî Baƒülantƒ± *var mƒ± yok mu*\\n"
            "‚Äî *Ne kadar hƒ±zlƒ±* yanƒ±t veriyor \\(gecikme s√ºresi\\)\n"
            "‚Äî Veri kaybƒ± olup olmadƒ±ƒüƒ±nƒ± \\(stabilite\\)\\n\\n"
            "=====================\n"
            "üíª *Kullanƒ±mƒ± \\(Terminal\\):*\n"
            "```bash\\nping google.com\n```\n"
            "Bu komut google\\.com'a ping g√∂nderir ve cevap s√ºrelerini g√∂sterir\\.\n\n"
            "=====================\\n"
            "‚úÖ *Sonu√ß:*\\n"
            "‚Äî Eƒüer yanƒ±t geliyorsa, baƒülantƒ± *√ßalƒ±≈üƒ±yor* demektir\\.\n"
            "‚Äî Eƒüer \"timeout\" ya da \"host unreachable\" gibi mesajlar alƒ±rsan, baƒülantƒ±da sorun olabilir\\.\n\n"
            "üí° Ping, aƒü sorunlarƒ±nƒ± te≈ühis etmek i√ßin *ilk ba≈üvurulan ara√ßlardan biridir*.\n"
            "Bir web sitesi a√ßƒ±lmƒ±yorsa, √∂nce ping ile test etmeyi deneyebilirsin.\n"
            ,
            parse_mode="Markdown",reply_markup = reply_markup
        )
    elif query.data == "unwewewqwq":
        keyboard = [
            [InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="threepppipi")],
            [InlineKeyboardButton("son b√∂l√ºm", callback_data="gagrgagfgdgxsfncdee")]

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì° *Cihazlarƒ±n aƒüda ileti≈üim kurabilmesi ve d√ºzeni koruyabilmesi i√ßin:*\n"
                                      "‚Äî Kendilerini tanƒ±yabilmeleri gerekir\n"
                                      "‚Äî Diƒüer cihazlar tarafƒ±ndan tanƒ±nabilir olmalarƒ± gerekir\n\n"
                                      "üí° *Cihazlar insanlar gibidir:*\n"
                                      "‚Äî Adlarƒ±mƒ±z vardƒ±r (deƒüi≈üebilir)\n"
                                      "‚Äî Parmak izimiz vardƒ±r (benzersiz ve kalƒ±cƒ±\\)\\n\\n"
                                      "üì± *Cihazlarƒ±n da iki t√ºr kimliƒüi vardƒ±r:*\\n"
                                      "‚Äî IP adresi (üìç deƒüi≈üebilir)\n"
                                      "‚Äî MAC adresi (üîí kalƒ±cƒ±, parmak izi gibi\\)\\n\\n"
                                      "=====================\\n"
                                      "üîπ *IP Adresleri*\\n"
                                      "IP adresi, cihazƒ±n aƒüdaki ge√ßici adƒ±dƒ±r\\.\\n"
                                      "D√∂rt sayƒ±dan \\(oktetten\\) olu≈üur ve noktalarla ayrƒ±lƒ±r:\\n"
                                      "√ñrnek: `192.168.0.1`\\n\\n"
                                      "üîÅ Bir IP ba≈üka bir cihaza atanabilir ama aynƒ± aƒüda iki cihaz aynƒ± IP'yi kullanamaz\\.\\n\\n"
                                      "üåç *ƒ∞ki t√ºr IP adresi vardƒ±r:*\\n"
                                      "‚Äî √ñzel IP (ev, ofis i√ßi kullanƒ±m\\)\\n"
                                      "‚Äî Genel IP (internet √ºzerinden g√∂r√ºlebilir\\)\\n\\n"
                                      "üßæ *√ñrnek:*\n"
                                      "`Cihaz t√ñzel IP t tGenel IP`\n"
                                      "`Bilgisayarƒ±m t192.168.1.77\\t86.157.52.21`\n"
                                      "`Diƒüer PC\\t192.168.1.74\\t86.157.52.21`\\n\\n"
                                      "üîç Aynƒ± modeme baƒülƒ±lar \\(genel IP aynƒ±\\), ama √∂zel IP‚Äôleri farklƒ±dƒ±r\\.\n"
                                      "Bu ≈üekilde aynƒ± aƒüda ileti≈üim kurabilirler\\.\\n\\n"
                                      "=====================\\n"
                                      "üåê *Sorun: Yetersiz IP adresi!*\\n"
                                      "IPv4 sadece yakla≈üƒ±k 4\\.29 milyar adres saƒülar \\(2^32\\),\\n"
                                      "ama cihaz sayƒ±sƒ± d√ºnyada onlarca milyarƒ± buluyor\\.\\n\\n"
                                      "üí° *√á√∂z√ºm:*\\n"
                                      "‚Äî IPv6 = 340 trilyon+ adres \\(2^128\\)\\n"
                                      "‚Äî Daha verimli\\n"
                                      "‚Äî √áok daha fazla adres saƒülar\\n\\n"
                                      "√ñrnekler:\\n"
                                      "‚Äî IPv4: `192.168.1.1`\\n"
                                      "‚Äî IPv6: `2001:0db8:85a3:0000:0000:8a2e:0370:7334`\\n\\n"
                                      "=====================\\n"
                                      "üîπ *MAC Adresleri*\\n"
                                      "Her cihazƒ±n benzersiz bir MAC adresi olan aƒü adapt√∂r√º vardƒ±r\\.\\n"
                                      "Format: `a4:c3:f0:85:ac:2d` \\(16'lƒ±k sistemde 6 bayt)\n\n"
                                      "üõ† ƒ∞lk 6 karakter √ºreticiyi temsil eder.\n"
                                      "üìå Son 6 karakter cihazƒ±n benzersiz numarasƒ±dƒ±r\\.\n\n"
                                      "üí• *Ancak MAC adresi sahte olabilir \\(spoofing\\):*\\n"
                                      "‚Äî Bir saldƒ±rgan ba≈üka bir cihaz gibi davranabilir.\n"
                                      "‚Äî √ñrneƒüin, bir g√ºvenlik duvarƒ± sadece y√∂neticinin MAC‚Äôine izin veriyorsa, bu kandƒ±rƒ±labilir.\n\n"
                                      "=====================\n"
                                      "üìå *√ñzet:*\\n"
                                      "üîπ IP ‚Äî aƒüa g√∂re deƒüi≈üir.\n"
                                      "üîπ MAC ‚Äî kalƒ±cƒ± ve benzersiz.\n"
                                      "üîπ G√ºvenlik a√ßƒ±sƒ±ndan, IP veya MAC adresi kimliƒüi %100 doƒürulamaz.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "ilan":
        keyboard = [[
            InlineKeyboardButton("Gitmek", callback_data="numberseven")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Tamam!! Python yolculuƒüumuza ba≈ülayalƒ±müêç¬ª",
            reply_markup=reply_markup)
    elif query.data == "heyvanlar":
        keyboard = [[
            InlineKeyboardButton("*B√∂l√ºm 1*", callback_data="CCCCG")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Tamam!! C++ yolculuƒüumuza ba≈ülayalƒ±m ‚öôÔ∏è",
            reply_markup=reply_markup)
    elif query.data == "sriplar":
        keyboard = [[
            InlineKeyboardButton("B√∂l√ºm 1", callback_data="metalheart")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Tamam!! JavaScript yolculuƒüumuza ba≈ülayalƒ±m!",
            reply_markup=reply_markup)
    elif query.data == "numberseven":
        keyboard = [[InlineKeyboardButton("üêçBa≈ülayƒ±n", callback_data="saintlaurent")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<<>>", reply_markup=reply_markup)
    elif query.data == "saintlaurent":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="financebro")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Python 64 Bit Kurulumu ve PyCharm Community Baƒülantƒ±sƒ±*\n\n"
            "üîπ *Adƒ±m 1: Python'u indir*\n"
            "[Python'u indir](https://www.python.org/downloads/) ‚Äî Windows x86\\-64 √ßalƒ±≈ütƒ±rƒ±labilir y√ºkleyiciyi se√ß\n\n"
            "üîπ *Adƒ±m 2: Kurulum*\n"
            "‚Äî \"Add Python to PATH\" kutucuƒüunu i≈üaretle\n"
            "‚Äî Customize installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *Adƒ±m 3: Kurulumu doƒürula*\n"
            "Terminale ≈üunu yaz: `python --version` ‚Äî Python 3\\.X\\.X g√∂rmelisin\n\n"
            "üîπ *Adƒ±m 4: PyCharm'ƒ± indir*\n"
            "[PyCharm'ƒ± indir](https://www.jetbrains.com/pycharm/download) ‚Äî Community s√ºr√ºm√ºn√º y√ºkle\n\n"
            "üîπ *Adƒ±m 5: Python'u baƒüla*\n"
            "Yeni Proje ‚Üí ‚öôÔ∏è Yorumlayƒ±cƒ± Ekle ‚Üí Sistem Yorumlayƒ±cƒ± ‚Üí Yol:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Kontrol:*\n"
            "Bir dosya olu≈ütur ve bu kodu yaz:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "‚ñ∂Ô∏è Tu≈üuna basarak √ßalƒ±≈ütƒ±r\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "financebro":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="heteroex")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="dameungrr")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üêç *Python: Deƒüi≈ükenler ve Veri T√ºrleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Veriyi saklamak i√ßin kullanƒ±lan isimlerdir, veri t√ºr√º otomatik belirlenir.\n\n"
                                      "üîπ *Deƒüi≈üken √∂rnekleri:*\n"
                                      "`x = 10` ‚Äî Tam sayƒ± (int)\n"
                                      "`name = \"Tom\"` ‚Äî Metin (str)\n"
                                      "`pi = 3.14` ‚Äî Ondalƒ±klƒ± sayƒ± (float)\n\n"
                                      "üîπ *Temel veri t√ºrleri:*\n"
                                      "- `int` ‚Äî Tam sayƒ±lar\n"
                                      "- `float` ‚Äî Ondalƒ±klƒ± sayƒ±lar\n"
                                      "- `str` ‚Äî Metin\n"
                                      "- `bool` ‚Äî Mantƒ±ksal deƒüerler: `True` veya `False`\n\n"
                                      "üîπ *Veri nasƒ±l yazdƒ±rƒ±lƒ±r?*\n"
                                      "`print(x)`\n"
                                      "`print(name)`\n"
                                      "`print(pi)`\n\n"
                                      "‚úÖ *Sen de dene!*\n"
                                      "```python\n"
                                      "age = 15\n"
                                      "city = \"Moskova\"\n"
                                      "is_student = True\n\n"
                                      "print(\"Ya≈ü:\", age)\n"
                                      "print(\"≈ûehir:\", city)\n"
                                      "print(\"√ñƒürenci mi:\", is_student)\n"
                                      "```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "dameungrr":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="financebro")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üêç *Python 64 Bit Kurulumu ve PyCharm Community Baƒülantƒ±sƒ±*\n\n"
            "üîπ *Adƒ±m 1: Python'u indir*\n"
            "[Python'u indir](https://www.python.org/downloads/) ‚Äî Windows x86\\-64 √ßalƒ±≈ütƒ±rƒ±labilir y√ºkleyiciyi se√ß\n\n"
            "üîπ *Adƒ±m 2: Kurulum*\n"
            "‚Äî \"Add Python to PATH\" kutucuƒüunu i≈üaretle\n"
            "‚Äî Customize installation ‚Üí Next ‚Üí Install for all users ‚Üí Install\n\n"
            "üîπ *Adƒ±m 3: Kurulumu doƒürula*\n"
            "Terminale ≈üunu yaz: `python --version` ‚Äî Python 3\\.X\\.X g√∂rmelisin\n\n"
            "üîπ *Adƒ±m 4: PyCharm'ƒ± indir*\n"
            "[PyCharm'ƒ± indir](https://www.jetbrains.com/pycharm/download) ‚Äî Community s√ºr√ºm√ºn√º y√ºkle\n\n"
            "üîπ *Adƒ±m 5: Python'u baƒüla*\n"
            "Yeni Proje ‚Üí ‚öôÔ∏è Yorumlayƒ±cƒ± Ekle ‚Üí Sistem Yorumlayƒ±cƒ± ‚Üí Yol:\n"
            "`C:/Program Files/Python3X/python.exe`\n\n"
            "‚úÖ *Kontrol:*\n"
            "Bir dosya olu≈ütur ve bu kodu yaz:\n"
            "```python\nprint(\"Hello, world!\")\n```\n"
            "‚ñ∂Ô∏è Tu≈üuna basarak √ßalƒ±≈ütƒ±r\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "heteroex":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="mindalnoe")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="asdasdad")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Python Ko≈üullu ƒ∞fadeler: if, elif, else*\n\n"
            "üîπ *Ko≈üullu ifade nedir?*\n"
            "‚Äî Belirli bir ko≈üul doƒüru olduƒüunda kod bloƒüunu √ßalƒ±≈ütƒ±rƒ±r.\n"
            "‚Äî if, elif ve else yapƒ±larƒ± kullanƒ±lƒ±r.\n\n"
            "üîπ *S√∂zdizimi √∂rneƒüi:*\n"
            "```python\n"
            "age = 16\n\n"
            "if age >= 18:\n"
            "    print(\"Yeti≈ükinsin\")\n"
            "elif age >= 14:\n"
            "    print(\"Gen√ßsin\")\n"
            "else:\n"
            "    print(\"√áocuksun\")\n"
            "```\n\n"
            "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Mantƒ±ksal operat√∂rler:* `and`, `or`, `not`\n\n"
            "‚úÖ *Kendin dene:*\n"
            "```python\n"
            "name = input(\"Adƒ±n nedir?: \")\n"
            "if name == \"Tom\":\n"
            "    print(\"Merhaba, Tom!\")\n"
            "else:\n"
            "    print(\"Merhaba, misafir!\")\n"
            "```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "asdasdad":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="heteroex")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="dameungrr")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üêç *Python: Deƒüi≈ükenler ve Veri T√ºrleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Veriyi saklamak i√ßin kullanƒ±lan isimlerdir, veri t√ºr√º otomatik belirlenir.\n\n"
                                      "üîπ *Deƒüi≈üken √∂rnekleri:*\n"
                                      "`x = 10` ‚Äî Tam sayƒ± (int)\n"
                                      "`name = \"Tom\"` ‚Äî Metin (str)\n"
                                      "`pi = 3.14` ‚Äî Ondalƒ±klƒ± sayƒ± (float)\n\n"
                                      "üîπ *Temel veri t√ºrleri:*\n"
                                      "- `int` ‚Äî Tam sayƒ±lar\n"
                                      "- `float` ‚Äî Ondalƒ±klƒ± sayƒ±lar\n"
                                      "- `str` ‚Äî Metin\n"
                                      "- `bool` ‚Äî Mantƒ±ksal deƒüerler: `True` veya `False`\n\n"
                                      "üîπ *Veri nasƒ±l yazdƒ±rƒ±lƒ±r?*\n"
                                      "`print(x)`\n"
                                      "`print(name)`\n"
                                      "`print(pi)`\n\n"
                                      "‚úÖ *Sen de dene!*\n"
                                      "```python\n"
                                      "age = 15\n"
                                      "city = \"Moskova\"\n"
                                      "is_student = True\n\n"
                                      "print(\"Ya≈ü:\", age)\n"
                                      "print(\"≈ûehir:\", city)\n"
                                      "print(\"√ñƒürenci mi:\", is_student)\n"
                                      "```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "mindalnoe":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="tutpalentiitam")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="nmvncmvnmckboikgjhbijojortgrdf")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: for ve while D√∂ng√ºleri*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu tekrar tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Genellikle listeler, sayƒ± dizileri veya diƒüer koleksiyonlarda gezinmek i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```python\n"
                                      "for i in range(5):\n"
                                      "    print(i)\n"
                                      "```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n\n"
                                      "üî∏ `range(5)` 0,1,2,3,4 dizisini olu≈üturur.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```python\n"
                                      "x = 0\n"
                                      "while x < 3:\n"
                                      "    print(x)\n"
                                      "    x += 1\n"
                                      "```\n"
                                      "‚Äî Ko≈üul doƒüru olduƒüu s√ºrece kod bloƒüu tekrar eder.\n\n"
                                      "============================\n"
                                      "üîπ *Bir liste √ºzerinde for d√∂ng√ºs√º ile gezinme:*\n"
                                      "```python\n"
                                      "fruits = [\"apple\", \"banana\", \"cherry\"]\n"
                                      "for fruit in fruits:\n"
                                      "    print(fruit)\n"
                                      "```\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- `for` koleksiyon √∂ƒüelerini teker teker i≈ülemek i√ßin uygundur\n"
                                      "- `while` ko≈üula baƒülƒ± olarak tekrar eder\n"
                                      "- D√∂ng√ºy√º erken sonlandƒ±rmak i√ßin `break` kullanƒ±lƒ±r\n\n"
                                      "üí° D√∂ng√ºler otomasyon ve veri i≈üleme i√ßin temel ara√ßlardƒ±r!\n"
                                      "Basit bir d√∂ng√º yazarak sayƒ± veya kelimeleri yazdƒ±rmayƒ± dene!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "nmvncmvnmckboikgjhbijojortgrdf":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="mindalnoe")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="asdasdad")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *Python Ko≈üullu ƒ∞fadeler: if, elif, else*\n\n"
            "üîπ *Ko≈üullu ifade nedir?*\n"
            "‚Äî Belirli bir ko≈üul doƒüru olduƒüunda kod bloƒüunu √ßalƒ±≈ütƒ±rƒ±r.\n"
            "‚Äî if, elif ve else yapƒ±larƒ± kullanƒ±lƒ±r.\n\n"
            "üîπ *S√∂zdizimi √∂rneƒüi:*\n"
            "```python\n"
            "age = 16\n\n"
            "if age >= 18:\n"
            "    print(\"Yeti≈ükinsin\")\n"
            "elif age >= 14:\n"
            "    print(\"Gen√ßsin\")\n"
            "else:\n"
            "    print(\"√áocuksun\")\n"
            "```\n\n"
            "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Mantƒ±ksal operat√∂rler:* `and`, `or`, `not`\n\n"
            "‚úÖ *Kendin dene:*\n"
            "```python\n"
            "name = input(\"Adƒ±n nedir?: \")\n"
            "if name == \"Tom\":\n"
            "    print(\"Merhaba, Tom!\")\n"
            "else:\n"
            "    print(\"Merhaba, misafir!\")\n"
            "```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "tutpalentiitam":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="yxxkai")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="sdvfenvbkjgnlbknkmopghk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: Listeler (List)*\n\n"
                                      "üîπ *Liste nedir?*\n"
                                      "‚Äî Sƒ±ralƒ± elemanlar koleksiyonudur.\n"
                                      "‚Äî Sayƒ±lar, metinler ve hatta ba≈üka listeler i√ßerebilir.\n\n"
                                      "============================\n"
                                      "üîπ *Liste √∂rneƒüi:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî √ú√ß metin elemanƒ± i√ßeren bir liste.\n\n"
                                      "üî∏ ƒ∞ndeks ile elemanlara eri≈üim:\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *Eleman deƒüi≈ütirme ve ekleme:*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # 'banana'yƒ± 'kiwi' ile deƒüi≈ütirir\nfruits.append(\"pear\")  # Yeni eleman ekler\n```\n\n"
                                      "============================\n"
                                      "üîπ *Listeyi d√∂ng√º ile gezme:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ Listedeki elemanlarƒ± tek tek yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler 0'dan ba≈ülar\n"
                                      "- Liste farklƒ± t√ºrden elemanlar i√ßerebilir\n"
                                      "- Listeler deƒüi≈ütirilebilir (eleman ekleyip √ßƒ±karabilirsiniz)\n\n"
                                      "üí° Listeler Python'da veri k√ºmeleri ile √ßalƒ±≈ümak i√ßin g√º√ßl√º ara√ßlardƒ±r.\n"
                                      "Kendi listenizi olu≈üturup bir d√∂ng√º ile gezmeyi deneyin!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "sdvfenvbkjgnlbknkmopghk":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="tutpalentiitam")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="nmvncmvnmckboikgjhbijojortgrdf")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Python: for ve while D√∂ng√ºleri*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu tekrar tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Genellikle listeler, sayƒ± dizileri veya diƒüer koleksiyonlarda gezinmek i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```python\n"
                                      "for i in range(5):\n"
                                      "    print(i)\n"
                                      "```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n\n"
                                      "üî∏ `range(5)` 0,1,2,3,4 dizisini olu≈üturur.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```python\n"
                                      "x = 0\n"
                                      "while x < 3:\n"
                                      "    print(x)\n"
                                      "    x += 1\n"
                                      "```\n"
                                      "‚Äî Ko≈üul doƒüru olduƒüu s√ºrece kod bloƒüu tekrar eder.\n\n"
                                      "============================\n"
                                      "üîπ *Bir liste √ºzerinde for d√∂ng√ºs√º ile gezinme:*\n"
                                      "```python\n"
                                      "fruits = [\"apple\", \"banana\", \"cherry\"]\n"
                                      "for fruit in fruits:\n"
                                      "    print(fruit)\n"
                                      "```\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- `for` koleksiyon √∂ƒüelerini teker teker i≈ülemek i√ßin uygundur\n"
                                      "- `while` ko≈üula baƒülƒ± olarak tekrar eder\n"
                                      "- D√∂ng√ºy√º erken sonlandƒ±rmak i√ßin `break` kullanƒ±lƒ±r\n\n"
                                      "üí° D√∂ng√ºler otomasyon ve veri i≈üleme i√ßin temel ara√ßlardƒ±r!\n"
                                      "Basit bir d√∂ng√º yazarak sayƒ± veya kelimeleri yazdƒ±rmayƒ± dene!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "yxxkai":
        keyboard = [[InlineKeyboardButton("son b√∂l√ºm", callback_data="csadadsfsav")]]
        reply_markup= InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è *Python: Fonksiyonlar (Functions)*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi yerine getiren kod bloƒüudur.\n"
                                      "‚Äî Fonksiyonlar, kod tekrarƒ±nƒ± √∂nler ve programƒ± daha okunabilir, d√ºzenli yapar.\n\n"
                                      "============================\n"
                                      "üîπ *Basit fonksiyon √∂rneƒüi:*\n"
                                      "```python\ndef say_hello():\n    print(\"Hello, world!\")\n\nsay_hello()  # Fonksiyon √ßaƒürƒ±lƒ±r\n```\n"
                                      "‚Äî `def` anahtar kelimesi, fonksiyon adƒ±, parantez ve iki nokta kullanƒ±lƒ±r.\n"
                                      "‚Äî Fonksiyon i√ßindeki kod sadece √ßaƒürƒ±ldƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Parametre alan fonksiyon:*\n"
                                      "```python\ndef greet(name):\n    print(\"Hello,\", name)\n\ngreet(\"Alice\")\n```\n"
                                      "‚Äî Fonksiyona deƒüer (arg√ºman) g√∂nderebilirsiniz.\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüer d√∂nd√ºren fonksiyon (`return`):*\n"
                                      "```python\ndef square(x):\n    return x * x\n\nresult = square(5)\nprint(result)\n```\n"
                                      "‚Äî `return` sonucu geri d√∂nd√ºr√ºr.\n"
                                      "‚Äî D√∂nen deƒüer bir deƒüi≈ükene atanabilir.\n\n"
                                      "============================\n"
                                      "‚úÖ *Neden fonksiyonlar √∂nemlidir?*\n"
                                      "- Kodu daha kƒ±sa ve okunabilir yapar\n"
                                      "- Aynƒ± kod bloƒüunu tekrar tekrar kullanmanƒ±zƒ± saƒülar\n"
                                      "- B√ºy√ºk programlarƒ± mantƒ±ksal par√ßalara b√∂ler\n\n"
                                      "üí° ƒ∞sminizi yazdƒ±ran bir fonksiyon, iki sayƒ±nƒ±n toplamƒ±nƒ± d√∂nd√ºren bir fonksiyon yazmayƒ± deneyin!\n"
                                      "Fonksiyonlar her programlama dilinin temelidir! üöÄ",
                                      parse_mode="Markdown",reply_markup = reply_markup
                                      )
    elif query.data == "csadadsfsav":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="yxxkai")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="sdvfenvbkjgnlbknkmopghk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Python: Listeler (List)*\n\n"
                                      "üîπ *Liste nedir?*\n"
                                      "‚Äî Sƒ±ralƒ± elemanlar koleksiyonudur.\n"
                                      "‚Äî Sayƒ±lar, metinler ve hatta ba≈üka listeler i√ßerebilir.\n\n"
                                      "============================\n"
                                      "üîπ *Liste √∂rneƒüi:*\n"
                                      "```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\n```\n"
                                      "‚Äî √ú√ß metin elemanƒ± i√ßeren bir liste.\n\n"
                                      "üî∏ ƒ∞ndeks ile elemanlara eri≈üim:\n"
                                      "`fruits[0]` ‚Üí \"apple\"\n"
                                      "`fruits[2]` ‚Üí \"cherry\"\n\n"
                                      "============================\n"
                                      "üîπ *Eleman deƒüi≈ütirme ve ekleme:*\n"
                                      "```python\nfruits[1] = \"kiwi\"  # 'banana'yƒ± 'kiwi' ile deƒüi≈ütirir\nfruits.append(\"pear\")  # Yeni eleman ekler\n```\n\n"
                                      "============================\n"
                                      "üîπ *Listeyi d√∂ng√º ile gezme:*\n"
                                      "```python\nfor fruit in fruits:\n    print(fruit)\n```\n"
                                      "üî∏ Listedeki elemanlarƒ± tek tek yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler 0'dan ba≈ülar\n"
                                      "- Liste farklƒ± t√ºrden elemanlar i√ßerebilir\n"
                                      "- Listeler deƒüi≈ütirilebilir (eleman ekleyip √ßƒ±karabilirsiniz)\n\n"
                                      "üí° Listeler Python'da veri k√ºmeleri ile √ßalƒ±≈ümak i√ßin g√º√ßl√º ara√ßlardƒ±r.\n"
                                      "Kendi listenizi olu≈üturup bir d√∂ng√º ile gezmeyi deneyin!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "CCCCG":
        keyboard = [[InlineKeyboardButton("‚öô Ba≈ülayƒ±n", callback_data="arang")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("¬´¬ª", reply_markup=reply_markup)

    elif query.data == "arang":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="brang")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ Kurulum ve Ba≈ülangƒ±√ß:*\n\n"
            "üîπ *Adƒ±m 1: Derleyiciyi Y√ºkleyin*\n"
            "[MinGW ƒ∞ndir](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî GCC derleyicisini y√ºkleyin ve `bin` klas√∂r√ºn√ºn yolunu sistem PATH deƒüi≈ükenine ekleyin.\n\n"
            "üîπ *Adƒ±m 2: Edit√∂r√º ƒ∞ndirin*\n"
            "[Visual Studio Code ƒ∞ndir](https://code.visualstudio.com/)\n\n"
            "üîπ *Adƒ±m 3: Derleyiciyi Kontrol Edin*\n"
            "`g++ --version`\n\n"
            "üîπ *Adƒ±m 4: Basit Kod Yazƒ±n*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "Dosyayƒ± `main.cpp` olarak kaydedin, derlemek i√ßin:\n"
            "`g++ main.cpp -o main`\n"
            "√áalƒ±≈ütƒ±rmak i√ßin:\n"
            "`./main`",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "brang":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="crang")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="dizdizodi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
            "üîπ *Deƒüi≈üken nedir?*\n"
            "‚Äî Veri depolamak i√ßin kullanƒ±lan isimlendirilmi≈ü bellek alanƒ±dƒ±r.\n"
            "‚Äî Deƒüi≈ükeni kullanmadan √∂nce tipini belirtmek gerekir.\n\n"
            "üîπ *√ñrnekler:*\n"
            "`int age = 15;`  // Tam sayƒ±\n"
            "`double pi = 3.14;`  // Ondalƒ±klƒ± sayƒ±\n"
            "`char grade = 'A';`  // Karakter\n"
            "`bool isOnline = true;`  // Boolean (doƒüru/yanlƒ±≈ü)\n"
            "`std::string name = \"Tom\";`  // String (metin)\n\n"
            "üîπ *√áƒ±ktƒ± √∂rneƒüi:*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"ƒ∞sim: \" << name << \"\\n\";\n"
            "    std::cout << \"Ya≈ü: \" << age << \"\\n\";\n    return 0;\n}\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "dizdizodi":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="brang")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++ Kurulum ve Ba≈ülangƒ±√ß:*\n\n"
            "üîπ *Adƒ±m 1: Derleyiciyi Y√ºkleyin*\n"
            "[MinGW ƒ∞ndir](https://sourceforge.net/projects/mingw/)\n"
            "‚Äî GCC derleyicisini y√ºkleyin ve `bin` klas√∂r√ºn√ºn yolunu sistem PATH deƒüi≈ükenine ekleyin.\n\n"
            "üîπ *Adƒ±m 2: Edit√∂r√º ƒ∞ndirin*\n"
            "[Visual Studio Code ƒ∞ndir](https://code.visualstudio.com/)\n\n"
            "üîπ *Adƒ±m 3: Derleyiciyi Kontrol Edin*\n"
            "`g++ --version`\n\n"
            "üîπ *Adƒ±m 4: Basit Kod Yazƒ±n*\n"
            "```cpp\n#include <iostream>\nint main() {\n"
            "    std::cout << \"Hello, world!\";\n    return 0;\n}\n```\n"
            "Dosyayƒ± `main.cpp` olarak kaydedin, derlemek i√ßin:\n"
            "`g++ main.cpp -o main`\n"
            "√áalƒ±≈ütƒ±rmak i√ßin:\n"
            "`./main`",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "crang":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="jinggrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="nudemeeamputirovat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: Ko≈üullu ƒ∞fadeler (if, else, else if)*\n\n"
            "üîπ *Ko≈üul nedir?*\n"
            "‚Äî Belirli bir ko≈üul doƒüru olduƒüunda ilgili kod bloƒüu √ßalƒ±≈üƒ±r.\n\n"
            "üîπ *√ñrnek:*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"Yeti≈ükinsiniz\";\n"
            "    } else if (age >= 14) {\n        cout << \"Gen√ßsiniz\";\n"
            "    } else {\n        cout << \"√áocuksunuz\";\n    }\n"
            "    return 0;\n}\n```\n\n"
            "üîπ *Operat√∂rler:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Mantƒ±ksal operat√∂rler:* `&&`, `||`, `!`\n\n"
            "‚úÖ *Kendin bir ko≈üullu ifade yazmayƒ± dene!*",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "nudemeeamputirovat":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="crang")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="dizdizodi")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *C++: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
            "üîπ *Deƒüi≈üken nedir?*\n"
            "‚Äî Veri depolamak i√ßin kullanƒ±lan isimlendirilmi≈ü bellek alanƒ±dƒ±r.\n"
            "‚Äî Deƒüi≈ükeni kullanmadan √∂nce tipini belirtmek gerekir.\n\n"
            "üîπ *√ñrnekler:*\n"
            "`int age = 15;`  // Tam sayƒ±\n"
            "`double pi = 3.14;`  // Ondalƒ±klƒ± sayƒ±\n"
            "`char grade = 'A';`  // Karakter\n"
            "`bool isOnline = true;`  // Boolean (doƒüru/yanlƒ±≈ü)\n"
            "`std::string name = \"Tom\";`  // String (metin)\n\n"
            "üîπ *√áƒ±ktƒ± √∂rneƒüi:*\n"
            "```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n"
            "    int age = 15;\n    std::string name = \"Tom\";\n"
            "    std::cout << \"ƒ∞sim: \" << name << \"\\n\";\n"
            "    std::cout << \"Ya≈ü: \" << age << \"\\n\";\n    return 0;\n}\n```\n",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    elif query.data == "jinggrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="venussrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="vsexoroshoharry")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÅ *C++: D√∂ng√ºler (for, while, do while)*\n\n"
            "üîπ *D√∂ng√º nedir?*\n"
            "‚Äî Belirli bir ko≈üul saƒülandƒ±ƒüƒ±nda aynƒ± kod bloƒüunu tekrar tekrar √ßalƒ±≈ütƒ±rƒ±r.\n\n"
            "üîπ *C++'da d√∂ng√º t√ºrleri:*\n"
            "- `for` ‚Äî √áalƒ±≈üma sayƒ±sƒ± √∂nceden biliniyorsa kullanƒ±lƒ±r\n"
            "- `while` ‚Äî Ko≈üul doƒüru olduƒüu s√ºrece devam eder\n"
            "- `do while` ‚Äî √ñnce bir kez √ßalƒ±≈üƒ±r, sonra ko≈üulu kontrol eder\n\n"
            "============================\n"
            "üîπ *for √∂rneƒüi:*\n"
            "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
            "üî∏ √áƒ±ktƒ±: `0 1 2 3 4`\n\n"
            "============================\n"
            "üîπ *while √∂rneƒüi:*\n"
            "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
            "üî∏ √áƒ±ktƒ±: `0`, `1`, `2`\n\n"
            "============================\n"
            "üîπ *do while √∂rneƒüi:*\n"
            "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
            "üî∏ √áƒ±ktƒ±: `0`, `1`\n\n"
            "============================\n"
            "‚úÖ *Ne zaman kullanƒ±lƒ±r?*\n"
            "- `for` ‚Äî √áalƒ±≈üma sayƒ±sƒ± bilindiƒüinde (√∂rn: `i = 0; i < N; i++`)\n"
            "- `while` ‚Äî √áalƒ±≈üma sayƒ±sƒ± bilinmediƒüinde\n"
            "- `do while` ‚Äî En az bir kere √ßalƒ±≈ümasƒ± gerektiƒüinde\n\n"
            "üí° Kendi d√∂ng√ºn√º yazmayƒ± dene!",
            parse_mode="Markdown",
            reply_markup=reply_markup)
    elif query.data == "vsexoroshoharry":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="jinggrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="nudemeeamputirovat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß† *C++: Ko≈üullu ƒ∞fadeler (if, else, else if)*\n\n"
            "üîπ *Ko≈üul nedir?*\n"
            "‚Äî Belirli bir ko≈üul doƒüru olduƒüunda ilgili kod bloƒüu √ßalƒ±≈üƒ±r.\n\n"
            "üîπ *√ñrnek:*\n"
            "```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n"
            "    int age = 16;\n"
            "    if (age >= 18) {\n        cout << \"Yeti≈ükinsiniz\";\n"
            "    } else if (age >= 14) {\n        cout << \"Gen√ßsiniz\";\n"
            "    } else {\n        cout << \"√áocuksunuz\";\n    }\n"
            "    return 0;\n}\n```\n\n"
            "üîπ *Operat√∂rler:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
            "üîπ *Mantƒ±ksal operat√∂rler:* `&&`, `||`, `!`\n\n"
            "‚úÖ *Kendin bir ko≈üullu ifade yazmayƒ± dene!*",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "venussrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="zerorank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="mymashine")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: Diziler (Arrays)*\n\n"
                                      "üîπ *Dizi nedir?*\n"
                                      "‚Äî Aynƒ± t√ºrden elemanlarƒ±n ardƒ±≈üƒ±k olarak bellekte saklanmasƒ±dƒ±r.\n"
                                      "‚Äî Her elemanƒ±n bir indeks numarasƒ± vardƒ±r (0'dan ba≈ülar).\n\n"
                                      "============================\n"
                                      "üîπ *Dizi √∂rneƒüi:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî 5 elemanlƒ± bir int dizisi olu≈üturur.\n\n"
                                      "üî∏ Elemanlara eri≈üim:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Dizinin t√ºm elemanlarƒ±nƒ± d√∂ng√º ile yazdƒ±rma:*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ √áƒ±ktƒ±: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan deƒüer alma:*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ 3 sayƒ± diziye kaydedilir.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler `0` ile `n - 1` arasƒ±ndadƒ±r\n"
                                      "- Dizinin sƒ±nƒ±rlarƒ± dƒ±≈üƒ±na √ßƒ±kmak hata (tanƒ±msƒ±z davranƒ±≈ü) olu≈üturur ‚ùå\n"
                                      "- T√ºm elemanlar aynƒ± t√ºrde olmalƒ±dƒ±r (int, float, char vb.)\n\n"
                                      "üí° Diziler temeldir. Diziler sayesinde bellek y√∂netimini, sƒ±ralamayƒ± ve algoritmalarƒ± √∂ƒürenirsin!\n\n"
                                      "Kendi dizini olu≈ütur ve elemanlarƒ±nƒ± yazdƒ±rmayƒ± dene!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "mymashine":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="venussrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="vsexoroshoharry")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîÅ *C++: D√∂ng√ºler (for, while, do while)*\n\n"
            "üîπ *D√∂ng√º nedir?*\n"
            "‚Äî Belirli bir ko≈üul saƒülandƒ±ƒüƒ±nda aynƒ± kod bloƒüunu tekrar tekrar √ßalƒ±≈ütƒ±rƒ±r.\n\n"
            "üîπ *C++'da d√∂ng√º t√ºrleri:*\n"
            "- `for` ‚Äî √áalƒ±≈üma sayƒ±sƒ± √∂nceden biliniyorsa kullanƒ±lƒ±r\n"
            "- `while` ‚Äî Ko≈üul doƒüru olduƒüu s√ºrece devam eder\n"
            "- `do while` ‚Äî √ñnce bir kez √ßalƒ±≈üƒ±r, sonra ko≈üulu kontrol eder\n\n"
            "============================\n"
            "üîπ *for √∂rneƒüi:*\n"
            "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << i << \" \";\n}\n```\n"
            "üî∏ √áƒ±ktƒ±: `0 1 2 3 4`\n\n"
            "============================\n"
            "üîπ *while √∂rneƒüi:*\n"
            "```cpp\nint i = 0;\nwhile (i < 3) {\n    cout << i << endl;\n    i++;\n}\n```\n"
            "üî∏ √áƒ±ktƒ±: `0`, `1`, `2`\n\n"
            "============================\n"
            "üîπ *do while √∂rneƒüi:*\n"
            "```cpp\nint i = 0;\ndo {\n    cout << i << endl;\n    i++;\n} while (i < 2);\n```\n"
            "üî∏ √áƒ±ktƒ±: `0`, `1`\n\n"
            "============================\n"
            "‚úÖ *Ne zaman kullanƒ±lƒ±r?*\n"
            "- `for` ‚Äî √áalƒ±≈üma sayƒ±sƒ± bilindiƒüinde (√∂rn: `i = 0; i < N; i++`)\n"
            "- `while` ‚Äî √áalƒ±≈üma sayƒ±sƒ± bilinmediƒüinde\n"
            "- `do while` ‚Äî En az bir kere √ßalƒ±≈ümasƒ± gerektiƒüinde\n\n"
            "üí° Kendi d√∂ng√ºn√º yazmayƒ± dene!",
            parse_mode="Markdown",
            reply_markup=reply_markup)

    elif query.data == "zerorank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="amburanrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="vnncvnmcmcvmncv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: Diziler (Strings)*\n\n"
                                      "üîπ *String nedir?*\n"
                                      "‚Äî Bir dizi karakter, √∂rneƒüin isimler veya kelimeler.\n"
                                      "‚Äî C++‚Äôda karakter dizisi (char array) veya `std::string` sƒ±nƒ±fƒ± kullanƒ±labilir.\n\n"
                                      "============================\n"
                                      "üîπ *Karakter dizisi olarak string:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ `\\0` karakteri otomatik olarak sona eklenir ve string sonunu i≈üaret eder.\n"
                                      "üî∏ Dizi boyutu string uzunluƒüundan b√ºy√ºk olmalƒ±dƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *`std::string` kullanƒ±mƒ±:*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî Bu y√∂ntem daha kolay ve g√ºvenlidir.\n\n"
                                      "============================\n"
                                      "üîπ *Temel i≈ülemler:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // String yazdƒ±rma\n"
                                      "cout << name.length() << endl; // String uzunluƒüu\n"
                                      "name += \" Hardy\";             // String birle≈ütirme\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan string alma:*\n"
                                      "```cpp\nstd::string userName;\ncout << \"ƒ∞sminizi girin: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` bo≈ülukta durur. T√ºm satƒ±rƒ± okumak i√ßin:\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- `std::string` karakter dizisinden daha kolay ve g√ºvenlidir\n"
                                      "- Kolayca birle≈ütirme, uzunluk alma, karakter arama yapabilirsiniz\n"
                                      "- Kiril alfabesi veya Unicode i≈ülemleri i√ßin kodlama ayarƒ± gerekebilir\n\n"
                                      "üí° Stringler metin, form ve mesaj i≈ülemenin temelidir!\n"
                                      "Kendi stringinizi olu≈üturup yazdƒ±rmayƒ± deneyin! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "vnncvnmcmcvmncv":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="zerorank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="mymashine")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C++: Diziler (Arrays)*\n\n"
                                      "üîπ *Dizi nedir?*\n"
                                      "‚Äî Aynƒ± t√ºrden elemanlarƒ±n ardƒ±≈üƒ±k olarak bellekte saklanmasƒ±dƒ±r.\n"
                                      "‚Äî Her elemanƒ±n bir indeks numarasƒ± vardƒ±r (0'dan ba≈ülar).\n\n"
                                      "============================\n"
                                      "üîπ *Dizi √∂rneƒüi:*\n"
                                      "```cpp\nint numbers[5] = {10, 20, 30, 40, 50};\n```\n"
                                      "‚Äî 5 elemanlƒ± bir int dizisi olu≈üturur.\n\n"
                                      "üî∏ Elemanlara eri≈üim:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *Dizinin t√ºm elemanlarƒ±nƒ± d√∂ng√º ile yazdƒ±rma:*\n"
                                      "```cpp\nfor (int i = 0; i < 5; i++) {\n    cout << numbers[i] << \" \";\n}\n```\n"
                                      "üî∏ √áƒ±ktƒ±: `10 20 30 40 50`\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan deƒüer alma:*\n"
                                      "```cpp\nint a[3];\nfor (int i = 0; i < 3; i++) {\n    cin >> a[i];\n}\n```\n"
                                      "üî∏ 3 sayƒ± diziye kaydedilir.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler `0` ile `n - 1` arasƒ±ndadƒ±r\n"
                                      "- Dizinin sƒ±nƒ±rlarƒ± dƒ±≈üƒ±na √ßƒ±kmak hata (tanƒ±msƒ±z davranƒ±≈ü) olu≈üturur ‚ùå\n"
                                      "- T√ºm elemanlar aynƒ± t√ºrde olmalƒ±dƒ±r (int, float, char vb.)\n\n"
                                      "üí° Diziler temeldir. Diziler sayesinde bellek y√∂netimini, sƒ±ralamayƒ± ve algoritmalarƒ± √∂ƒürenirsin!\n\n"
                                      "Kendi dizini olu≈ütur ve elemanlarƒ±nƒ± yazdƒ±rmayƒ± dene!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "amburanrank":
        keyboard = [
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="kadisher")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C++: Fonksiyonlar (Functions)*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi yerine getiren kod bloƒüudur.\n"
                                      "‚Äî Kodun d√ºzenlenmesine yardƒ±mcƒ± olur ve tekrarƒ± √∂nler.\n\n"
                                      "============================\n"
                                      "üîπ *Basit fonksiyon √∂rneƒüi:*\n"
                                      "```cpp\nvoid sayHello() {\n    cout << \"Hello, world!\" << endl;\n}\n\nint main() {\n    sayHello();\n    return 0;\n}\n```\n"
                                      "‚Äî `void` fonksiyonun geri d√∂n√º≈ü deƒüeri olmadƒ±ƒüƒ±nƒ± belirtir.\n"
                                      "‚Äî Fonksiyon adƒ±yla √ßaƒürƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Parametre alan fonksiyon:*\n"
                                      "```cpp\nvoid greet(string name) {\n    cout << \"Hello, \" << name << endl;\n}\n\nint main() {\n    greet(\"Alice\");\n    return 0;\n}\n```\n"
                                      "‚Äî Fonksiyona veri g√∂nderebilirsiniz.\n"
                                      "‚Äî Parametreler parantez i√ßinde tanƒ±mlanƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Geri d√∂n√º≈ü deƒüeri olan fonksiyon:*\n"
                                      "```cpp\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int res = square(5);\n    cout << res;\n    return 0;\n}\n```\n"
                                      "‚Äî Geri d√∂n√º≈ü tipi belirtilir (√∂rneƒüin `int`).\n"
                                      "‚Äî `return` ile sonu√ß d√∂nd√ºr√ºl√ºr.\n\n"
                                      "============================\n"
                                      "‚úÖ *Neden fonksiyonlar √∂nemlidir?*\n"
                                      "- Kodun daha temiz ve anla≈üƒ±lƒ±r olmasƒ±nƒ± saƒülar\n"
                                      "- Aynƒ± kodu tekrar tekrar kullanmaya izin verir\n"
                                      "- B√ºy√ºk programlarƒ± k√º√ß√ºk par√ßalara b√∂lmeyi kolayla≈ütƒ±rƒ±r\n\n"
                                      "üí° ƒ∞ki sayƒ± alan ve toplamlarƒ±nƒ± d√∂nd√ºren bir fonksiyon yazmayƒ± dene!\n"
                                      "Fonksiyonlar iyi C++ kodunun temelidir! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "kadisher":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="amburanrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="vnncvnmcmcvmncv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üî§ *C++: Diziler (Strings)*\n\n"
                                      "üîπ *String nedir?*\n"
                                      "‚Äî Bir dizi karakter, √∂rneƒüin isimler veya kelimeler.\n"
                                      "‚Äî C++‚Äôda karakter dizisi (char array) veya `std::string` sƒ±nƒ±fƒ± kullanƒ±labilir.\n\n"
                                      "============================\n"
                                      "üîπ *Karakter dizisi olarak string:*\n"
                                      "```cpp\nchar name[6] = \"Tom\";\n```\n"
                                      "üî∏ `\\0` karakteri otomatik olarak sona eklenir ve string sonunu i≈üaret eder.\n"
                                      "üî∏ Dizi boyutu string uzunluƒüundan b√ºy√ºk olmalƒ±dƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *`std::string` kullanƒ±mƒ±:*\n"
                                      "```cpp\n#include <string>\n\nstd::string city = \"Baku\";\n```\n"
                                      "‚Äî Bu y√∂ntem daha kolay ve g√ºvenlidir.\n\n"
                                      "============================\n"
                                      "üîπ *Temel i≈ülemler:*\n"
                                      "```cpp\nstd::string name = \"Tom\";\n\n"
                                      "cout << name << endl;         // String yazdƒ±rma\n"
                                      "cout << name.length() << endl; // String uzunluƒüu\n"
                                      "name += \" Hardy\";             // String birle≈ütirme\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan string alma:*\n"
                                      "```cpp\nstd::string userName;\ncout << \"ƒ∞sminizi girin: \";\ncin >> userName;\n```\n"
                                      "‚ùó `cin` bo≈ülukta durur. T√ºm satƒ±rƒ± okumak i√ßin:\n"
                                      "```cpp\nstd::string fullName;\ngetline(cin, fullName);\n```\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- `std::string` karakter dizisinden daha kolay ve g√ºvenlidir\n"
                                      "- Kolayca birle≈ütirme, uzunluk alma, karakter arama yapabilirsiniz\n"
                                      "- Kiril alfabesi veya Unicode i≈ülemleri i√ßin kodlama ayarƒ± gerekebilir\n\n"
                                      "üí° Stringler metin, form ve mesaj i≈ülemenin temelidir!\n"
                                      "Kendi stringinizi olu≈üturup yazdƒ±rmayƒ± deneyin! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "sriplara":
        keyboard = [[InlineKeyboardButton("‚öô Ba≈ülayƒ±n", callback_data="metalsonic")]
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Hadi ba≈ülayalƒ±m! \nB√∂l√ºm 1:", reply_markup=reply_markup)
    elif query.data == "metalsonic":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="lexxrank")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript Kurulum ve Ba≈ülangƒ±√ß:*\n\n"
                                      "üîπ *Adƒ±m 1: Edit√∂r ƒ∞ndir*\n"
                                      "[Visual Studio Code'u ƒ∞ndir](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Adƒ±m 2: Node.js Kurulumunu Kontrol Et*\n"
                                      "[Node.js'i ƒ∞ndir](https://nodejs.org/)\n"
                                      "‚Äî Kurulum sonrasƒ± s√ºr√ºm√º kontrol et:\n"
                                      "`node --version`\n\n"
                                      "üîπ *Adƒ±m 3: Basit Kod Yaz*\n"
                                      "`main.js` dosyasƒ±nƒ± olu≈ütur ve i√ßine ≈üunu yaz:\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "Terminalde √ßalƒ±≈ütƒ±r:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript, web sitesi, bot ve uygulama yapmaya ba≈ülamak i√ßin ilk adƒ±mdƒ±r!*",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "lexxrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="lexturank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="kuzshineko")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Verileri saklamak i√ßin kullanƒ±lan isimlendirilmi≈ü konteynerlerdir.\n"
                                      "‚Äî `let`, `const` veya eski `var` ile tanƒ±mlanƒ±r.\n\n"
                                      "üîπ *√ñrnekler:*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Konsola yazdƒ±rmak:*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"Name:\", name);\nconsole.log(\"Age:\", age);\n```\n"
                                      "üí° *ƒ∞pucu:* Deƒüi≈ümeyen deƒüerler i√ßin `const`, deƒüi≈üebilenler i√ßin `let` kullanƒ±lƒ±r.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "kuzshineko":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="lexxrank")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript Kurulum ve Ba≈ülangƒ±√ß:*\n\n"
                                      "üîπ *Adƒ±m 1: Edit√∂r ƒ∞ndir*\n"
                                      "[Visual Studio Code'u ƒ∞ndir](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Adƒ±m 2: Node.js Kurulumunu Kontrol Et*\n"
                                      "[Node.js'i ƒ∞ndir](https://nodejs.org/)\n"
                                      "‚Äî Kurulum sonrasƒ± s√ºr√ºm√º kontrol et:\n"
                                      "`node --version`\n\n"
                                      "üîπ *Adƒ±m 3: Basit Kod Yaz*\n"
                                      "`main.js` dosyasƒ±nƒ± olu≈ütur ve i√ßine ≈üunu yaz:\n"
                                      "```js\nconsole.log(\"Hello, world!\");\n```\n"
                                      "Terminalde √ßalƒ±≈ütƒ±r:\n"
                                      "`node main.js`\n\n"
                                      "üí° *JavaScript, web sitesi, bot ve uygulama yapmaya ba≈ülamak i√ßin ilk adƒ±mdƒ±r!*",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )


    elif query.data == "lexturank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="porscrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="puntik")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Ko≈üullar ve Kar≈üƒ±la≈ütƒ±rmalar*\n\n"
                                      "üîπ *Ko≈üul nedir?*\n"
                                      "‚Äî Bir kontrol t√ºr√ºd√ºr; ko≈üul `true` olduƒüunda, kod bloƒüu √ßalƒ±≈üƒ±r.\n"
                                      "‚Äî JavaScript'te `if` deyimi ile yapƒ±lƒ±r.\n\n"
                                      "üîπ *√ñrnek:*\n"
                                      "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"Giri≈ü izinli\");\n} else {\n    console.log(\"Giri≈ü reddedildi\");\n}\n```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:*\n"
                                      "`==` ‚Äî Deƒüer e≈üitliƒüi (tip d√∂n√º≈ü√ºm√º yapar)\n"
                                      "`===` ‚Äî Katƒ± e≈üitlik (tip ve deƒüer e≈üit)\n"
                                      "`!=` ‚Äî E≈üit deƒüil (deƒüer bazƒ±nda)\n"
                                      "`!==` ‚Äî Katƒ± e≈üit deƒüil (tip veya deƒüer farklƒ±)\n"
                                      "`>` ‚Äî B√ºy√ºk\n"
                                      "`<` ‚Äî K√º√ß√ºk\n"
                                      "`>=` ‚Äî B√ºy√ºk veya e≈üit\n"
                                      "`<=` ‚Äî K√º√ß√ºk veya e≈üit\n\n"
                                      "üí° *√ñnemli:* Tip d√∂n√º≈ü√ºm√º hatalarƒ±nƒ± √∂nlemek i√ßin `===` ve `!==` kullanƒ±lmasƒ± tavsiye edilir.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "puntik":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="lexturank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="kuzshineko")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Verileri saklamak i√ßin kullanƒ±lan isimlendirilmi≈ü konteynerlerdir.\n"
                                      "‚Äî `let`, `const` veya eski `var` ile tanƒ±mlanƒ±r.\n\n"
                                      "üîπ *√ñrnekler:*\n"
                                      "`let age = 15;`\n"
                                      "`const pi = 3.14;`\n"
                                      "`let name = \"Tom\";`\n"
                                      "`let isOnline = true;`\n\n"
                                      "üîπ *Konsola yazdƒ±rmak:*\n"
                                      "```js\nlet age = 15;\nlet name = \"Tom\";\nconsole.log(\"Name:\", name);\nconsole.log(\"Age:\", age);\n```\n"
                                      "üí° *ƒ∞pucu:* Deƒüi≈ümeyen deƒüerler i√ßin `const`, deƒüi≈üebilenler i√ßin `let` kullanƒ±lƒ±r.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "porscrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="ferrarirank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="gansdifjjdifjkonjffdu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Mantƒ±ksal Operat√∂rler*\n\n"
                                      "üîπ *Mantƒ±ksal operat√∂r nedir?*\n"
                                      "‚Äî Birden fazla ko≈üulu birle≈ütirmek i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Aynƒ± anda birden √ßok ko≈üulun doƒüru olup olmadƒ±ƒüƒ±nƒ± kontrol eder.\n\n"
                                      "üîπ *Yaygƒ±n mantƒ±ksal operat√∂rler:*\n"
                                      "`&&` ‚Äî Ve (t√ºm ko≈üullar doƒüru olmalƒ±)\n"
                                      "`||` ‚Äî Veya (en az bir ko≈üul doƒüru)\n"
                                      "`!` ‚Äî Deƒüil (ko≈üulun tersini alƒ±r)\n\n"
                                      "üîπ *√ñrnekler:*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"Giri≈ü izinli\");\n} else {\n    console.log(\"Giri≈ü reddedildi\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"Kullanƒ±cƒ± √ßevrimdƒ±≈üƒ±\");\n}\n```\n\n"
                                      "üí° *√ñnemli:* √ñncelik parantez ile belirlenir, sonra mantƒ±ksal i≈ülemler gelir.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )
    elif query.data == "gansdifjjdifjkonjffdu":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="porscrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="puntik")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Ko≈üullar ve Kar≈üƒ±la≈ütƒ±rmalar*\n\n"
                                      "üîπ *Ko≈üul nedir?*\n"
                                      "‚Äî Bir kontrol t√ºr√ºd√ºr; ko≈üul `true` olduƒüunda, kod bloƒüu √ßalƒ±≈üƒ±r.\n"
                                      "‚Äî JavaScript'te `if` deyimi ile yapƒ±lƒ±r.\n\n"
                                      "üîπ *√ñrnek:*\n"
                                      "```js\nlet age = 18;\nif (age >= 18) {\n    console.log(\"Giri≈ü izinli\");\n} else {\n    console.log(\"Giri≈ü reddedildi\");\n}\n```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:*\n"
                                      "`==` ‚Äî Deƒüer e≈üitliƒüi (tip d√∂n√º≈ü√ºm√º yapar)\n"
                                      "`===` ‚Äî Katƒ± e≈üitlik (tip ve deƒüer e≈üit)\n"
                                      "`!=` ‚Äî E≈üit deƒüil (deƒüer bazƒ±nda)\n"
                                      "`!==` ‚Äî Katƒ± e≈üit deƒüil (tip veya deƒüer farklƒ±)\n"
                                      "`>` ‚Äî B√ºy√ºk\n"
                                      "`<` ‚Äî K√º√ß√ºk\n"
                                      "`>=` ‚Äî B√ºy√ºk veya e≈üit\n"
                                      "`<=` ‚Äî K√º√ß√ºk veya e≈üit\n\n"
                                      "üí° *√ñnemli:* Tip d√∂n√º≈ü√ºm√º hatalarƒ±nƒ± √∂nlemek i√ßin `===` ve `!==` kullanƒ±lmasƒ± tavsiye edilir.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )


    elif query.data == "ferrarirank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="dodorank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchadasdfgvfrgt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: D√∂ng√ºler*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu birden √ßok kez tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Genellikle diziler √ºzerinde i≈ülem yapmak, tekrar eden g√∂revler ve otomasyon i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n"
                                      "`i++` her d√∂ng√º sonunda sayacƒ± 1 artƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî `x < 3` ko≈üulu doƒüru olduƒüu s√ºrece kod bloƒüunu tekrarlar.\n\n"
                                      "============================\n"
                                      "üîπ *do...while d√∂ng√ºs√º*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî Ko≈üul doƒüru olmasa bile en az bir kez √ßalƒ±≈üƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Dizi elemanlarƒ±nƒ± iterasyon √∂rneƒüi*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî Dizideki t√ºm elemanlarƒ± teker teker okur.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- Sonsuz d√∂ng√ºye dikkat edin (sayacƒ± g√ºncellemeyi unutmayƒ±n!)\n"
                                      "- `break` ile d√∂ng√ºy√º erken sonlandƒ±rabilirsiniz\n"
                                      "- `continue` ile o iterasyonu atlayabilirsiniz\n\n"
                                      "üí° D√∂ng√ºler, veri yapƒ±larƒ± ve otomasyon i√ßin kritik ara√ßlardƒ±r!\n"
                                      "10'dan 1'e geriye sayan bir d√∂ng√º yazmayƒ± deneyin! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "crchadasdfgvfrgt":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="ferrarirank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="gansdifjjdifjkonjffdu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Mantƒ±ksal Operat√∂rler*\n\n"
                                      "üîπ *Mantƒ±ksal operat√∂r nedir?*\n"
                                      "‚Äî Birden fazla ko≈üulu birle≈ütirmek i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Aynƒ± anda birden √ßok ko≈üulun doƒüru olup olmadƒ±ƒüƒ±nƒ± kontrol eder.\n\n"
                                      "üîπ *Yaygƒ±n mantƒ±ksal operat√∂rler:*\n"
                                      "`&&` ‚Äî Ve (t√ºm ko≈üullar doƒüru olmalƒ±)\n"
                                      "`||` ‚Äî Veya (en az bir ko≈üul doƒüru)\n"
                                      "`!` ‚Äî Deƒüil (ko≈üulun tersini alƒ±r)\n\n"
                                      "üîπ *√ñrnekler:*\n"
                                      "```js\nlet age = 20;\nlet hasPassport = true;\n\nif (age >= 18 && hasPassport) {\n    console.log(\"Giri≈ü izinli\");\n} else {\n    console.log(\"Giri≈ü reddedildi\");\n}\n```\n\n"
                                      "```js\nlet isOnline = false;\nif (!isOnline) {\n    console.log(\"Kullanƒ±cƒ± √ßevrimdƒ±≈üƒ±\");\n}\n```\n\n"
                                      "üí° *√ñnemli:* √ñncelik parantez ile belirlenir, sonra mantƒ±ksal i≈ülemler gelir.",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup
                                      )

    elif query.data == "dodorank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="srtrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="zikozikzokzizozokz")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Fonksiyonlara Giri≈ü*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli g√∂revleri yerine getiren isimlendirilmi≈ü kod bloƒüudur.\n"
                                      "‚Äî Aynƒ± kodu tekrar yazmadan tekrar tekrar √ßaƒüƒ±rabilirsiniz.\n"
                                      "‚Äî Yapƒ±sal programlamanƒ±n temelidir.\n\n"
                                      "üîπ *Neden fonksiyon kullanmalƒ±yƒ±z?*\n"
                                      "‚úî Tekrarlayan kodlardan ka√ßƒ±nmak\n"
                                      "‚úî Programƒ± mantƒ±ksal mod√ºllere ayƒ±rmak\n"
                                      "‚úî Parametre (arguments) alƒ±p sonu√ß d√∂nd√ºrebilmek\n\n"
                                      "üîπ *Basit fonksiyon √∂rneƒüi:*\n"
                                      "```js\nfunction sayHello() {\n  console.log(\"Hello!\");\n}\n\nsayHello(); // Fonksiyon √ßaƒürƒ±sƒ±\n```\n"
                                      "üí° `sayHello` her √ßaƒürƒ±ldƒ±ƒüƒ±nda \"Hello!\" yazar.\n\n"
                                      "üîπ *Parametreli fonksiyon:*\n"
                                      "```js\nfunction greet(name) {\n  console.log(\"Hello, \" + name);\n}\n\ngreet(\"Tom\");\ngreet(\"Anna\");\n```\n"
                                      "üí° `name` parametresi farklƒ± deƒüerler alarak √ßƒ±ktƒ±yƒ± kontrol etmeni saƒülar.\n\n"
                                      "üîπ *Deƒüer d√∂nd√ºren fonksiyon:*\n"
                                      "```js\nfunction square(number) {\n  return number * number;\n}\n\nconsole.log(square(4)); // 16\n```\n"
                                      "üí° `return` sonucu geri d√∂nd√ºr√ºr ve ba≈üka yerlerde kullanƒ±labilir.\n\n"
                                      "üîπ *Unutma:*\n"
                                      "‚úî Fonksiyonlar √ßaƒürƒ±lmadan √∂nce tanƒ±mlanmalƒ±\n"
                                      "‚úî ƒ∞√ßindeki kod sadece √ßaƒürƒ±ldƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r\n"
                                      "‚úî Birden fazla parametre alabilir\n\n"
                                      "Fonksiyonlar kodunu temiz, esnek ve kolay y√∂netilebilir yapar! üöÄ",

                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "zikozikzokzizozokz":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="dodorank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchadasdfgvfrgt")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÅ *JavaScript: D√∂ng√ºler*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu birden √ßok kez tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Genellikle diziler √ºzerinde i≈ülem yapmak, tekrar eden g√∂revler ve otomasyon i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º*\n"
                                      "```js\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n"
                                      "`i++` her d√∂ng√º sonunda sayacƒ± 1 artƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º*\n"
                                      "```js\nlet x = 0;\nwhile (x < 3) {\n    console.log(x);\n    x++;\n}\n```\n"
                                      "‚Äî `x < 3` ko≈üulu doƒüru olduƒüu s√ºrece kod bloƒüunu tekrarlar.\n\n"
                                      "============================\n"
                                      "üîπ *do...while d√∂ng√ºs√º*\n"
                                      "```js\nlet y = 0;\ndo {\n    console.log(y);\n    y++;\n} while (y < 2);\n```\n"
                                      "‚Äî Ko≈üul doƒüru olmasa bile en az bir kez √ßalƒ±≈üƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Dizi elemanlarƒ±nƒ± iterasyon √∂rneƒüi*\n"
                                      "```js\nlet fruits = [\"üçé\", \"üçå\", \"üçá\"];\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n```\n"
                                      "‚Äî Dizideki t√ºm elemanlarƒ± teker teker okur.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- Sonsuz d√∂ng√ºye dikkat edin (sayacƒ± g√ºncellemeyi unutmayƒ±n!)\n"
                                      "- `break` ile d√∂ng√ºy√º erken sonlandƒ±rabilirsiniz\n"
                                      "- `continue` ile o iterasyonu atlayabilirsiniz\n\n"
                                      "üí° D√∂ng√ºler, veri yapƒ±larƒ± ve otomasyon i√ßin kritik ara√ßlardƒ±r!\n"
                                      "10'dan 1'e geriye sayan bir d√∂ng√º yazmayƒ± deneyin! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "srtrank":
        keyboard = [[InlineKeyboardButton("Onceki b√∂l√ºm", callback_data="cecececececececece")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *JavaScript: Nesneler (Objects)*\n\n"
                                      "üîπ *Nedir nesne?*\n"
                                      "‚Äî ƒ∞lgili veri ve fonksiyonlarƒ± depolayan yapƒ±dƒ±r.\n"
                                      "‚Äî \"anahtar: deƒüer\" √ßiftleri ≈üeklinde olu≈üturulur.\n\n"
                                      "============================\n"
                                      "üîπ *Basit nesne √∂rneƒüi:*\n"
                                      "```js\n"
                                      "let person = {\n"
                                      "  name: \"Tom\",\n"
                                      "  age: 25,\n"
                                      "  isStudent: true\n"
                                      "};\n"
                                      "```\n"
                                      "üî∏ √ñzelliklere eri≈üim:\n"
                                      "`person.name` ‚Üí \"Tom\"\n"
                                      "`person[\"age\"]` ‚Üí 25\n\n"
                                      "============================\n"
                                      "üîπ *Metod i√ßeren nesne:*\n"
                                      "```js\n"
                                      "let car = {\n"
                                      "  brand: \"Toyota\",\n"
                                      "  start: function() {\n"
                                      "    console.log(\"Motor √ßalƒ±≈ütƒ±\");\n"
                                      "  }\n"
                                      "};\n\n"
                                      "car.start();\n"
                                      "```\n"
                                      "============================\n"
                                      "‚úÖ *Neden nesne kullanmalƒ±?*\n"
                                      "- Karma≈üƒ±k verileri merkezile≈ütirmek\n"
                                      "- Ger√ßek d√ºnyadaki nesneleri modellemek\n"
                                      "- DOM i≈ülemleri, API √ßaƒürƒ±larƒ± gibi geni≈ü uygulama alanlarƒ±\n\n"
                                      "üí° \"phone\" isimli bir nesne olu≈ütur, \"model\", \"year\" √∂zellikleri ve \"call()\" metodunu ekle!",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "cecececececececece":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="srtrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="zikozikzokzizozokz")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *JavaScript: Fonksiyonlara Giri≈ü*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli g√∂revleri yerine getiren isimlendirilmi≈ü kod bloƒüudur.\n"
                                      "‚Äî Aynƒ± kodu tekrar yazmadan tekrar tekrar √ßaƒüƒ±rabilirsiniz.\n"
                                      "‚Äî Yapƒ±sal programlamanƒ±n temelidir.\n\n"
                                      "üîπ *Neden fonksiyon kullanmalƒ±yƒ±z?*\n"
                                      "‚úî Tekrarlayan kodlardan ka√ßƒ±nmak\n"
                                      "‚úî Programƒ± mantƒ±ksal mod√ºllere ayƒ±rmak\n"
                                      "‚úî Parametre (arguments) alƒ±p sonu√ß d√∂nd√ºrebilmek\n\n"
                                      "üîπ *Basit fonksiyon √∂rneƒüi:*\n"
                                      "```js\nfunction sayHello() {\n  console.log(\"Hello!\");\n}\n\nsayHello(); // Fonksiyon √ßaƒürƒ±sƒ±\n```\n"
                                      "üí° `sayHello` her √ßaƒürƒ±ldƒ±ƒüƒ±nda \"Hello!\" yazar.\n\n"
                                      "üîπ *Parametreli fonksiyon:*\n"
                                      "```js\nfunction greet(name) {\n  console.log(\"Hello, \" + name);\n}\n\ngreet(\"Tom\");\ngreet(\"Anna\");\n```\n"
                                      "üí° `name` parametresi farklƒ± deƒüerler alarak √ßƒ±ktƒ±yƒ± kontrol etmeni saƒülar.\n\n"
                                      "üîπ *Deƒüer d√∂nd√ºren fonksiyon:*\n"
                                      "```js\nfunction square(number) {\n  return number * number;\n}\n\nconsole.log(square(4)); // 16\n```\n"
                                      "üí° `return` sonucu geri d√∂nd√ºr√ºr ve ba≈üka yerlerde kullanƒ±labilir.\n\n"
                                      "üîπ *Unutma:*\n"
                                      "‚úî Fonksiyonlar √ßaƒürƒ±lmadan √∂nce tanƒ±mlanmalƒ±\n"
                                      "‚úî ƒ∞√ßindeki kod sadece √ßaƒürƒ±ldƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r\n"
                                      "‚úî Birden fazla parametre alabilir\n\n"
                                      "Fonksiyonlar kodunu temiz, esnek ve kolay y√∂netilebilir yapar! üöÄ",

                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "java_startings":
        keyboard = [[InlineKeyboardButton("‚òï Java √∂ƒürenmeye ba≈ülayƒ±n", callback_data="valleyrank")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Java", reply_markup=reply_markup)
    elif query.data == "valleyrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="rebirtharank")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: Kurulum ve ƒ∞lk Projeyi Olu≈üturma*\n\n"
                                      "üîπ *Adƒ±m 1: JDK ƒ∞ndir ve Kur*\n"
                                      "[üîó Resmi ƒ∞ndirme Sayfasƒ±](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî ƒ∞≈ületim sistemine uygun Java SE Development Kit (JDK) se√ßin\n"
                                      "‚Äî Kurulumda `Add JAVA to PATH` se√ßeneƒüini i≈üaretleyin (varsa)\n\n"
                                      "üîπ *Adƒ±m 2: Kurulumu Doƒürula*\n"
                                      "Terminali a√ßƒ±p ≈üunu yazƒ±n:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "S√ºr√ºm bilgisi g√∂r√ºn√ºyorsa kurulum ba≈üarƒ±lƒ±dƒ±r!\n\n"
                                      "üîπ *Adƒ±m 3: Geli≈ütirme Ara√ßlarƒ±nƒ± Kur*\n"
                                      "‚úÖ [IntelliJ IDEA Community (√ñnerilen)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Uzantƒ±sƒ±](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Adƒ±m 4: ƒ∞lk Java Kodunu Yaz*\n"
                                      "`Main.java` dosyasƒ± olu≈üturun ve ≈üu kodu yazƒ±n:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Sonra terminalde √ßalƒ±≈ütƒ±rƒ±n:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ Beklenen √ßƒ±ktƒ±: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *Java √∂ƒürenmeye ba≈ülamaya hazƒ±rsƒ±nƒ±z!*\n"
                                      "Sƒ±rada: deƒüi≈ükenler, ko≈üullar, d√∂ng√ºler, fonksiyonlar ve nesne y√∂nelimli programlama!\n\n"
                                      "üëá A≈üaƒüƒ±daki d√ºƒümeye tƒ±klayarak sonraki derse ge√ßin!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "rebirtharank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikonerank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchcrchcrchcrch")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Verileri saklamak i√ßin kullanƒ±lan isimdir.\n"
                                      "‚Äî Her deƒüi≈ükenin veri tipi √∂nceden tanƒ±mlanmalƒ±dƒ±r.\n\n"
                                      "üîπ *Temel veri tipleri:*\n"
                                      "- `int`: Tam sayƒ±lar, √∂rn. `42`\n"
                                      "- `double`: Ondalƒ±klƒ± sayƒ±lar, √∂rn. `3.14`\n"
                                      "- `char`: Tek karakter, √∂rn. `'A'`\n"
                                      "- `boolean`: Mantƒ±ksal deƒüer, `true` veya `false`\n"
                                      "- `String`: Metin dizisi, √∂rn. `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüi≈üken bildirme ve kullanma:*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ Deƒüi≈ükenleri yazdƒ±rmak i√ßin `System.out.println()` kullanƒ±n:\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ √áƒ±ktƒ±:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Hatƒ±rlatma:*\n"
                                      "- Java statik olarak tiplenen bir dildir, her deƒüi≈üken tipiyle tanƒ±mlanmalƒ±dƒ±r.\n"
                                      "- Deƒüi≈üken isimleri b√ºy√ºk-k√º√ß√ºk harfe duyarlƒ±dƒ±r: `Name` ‚â† `name`\n"
                                      "- Anlamlƒ± isimlendirme kullanƒ±n: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° Kendi deƒüi≈ükenlerini tanƒ±mlayƒ±p `System.out.println()` ile yazdƒ±rmayƒ± dene!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "crchcrchcrchcrch":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="rebirtharank")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚òïÔ∏è *Java: Kurulum ve ƒ∞lk Projeyi Olu≈üturma*\n\n"
                                      "üîπ *Adƒ±m 1: JDK ƒ∞ndir ve Kur*\n"
                                      "[üîó Resmi ƒ∞ndirme Sayfasƒ±](https://www.oracle.com/java/technologies/javase-downloads.html)\n"
                                      "‚Äî ƒ∞≈ületim sistemine uygun Java SE Development Kit (JDK) se√ßin\n"
                                      "‚Äî Kurulumda `Add JAVA to PATH` se√ßeneƒüini i≈üaretleyin (varsa)\n\n"
                                      "üîπ *Adƒ±m 2: Kurulumu Doƒürula*\n"
                                      "Terminali a√ßƒ±p ≈üunu yazƒ±n:\n"
                                      "```bash\njava -version\njavac -version\n```\n"
                                      "S√ºr√ºm bilgisi g√∂r√ºn√ºyorsa kurulum ba≈üarƒ±lƒ±dƒ±r!\n\n"
                                      "üîπ *Adƒ±m 3: Geli≈ütirme Ara√ßlarƒ±nƒ± Kur*\n"
                                      "‚úÖ [IntelliJ IDEA Community (√ñnerilen)](https://www.jetbrains.com/idea/download/)\n"
                                      "‚úÖ [Visual Studio Code + Java Uzantƒ±sƒ±](https://code.visualstudio.com/)\n\n"
                                      "üîπ *Adƒ±m 4: ƒ∞lk Java Kodunu Yaz*\n"
                                      "`Main.java` dosyasƒ± olu≈üturun ve ≈üu kodu yazƒ±n:\n"
                                      "```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Java!\");\n    }\n}\n```\n"
                                      "Sonra terminalde √ßalƒ±≈ütƒ±rƒ±n:\n"
                                      "```bash\njavac Main.java\njava Main\n```\n"
                                      "‚úÖ Beklenen √ßƒ±ktƒ±: `Hello, Java!`\n\n"
                                      "============================\n"
                                      "üéØ *Java √∂ƒürenmeye ba≈ülamaya hazƒ±rsƒ±nƒ±z!*\n"
                                      "Sƒ±rada: deƒüi≈ükenler, ko≈üullar, d√∂ng√ºler, fonksiyonlar ve nesne y√∂nelimli programlama!\n\n"
                                      "üëá A≈üaƒüƒ±daki d√ºƒümeye tƒ±klayarak sonraki derse ge√ßin!",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "silikonerank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikonrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="cemolecrchrchemole")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Ko≈üul ƒ∞fadeleri (if, else, else if)*\n\n"
                                      "üîπ *Ko≈üul ifadesi nedir?*\n"
                                      "‚Äî Programƒ±n farklƒ± ko≈üullara g√∂re farklƒ± kodlar √ßalƒ±≈ütƒ±rmasƒ±nƒ± saƒülar.\n\n"
                                      "============================\n"
                                      "üîπ *√ñrnek kod:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"Yeti≈ükinsin\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"Gen√ßsin\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"√áocuksun\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *Mantƒ±ksal operat√∂rler:* `&&` (ve), `||` (veya), `!` (deƒüil)\n\n"
                                      "‚úÖ *Deneyin:*\n"
                                      "Ya≈üa g√∂re mesaj yazdƒ±ran bir program yazƒ±n!",
                                      parse_mode="Markdown", reply_markup=reply_markup)
    elif query.data == "cemolecrchrchemole":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikonerank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchcrchcrchcrch")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Verileri saklamak i√ßin kullanƒ±lan isimdir.\n"
                                      "‚Äî Her deƒüi≈ükenin veri tipi √∂nceden tanƒ±mlanmalƒ±dƒ±r.\n\n"
                                      "üîπ *Temel veri tipleri:*\n"
                                      "- `int`: Tam sayƒ±lar, √∂rn. `42`\n"
                                      "- `double`: Ondalƒ±klƒ± sayƒ±lar, √∂rn. `3.14`\n"
                                      "- `char`: Tek karakter, √∂rn. `'A'`\n"
                                      "- `boolean`: Mantƒ±ksal deƒüer, `true` veya `false`\n"
                                      "- `String`: Metin dizisi, √∂rn. `\"Hello\"`\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüi≈üken bildirme ve kullanma:*\n"
                                      "```java\nint age = 18;\ndouble pi = 3.14;\nchar grade = 'A';\nboolean isStudent = true;\nString name = \"Tom\";\n```\n\n"
                                      "üî∏ Deƒüi≈ükenleri yazdƒ±rmak i√ßin `System.out.println()` kullanƒ±n:\n"
                                      "```java\nSystem.out.println(name);\nSystem.out.println(age);\n```\n"
                                      "üî∏ √áƒ±ktƒ±:\n"
                                      "`Tom`\n"
                                      "`18`\n\n"
                                      "============================\n"
                                      "‚úÖ *Hatƒ±rlatma:*\n"
                                      "- Java statik olarak tiplenen bir dildir, her deƒüi≈üken tipiyle tanƒ±mlanmalƒ±dƒ±r.\n"
                                      "- Deƒüi≈üken isimleri b√ºy√ºk-k√º√ß√ºk harfe duyarlƒ±dƒ±r: `Name` ‚â† `name`\n"
                                      "- Anlamlƒ± isimlendirme kullanƒ±n: `int n = 5;` ‚ùå, `int score = 5;` ‚úÖ\n\n"
                                      "üí° Kendi deƒüi≈ükenlerini tanƒ±mlayƒ±p `System.out.println()` ile yazdƒ±rmayƒ± dene!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "silikonrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikrank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="ligimitirovaniydaunin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: D√∂ng√ºler (Loops)*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu belirli ko≈üullar saƒülandƒ±ƒüƒ± s√ºrece tekrar tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Tekrarlayan g√∂revlerde ve veri √ºzerinde i≈ülem yaparken √ßok faydalƒ±dƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *do...while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî Ko≈üul saƒülanmasa bile en az bir kere √ßalƒ±≈üƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- Sonsuz d√∂ng√ºlere dikkat edin\n"
                                      "- D√∂ng√ºy√º erken sonlandƒ±rmak i√ßin `break` kullanƒ±n\n"
                                      "- D√∂ng√ºdeki mevcut iterasyonu atlamak i√ßin `continue` kullanƒ±n\n\n"
                                      "üí° 10'dan 1'e geri sayan bir d√∂ng√º yazmayƒ± dene! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "ligimitirovaniydaunin":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikonrank")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="cemolecrchrchemole")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìö *Java: Ko≈üul ƒ∞fadeleri (if, else, else if)*\n\n"
                                      "üîπ *Ko≈üul ifadesi nedir?*\n"
                                      "‚Äî Programƒ±n farklƒ± ko≈üullara g√∂re farklƒ± kodlar √ßalƒ±≈ütƒ±rmasƒ±nƒ± saƒülar.\n\n"
                                      "============================\n"
                                      "üîπ *√ñrnek kod:*\n"
                                      "```java\n"
                                      "if (age >= 18) {\n"
                                      "    System.out.println(\"Yeti≈ükinsin\");\n"
                                      "} else if (age >= 14) {\n"
                                      "    System.out.println(\"Gen√ßsin\");\n"
                                      "} else {\n"
                                      "    System.out.println(\"√áocuksun\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma operat√∂rleri:* `==`, `!=`, `>`, `<`, `>=`, `<=`\n"
                                      "üîπ *Mantƒ±ksal operat√∂rler:* `&&` (ve), `||` (veya), `!` (deƒüil)\n\n"
                                      "‚úÖ *Deneyin:*\n"
                                      "Ya≈üa g√∂re mesaj yazdƒ±ran bir program yazƒ±n!",
                                      parse_mode="Markdown", reply_markup=reply_markup)

    elif query.data == "silikrank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="siuurank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="lastcrecrecrecer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Diziler (Arrays)*\n\n"
                                      "üîπ *Dizi nedir?*\n"
                                      "‚Äî Diziler aynƒ± t√ºrdeki elemanlarƒ±n sƒ±ralƒ± bir ≈üekilde hafƒ±zada saklanmasƒ±dƒ±r.\n"
                                      "‚Äî Her elemanƒ±n bir indeksi vardƒ±r (0‚Äôdan ba≈ülar).\n\n"
                                      "============================\n"
                                      "üîπ *Bir tamsayƒ± dizisi olu≈üturma:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî 5 elemanlƒ± bir tamsayƒ± dizisi olu≈üturur.\n\n"
                                      "üî∏ Elemanlara eri≈üim:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º ile t√ºm elemanlarƒ± yazdƒ±rma:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` dizi uzunluƒüunu verir.\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan dizi elemanƒ± alma:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Kullanƒ±cƒ±dan 3 sayƒ± alƒ±p diziye kaydeder.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler 0‚Äôdan n-1‚Äôe kadar gider\n"
                                      "- Diziler sabit boyutludur\n"
                                      "- ƒ∞ndeks sƒ±nƒ±rlarƒ±nƒ± a≈ümak hata verir (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Diziler veri yapƒ±larƒ±, sƒ±ralama ve algoritma √∂ƒürenmenin temelidir! Kendi dizini olu≈üturup i√ß",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "lastcrecrecrecer":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="silikrank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="ligimitirovaniydaunin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *Java: D√∂ng√ºler (Loops)*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Bir kod bloƒüunu belirli ko≈üullar saƒülandƒ±ƒüƒ± s√ºrece tekrar tekrar √ßalƒ±≈ütƒ±rmak i√ßin kullanƒ±lƒ±r.\n"
                                      "‚Äî Tekrarlayan g√∂revlerde ve veri √ºzerinde i≈ülem yaparken √ßok faydalƒ±dƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    System.out.println(i);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî 0'dan 4'e kadar sayƒ±larƒ± yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "int x = 0;\n"
                                      "while (x < 3) {\n"
                                      "    System.out.println(x);\n"
                                      "    x++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "============================\n"
                                      "üîπ *do...while d√∂ng√ºs√º √∂rneƒüi:*\n"
                                      "```java\n"
                                      "int y = 0;\n"
                                      "do {\n"
                                      "    System.out.println(y);\n"
                                      "    y++;\n"
                                      "} while (y < 2);\n"
                                      "```\n"
                                      "‚Äî Ko≈üul saƒülanmasa bile en az bir kere √ßalƒ±≈üƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- Sonsuz d√∂ng√ºlere dikkat edin\n"
                                      "- D√∂ng√ºy√º erken sonlandƒ±rmak i√ßin `break` kullanƒ±n\n"
                                      "- D√∂ng√ºdeki mevcut iterasyonu atlamak i√ßin `continue` kullanƒ±n\n\n"
                                      "üí° 10'dan 1'e geri sayan bir d√∂ng√º yazmayƒ± dene! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "siuurank":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="suiirank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="dimariadebruynenen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: Metodlar (Functions)*\n\n"
                                      "üîπ *Metod nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi ger√ßekle≈ütiren kod bloƒüudur.\n"
                                      "‚Äî Aynƒ± kodu tekrar yazmadan, metod √ßaƒüƒ±rarak kullanabilirsin.\n\n"
                                      "============================\n"
                                      "üîπ *Neden metod kullanmalƒ±yƒ±z?*\n"
                                      "‚úîÔ∏è Kod tekrarƒ±nƒ± √∂nler\n"
                                      "‚úîÔ∏è Kod okunabilir ve bakƒ±mƒ± kolay olur\n"
                                      "‚úîÔ∏è Parametre alabilir ve sonu√ß d√∂nd√ºrebilir\n\n"
                                      "============================\n"
                                      "üîπ *Basit √∂rnek:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"Merhaba!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // Metod √ßaƒürƒ±sƒ±\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `sayHello` metodu \"Merhaba!\" yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Parametre alan metod:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"Merhaba, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Ahmet\");\n"
                                      "```\n"
                                      "‚Äî Parametre metodun daha esnek olmasƒ±nƒ± saƒülar.\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüer d√∂nd√ºren metod:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî `return` sonucu d√∂nd√ºrmek i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *Unutma:*\n"
                                      "- T√ºm metodlar sƒ±nƒ±f i√ßinde tanƒ±mlanmalƒ±dƒ±r\n"
                                      "- `main()` programƒ±n giri≈ü noktasƒ±dƒ±r\n"
                                      "- `void` geri d√∂n√º≈ü deƒüeri olmadƒ±ƒüƒ±nƒ± belirtir\n\n"
                                      "üí° Kendi metodunu yaz, ismini yazdƒ±ran veya iki sayƒ±yƒ± toplayan bir metod olu≈ütur! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "dimariadebruynenen":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="siuurank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="lastcrecrecrecer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *Java: Diziler (Arrays)*\n\n"
                                      "üîπ *Dizi nedir?*\n"
                                      "‚Äî Diziler aynƒ± t√ºrdeki elemanlarƒ±n sƒ±ralƒ± bir ≈üekilde hafƒ±zada saklanmasƒ±dƒ±r.\n"
                                      "‚Äî Her elemanƒ±n bir indeksi vardƒ±r (0‚Äôdan ba≈ülar).\n\n"
                                      "============================\n"
                                      "üîπ *Bir tamsayƒ± dizisi olu≈üturma:*\n"
                                      "```java\n"
                                      "int[] numbers = {10, 20, 30, 40, 50};\n"
                                      "```\n"
                                      "‚Äî 5 elemanlƒ± bir tamsayƒ± dizisi olu≈üturur.\n\n"
                                      "üî∏ Elemanlara eri≈üim:\n"
                                      "`numbers[0]` ‚Üí 10\n"
                                      "`numbers[3]` ‚Üí 40\n\n"
                                      "============================\n"
                                      "üîπ *for d√∂ng√ºs√º ile t√ºm elemanlarƒ± yazdƒ±rma:*\n"
                                      "```java\n"
                                      "for (int i = 0; i < numbers.length; i++) {\n"
                                      "    System.out.println(numbers[i]);\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `numbers.length` dizi uzunluƒüunu verir.\n\n"
                                      "============================\n"
                                      "üîπ *Kullanƒ±cƒ±dan dizi elemanƒ± alma:*\n"
                                      "```java\n"
                                      "Scanner input = new Scanner(System.in);\n"
                                      "int[] a = new int[3];\n"
                                      "for (int i = 0; i < 3; i++) {\n"
                                      "    a[i] = input.nextInt();\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî Kullanƒ±cƒ±dan 3 sayƒ± alƒ±p diziye kaydeder.\n\n"
                                      "============================\n"
                                      "‚úÖ *√ñnemli notlar:*\n"
                                      "- ƒ∞ndeksler 0‚Äôdan n-1‚Äôe kadar gider\n"
                                      "- Diziler sabit boyutludur\n"
                                      "- ƒ∞ndeks sƒ±nƒ±rlarƒ±nƒ± a≈ümak hata verir (ArrayIndexOutOfBoundsException)\n\n"
                                      "üí° Diziler veri yapƒ±larƒ±, sƒ±ralama ve algoritma √∂ƒürenmenin temelidir! Kendi dizini olu≈üturup i√ß",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "suiirank":
        keyboard = [[InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="lastcrenajfningie")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üèóÔ∏è *Java: Sƒ±nƒ±flar ve Nesneler (Class & Object)*\n\n"
                                      "üîπ *Sƒ±nƒ±f nedir?*\n"
                                      "‚Äî Nesne olu≈üturmak i√ßin bir ≈üablondur.\n"
                                      "‚Äî Nesnenin √∂zelliklerini (veri) ve davranƒ±≈ülarƒ±nƒ± (metodlar) tanƒ±mlar.\n\n"
                                      "üîπ *Nesne nedir?*\n"
                                      "‚Äî Sƒ±nƒ±fa dayanarak olu≈üturulan ger√ßek varlƒ±ktƒ±r, programdaki somut √ºyedir.\n\n"
                                      "============================\n"
                                      "üîπ *Basit √∂rnek:*\n"
                                      "```java\n"
                                      "public class Dog {\n"
                                      "    String name;\n"
                                      "    int age;\n\n"
                                      "    void bark() {\n"
                                      "        System.out.println(name + \": Hav Hav!\");\n"
                                      "    }\n"
                                      "}\n\n"
                                      "public class Main {\n"
                                      "    public static void main(String[] args) {\n"
                                      "        Dog myDog = new Dog();\n"
                                      "        myDog.name = \"Kara\";\n"
                                      "        myDog.age = 3;\n"
                                      "        myDog.bark();\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `Dog` sƒ±nƒ±fƒ± iki √∂zellik ve bir metoda sahiptir.\n"
                                      "‚Äî `myDog` bir `Dog` nesnesidir; metodlarƒ± √ßaƒüƒ±rabilir ve deƒüer atayabilir.\n\n"
                                      "============================\n"
                                      "üîπ *√ñnemli kavramlar:*\n"
                                      "- Sƒ±nƒ±f isimleri b√ºy√ºk harfle ba≈ülar: `Person`, `Car`, `Animal` gibi\n"
                                      "- `new` anahtar kelimesi nesne olu≈üturmak i√ßin kullanƒ±lƒ±r\n"
                                      "- Metodlar, nesnenin √∂zelliklerine eri≈üebilir\n\n"
                                      "‚úÖ *Sƒ±nƒ±flar ve nesneler Java'nƒ±n temelidir*\n"
                                      "‚Äî Neredeyse t√ºm Java programlarƒ± nesne odaklƒ± tasarlanƒ±r!\n\n"
                                      "üí° Sonraki derslerde yapƒ±cƒ±lar (constructor), kaps√ºlleme, kalƒ±tƒ±m ve √ßok bi√ßimliliƒüi (polymorphism) √∂ƒüreneceƒüiz! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "lastcrenajfningie":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°", callback_data="suiirank")],
                    [InlineKeyboardButton("√ñnceki B√∂l√ºm", callback_data="dimariadebruynenen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *Java: Metodlar (Functions)*\n\n"
                                      "üîπ *Metod nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi ger√ßekle≈ütiren kod bloƒüudur.\n"
                                      "‚Äî Aynƒ± kodu tekrar yazmadan, metod √ßaƒüƒ±rarak kullanabilirsin.\n\n"
                                      "============================\n"
                                      "üîπ *Neden metod kullanmalƒ±yƒ±z?*\n"
                                      "‚úîÔ∏è Kod tekrarƒ±nƒ± √∂nler\n"
                                      "‚úîÔ∏è Kod okunabilir ve bakƒ±mƒ± kolay olur\n"
                                      "‚úîÔ∏è Parametre alabilir ve sonu√ß d√∂nd√ºrebilir\n\n"
                                      "============================\n"
                                      "üîπ *Basit √∂rnek:*\n"
                                      "```java\n"
                                      "public class Main {\n"
                                      "    public static void sayHello() {\n"
                                      "        System.out.println(\"Merhaba!\");\n"
                                      "    }\n\n"
                                      "    public static void main(String[] args) {\n"
                                      "        sayHello(); // Metod √ßaƒürƒ±sƒ±\n"
                                      "    }\n"
                                      "}\n"
                                      "```\n"
                                      "‚Äî `sayHello` metodu \"Merhaba!\" yazdƒ±rƒ±r.\n\n"
                                      "============================\n"
                                      "üîπ *Parametre alan metod:*\n"
                                      "```java\n"
                                      "public static void greet(String name) {\n"
                                      "    System.out.println(\"Merhaba, \" + name);\n"
                                      "}\n\n"
                                      "greet(\"Ahmet\");\n"
                                      "```\n"
                                      "‚Äî Parametre metodun daha esnek olmasƒ±nƒ± saƒülar.\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüer d√∂nd√ºren metod:*\n"
                                      "```java\n"
                                      "public static int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int result = square(4); // 16\n"
                                      "```\n"
                                      "‚Äî `return` sonucu d√∂nd√ºrmek i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "‚úÖ *Unutma:*\n"
                                      "- T√ºm metodlar sƒ±nƒ±f i√ßinde tanƒ±mlanmalƒ±dƒ±r\n"
                                      "- `main()` programƒ±n giri≈ü noktasƒ±dƒ±r\n"
                                      "- `void` geri d√∂n√º≈ü deƒüeri olmadƒ±ƒüƒ±nƒ± belirtir\n\n"
                                      "üí° Kendi metodunu yaz, ismini yazdƒ±ran veya iki sayƒ±yƒ± toplayan bir metod olu≈ütur! üöÄ",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "priletelivmayami":
        keyboard = [[InlineKeyboardButton("üíª C √∂ƒürenmeye ba≈ülayƒ±n", callback_data="fisher")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("<<>>", reply_markup=reply_markup)
    elif query.data == "fisher":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fishering")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *C Kurulumu ve CLion IDE Ayarlarƒ±*\n\n"
                                      "üîπ *Adƒ±m 1: MinGW Derleyicisini ƒ∞ndirin*\n"
                                      "[MinGW ƒ∞ndir](https://sourceforge.net/projects/mingw/) ‚Äî `gcc`'yi kurun ve `bin` klas√∂r√ºn√º sistem PATH ortam deƒüi≈ükenine ekleyin\n\n"
                                      "üîπ *Adƒ±m 2: CLion IDE'yi ƒ∞ndirin*\n"
                                      "[CLion ƒ∞ndir](https://www.jetbrains.com/clion/download/) ‚Äî Topluluk (Community) veya Deneme (Trial) s√ºr√ºm√ºn√º y√ºkleyin\n\n"
                                      "üîπ *Adƒ±m 3: Kurulumu Doƒürulayƒ±n*\n"
                                      "Terminali a√ßƒ±n ve ≈üunu yazƒ±n:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Adƒ±m 4: Basit bir C programƒ± yazƒ±n*\n"
                                      "`main.c` adƒ±nda bir dosya olu≈üturun ve ≈üu kodu yazƒ±n:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Adƒ±m 5: Programƒ± derleyin ve √ßalƒ±≈ütƒ±rƒ±n*\n"
                                      "Terminalde ≈üunu yazƒ±n:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Sonra √ßalƒ±≈ütƒ±rƒ±n:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *√áƒ±ktƒ±yƒ± kontrol edin:*\n"
                                      "≈ûunu g√∂rmelisiniz:\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "fishering":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchemolexczxsefv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C Dilinde Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Bellekte veri saklamak i√ßin kullanƒ±lan isimdir.\n"
                                      "‚Äî Her deƒüi≈ükenin, ne t√ºr veri tuttuƒüunu belirleyen bir veri tipi vardƒ±r.\n\n"
                                      "üîπ *Yaygƒ±n veri tipleri:*\n"
                                      "- `int` ‚Äî Tam sayƒ±lar, √∂rnek: `42`\n"
                                      "- `float` ‚Äî Ondalƒ±klƒ± sayƒ±lar, √∂rnek: `3.14`\n"
                                      "- `char` ‚Äî Tek bir karakter, √∂rnek: `'A'`\n"
                                      "- `double` ‚Äî Daha hassas ondalƒ±klƒ± sayƒ±lar\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüi≈üken tanƒ±mlama:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Ekrana yazdƒ±rma:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Ya≈ü: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Kendin dene:* Birka√ß deƒüi≈üken tanƒ±mla ve bunlarƒ±n deƒüerlerini yazdƒ±r!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "crchemolexczxsefv":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fishering")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üê±‚Äçüíª *C Kurulumu ve CLion IDE Ayarlarƒ±*\n\n"
                                      "üîπ *Adƒ±m 1: MinGW Derleyicisini ƒ∞ndirin*\n"
                                      "[MinGW ƒ∞ndir](https://sourceforge.net/projects/mingw/) ‚Äî `gcc`'yi kurun ve `bin` klas√∂r√ºn√º sistem PATH ortam deƒüi≈ükenine ekleyin\n\n"
                                      "üîπ *Adƒ±m 2: CLion IDE'yi ƒ∞ndirin*\n"
                                      "[CLion ƒ∞ndir](https://www.jetbrains.com/clion/download/) ‚Äî Topluluk (Community) veya Deneme (Trial) s√ºr√ºm√ºn√º y√ºkleyin\n\n"
                                      "üîπ *Adƒ±m 3: Kurulumu Doƒürulayƒ±n*\n"
                                      "Terminali a√ßƒ±n ve ≈üunu yazƒ±n:\n"
                                      "```bash\n"
                                      "gcc --version\n"
                                      "```\n\n"
                                      "üîπ *Adƒ±m 4: Basit bir C programƒ± yazƒ±n*\n"
                                      "`main.c` adƒ±nda bir dosya olu≈üturun ve ≈üu kodu yazƒ±n:\n"
                                      "```c\n"
                                      "#include <stdio.h>\n\n"
                                      "int main() {\n"
                                      "    printf(\"Hello, world!\\n\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Adƒ±m 5: Programƒ± derleyin ve √ßalƒ±≈ütƒ±rƒ±n*\n"
                                      "Terminalde ≈üunu yazƒ±n:\n"
                                      "```bash\n"
                                      "gcc main.c -o main\n"
                                      "```\n"
                                      "Sonra √ßalƒ±≈ütƒ±rƒ±n:\n"
                                      "```bash\n"
                                      "./main\n"
                                      "```\n\n"
                                      "‚úÖ *√áƒ±ktƒ±yƒ± kontrol edin:*\n"
                                      "≈ûunu g√∂rmelisiniz:\n"
                                      "```\nHello, world!\n```\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "fisheringg":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringgg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="lalalxlalxdle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Dilinde Operat√∂rler ve ƒ∞fadeler*\n\n"
                                      "üîπ *Operat√∂r nedir?*\n"
                                      "‚Äî Veriler √ºzerinde i≈ülem yapmak i√ßin kullanƒ±lan sembol ya da sembol kombinasyonudur.\n\n"
                                      "üîπ *Operat√∂r t√ºrleri:*\n"
                                      "- Aritmetik operat√∂rler: `+`, `-`, `*`, `/`, `%`\n"
                                      "- Atama operat√∂rleri: `=`, `+=`, `-=`, `*=`, vb.\n"
                                      "- Kar≈üƒ±la≈ütƒ±rma operat√∂rleri: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- Mantƒ±ksal operat√∂rler: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *Aritmetik i≈ülemlere √∂rnek:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int toplam = a + b;       // 13\n"
                                      "int fark = a - b;         // 7\n"
                                      "int carpim = a * b;       // 30\n"
                                      "int bolum = a / b;        // 3\n"
                                      "int kalan = a % b;        // 1\n"
                                      "```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma ve mantƒ±k √∂rneƒüi:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x, y'den k√º√ß√ºk ve y pozitiftir\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Sen de dene:* Farklƒ± operat√∂rleri i√ßeren ifadeler yaz ve sonu√ßlarƒ±nƒ± ekrana bastƒ±r!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "lalalxlalxdle":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="crchemolexczxsefv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì¶ *C Dilinde Deƒüi≈ükenler ve Veri Tipleri*\n\n"
                                      "üîπ *Deƒüi≈üken nedir?*\n"
                                      "‚Äî Bellekte veri saklamak i√ßin kullanƒ±lan isimdir.\n"
                                      "‚Äî Her deƒüi≈ükenin, ne t√ºr veri tuttuƒüunu belirleyen bir veri tipi vardƒ±r.\n\n"
                                      "üîπ *Yaygƒ±n veri tipleri:*\n"
                                      "- `int` ‚Äî Tam sayƒ±lar, √∂rnek: `42`\n"
                                      "- `float` ‚Äî Ondalƒ±klƒ± sayƒ±lar, √∂rnek: `3.14`\n"
                                      "- `char` ‚Äî Tek bir karakter, √∂rnek: `'A'`\n"
                                      "- `double` ‚Äî Daha hassas ondalƒ±klƒ± sayƒ±lar\n\n"
                                      "============================\n"
                                      "üîπ *Deƒüi≈üken tanƒ±mlama:*\n"
                                      "```c\n"
                                      "int age = 18;\n"
                                      "float pi = 3.14;\n"
                                      "char grade = 'A';\n"
                                      "double largeNum = 123456.789;\n"
                                      "```\n\n"
                                      "üîπ *Ekrana yazdƒ±rma:*\n"
                                      "```c\n"
                                      "#include <stdio.h>\n"
                                      "int main() {\n"
                                      "    int age = 18;\n"
                                      "    printf(\"Ya≈ü: %d\\n\", age);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Kendin dene:* Birka√ß deƒüi≈üken tanƒ±mla ve bunlarƒ±n deƒüerlerini yazdƒ±r!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "fisheringgg":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="voutbsdfnkkv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *C Dilinde Ko≈üullu ƒ∞fadeler: if, else if, else*\n\n"
                                      "üîπ *Ko≈üullu ifade nedir?*\n"
                                      "‚Äî Belirli bir ko≈üula g√∂re farklƒ± kod bloklarƒ±nƒ±n √ßalƒ±≈ümasƒ±nƒ± saƒülar.\n\n"
                                      "üîπ *if s√∂zdizimi:*\n"
                                      "```c\n"
                                      "if (kosul) {\n"
                                      "    // ko≈üul doƒüruysa √ßalƒ±≈üacak kod\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *else if ve else kullanƒ±mƒ±:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Pozitif sayƒ±\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Sƒ±fƒ±r\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Negatif sayƒ±\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Ko≈üullarda kullanƒ±lan mantƒ±ksal operat√∂rler:*\n"
                                      "- `&&` ‚Äî VE (AND)\n"
                                      "- `||` ‚Äî VEYA (OR)\n"
                                      "- `!` ‚Äî DEƒûƒ∞L (NOT)\n\n"
                                      "‚úÖ *G√∂rev:* Bir sayƒ±nƒ±n pozitif, negatif ya da sƒ±fƒ±r olup olmadƒ±ƒüƒ±nƒ± kontrol eden bir program yaz!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "voutbsdfnkkv":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringgg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="lalalxlalxdle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Dilinde Operat√∂rler ve ƒ∞fadeler*\n\n"
                                      "üîπ *Operat√∂r nedir?*\n"
                                      "‚Äî Veriler √ºzerinde i≈ülem yapmak i√ßin kullanƒ±lan sembol ya da sembol kombinasyonudur.\n\n"
                                      "üîπ *Operat√∂r t√ºrleri:*\n"
                                      "- Aritmetik operat√∂rler: `+`, `-`, `*`, `/`, `%`\n"
                                      "- Atama operat√∂rleri: `=`, `+=`, `-=`, `*=`, vb.\n"
                                      "- Kar≈üƒ±la≈ütƒ±rma operat√∂rleri: `==`, `!=`, `<`, `>`, `<=`, `>=`\n"
                                      "- Mantƒ±ksal operat√∂rler: `&&`, `||`, `!`\n\n"
                                      "============================\n"
                                      "üîπ *Aritmetik i≈ülemlere √∂rnek:*\n"
                                      "```c\n"
                                      "int a = 10, b = 3;\n"
                                      "int toplam = a + b;       // 13\n"
                                      "int fark = a - b;         // 7\n"
                                      "int carpim = a * b;       // 30\n"
                                      "int bolum = a / b;        // 3\n"
                                      "int kalan = a % b;        // 1\n"
                                      "```\n\n"
                                      "üîπ *Kar≈üƒ±la≈ütƒ±rma ve mantƒ±k √∂rneƒüi:*\n"
                                      "```c\n"
                                      "int x = 5, y = 10;\n"
                                      "if (x < y && y > 0) {\n"
                                      "    printf(\"x, y'den k√º√ß√ºk ve y pozitiftir\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Sen de dene:* Farklƒ± operat√∂rleri i√ßeren ifadeler yaz ve sonu√ßlarƒ±nƒ± ekrana bastƒ±r!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "fisheringggg":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="isheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="misipipiaskakaku")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *C Dilinde D√∂ng√ºler: for, while, do-while*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Belirli bir kod bloƒüunu birden fazla kez √ßalƒ±≈ütƒ±rmamƒ±zƒ± saƒülar.\n\n"
                                      "üîπ *for d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Deneyin:* 1‚Äôden 10‚Äôa kadar sayƒ±larƒ± yazdƒ±ran bir d√∂ng√º yazƒ±n!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "misipipiaskakaku":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="fisheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="voutbsdfnkkv")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üß† *C Dilinde Ko≈üullu ƒ∞fadeler: if, else if, else*\n\n"
                                      "üîπ *Ko≈üullu ifade nedir?*\n"
                                      "‚Äî Belirli bir ko≈üula g√∂re farklƒ± kod bloklarƒ±nƒ±n √ßalƒ±≈ümasƒ±nƒ± saƒülar.\n\n"
                                      "üîπ *if s√∂zdizimi:*\n"
                                      "```c\n"
                                      "if (kosul) {\n"
                                      "    // ko≈üul doƒüruysa √ßalƒ±≈üacak kod\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *else if ve else kullanƒ±mƒ±:*\n"
                                      "```c\n"
                                      "if (x > 0) {\n"
                                      "    printf(\"Pozitif sayƒ±\\n\");\n"
                                      "} else if (x == 0) {\n"
                                      "    printf(\"Sƒ±fƒ±r\\n\");\n"
                                      "} else {\n"
                                      "    printf(\"Negatif sayƒ±\\n\");\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Ko≈üullarda kullanƒ±lan mantƒ±ksal operat√∂rler:*\n"
                                      "- `&&` ‚Äî VE (AND)\n"
                                      "- `||` ‚Äî VEYA (OR)\n"
                                      "- `!` ‚Äî DEƒûƒ∞L (NOT)\n\n"
                                      "‚úÖ *G√∂rev:* Bir sayƒ±nƒ±n pozitif, negatif ya da sƒ±fƒ±r olup olmadƒ±ƒüƒ±nƒ± kontrol eden bir program yaz!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)

    elif query.data == "isheringggg":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="sheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="zigiiiiiiiiisharko")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Dilinde Fonksiyonlar (Functions)*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi yerine getiren kod bloƒüudur.\n"
                                      "‚Äî Programƒ± d√ºzenlemeye ve kodu tekrar kullanmaya yardƒ±mcƒ± olur.\n\n"
                                      "üîπ *Fonksiyon tanƒ±mlama ve √ßaƒüƒ±rma:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"Merhaba, d√ºnya!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // Fonksiyon √ßaƒürƒ±sƒ±\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Parametreli fonksiyon:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"Merhaba, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Deƒüer d√∂nd√ºren fonksiyon:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"5 sayƒ±sƒ±nƒ±n karesi: %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Sen de dene:* ƒ∞ki sayƒ±yƒ± toplayƒ±p sonucu d√∂nd√ºren bir fonksiyon yaz!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "sheringggg":
        keyboard = [[InlineKeyboardButton("son b√∂l√ºm", callback_data="pionyerererer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìå *C Dilinde Pointer'lar (ƒ∞≈üaret√ßiler)*\n\n"
                                      "üîπ *Pointer nedir?*\n"
                                      "‚Äî Pointer, ba≈üka bir deƒüi≈ükenin bellek adresini tutan bir deƒüi≈ükendir.\n"
                                      "‚Äî Bellek y√∂netimi, diziler ve fonksiyonlarla √ßalƒ±≈ümada verimlidir.\n\n"
                                      "üîπ *Temel pointer √∂rneƒüi:*\n"
                                      "```c\n"
                                      "int x = 10;\n"
                                      "int* ptr = &x;\n"
                                      "printf(\"Deƒüer: %d\\n\", *ptr); // dereference (adresin i√ßindeki deƒüeri alƒ±r)\n"
                                      "```\n"
                                      "‚Äî `&x` ‚Üí `x` deƒüi≈ükeninin adresini alƒ±r\n"
                                      "‚Äî `*ptr` ‚Üí o adresteki deƒüeri verir\n\n"
                                      "üîπ *A√ßƒ±klamalar:*\n"
                                      "- `int* ptr;` ‚Äî bir tamsayƒ±ya i≈üaret eden pointer\n"
                                      "- `*` ‚Äî dereference operat√∂r√º (adresteki deƒüeri alƒ±r)\n"
                                      "- `&` ‚Äî adres operat√∂r√º (deƒüi≈ükenin adresini verir)\n\n"
                                      "============================\n"
                                      "üîπ *Pointer ile deƒüeri deƒüi≈ütirme:*\n"
                                      "```c\n"
                                      "int a = 5;\n"
                                      "int* p = &a;\n"
                                      "*p = 100;\n"
                                      "printf(\"%d\\n\", a); // √ßƒ±ktƒ±sƒ± 100 olur\n"
                                      "```\n"
                                      "‚úÖ Pointer, deƒüi≈ükenin deƒüerini doƒürudan deƒüi≈ütirebilir.\n\n"
                                      "============================\n"
                                      "üîπ *Bellek adresini yazdƒ±rma:*\n"
                                      "```c\n"
                                      "int val = 42;\n"
                                      "printf(\"Deƒüi≈ükenin adresi: %p\\n\", &val);\n"
                                      "```\n"
                                      "‚Äî `%p` format belirteci, bellekteki adresleri yazdƒ±rmak i√ßin kullanƒ±lƒ±r.\n\n"
                                      "============================\n"
                                      "üí° Pointer'lar C dilinde √ßok √∂nemli bir konudur.\n"
                                      "Dizi, karakter dizisi, fonksiyon parametreleri ve dinamik bellek y√∂netiminde sƒ±klƒ±kla kullanƒ±lƒ±r.\n\n"
                                      "üìé Bir sonraki b√∂l√ºmde *Diziler ve Pointer'larƒ±* √∂ƒüreneceksin!\n",
                                      parse_mode="Markdown",reply_markup = reply_markup)
    elif query.data == "pionyerererer":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="sheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="zig&sharko")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è *C Dilinde Fonksiyonlar (Functions)*\n\n"
                                      "üîπ *Fonksiyon nedir?*\n"
                                      "‚Äî Belirli bir g√∂revi yerine getiren kod bloƒüudur.\n"
                                      "‚Äî Programƒ± d√ºzenlemeye ve kodu tekrar kullanmaya yardƒ±mcƒ± olur.\n\n"
                                      "üîπ *Fonksiyon tanƒ±mlama ve √ßaƒüƒ±rma:*\n"
                                      "```c\n"
                                      "void sayHello() {\n"
                                      "    printf(\"Merhaba, d√ºnya!\\n\");\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    sayHello(); // Fonksiyon √ßaƒürƒ±sƒ±\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Parametreli fonksiyon:*\n"
                                      "```c\n"
                                      "void greet(char name[]) {\n"
                                      "    printf(\"Merhaba, %s!\\n\", name);\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    greet(\"Tom\");\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *Deƒüer d√∂nd√ºren fonksiyon:*\n"
                                      "```c\n"
                                      "int square(int x) {\n"
                                      "    return x * x;\n"
                                      "}\n\n"
                                      "int main() {\n"
                                      "    int result = square(5);\n"
                                      "    printf(\"5 sayƒ±sƒ±nƒ±n karesi: %d\\n\", result);\n"
                                      "    return 0;\n"
                                      "}\n"
                                      "```\n\n"
                                      "‚úÖ *Sen de dene:* ƒ∞ki sayƒ±yƒ± toplayƒ±p sonucu d√∂nd√ºren bir fonksiyon yaz!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    elif query.data == "zigiiiiiiiiisharko":
        keyboard = [[InlineKeyboardButton("Sonraki B√∂l√ºm ‚û°Ô∏è", callback_data="isheringggg")],
                    [InlineKeyboardButton("son b√∂l√ºm", callback_data="misipipi&kakaku")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üîÑ *C Dilinde D√∂ng√ºler: for, while, do-while*\n\n"
                                      "üîπ *D√∂ng√º nedir?*\n"
                                      "‚Äî Belirli bir kod bloƒüunu birden fazla kez √ßalƒ±≈ütƒ±rmamƒ±zƒ± saƒülar.\n\n"
                                      "üîπ *for d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "for (int i = 0; i < 5; i++) {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *while d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "while (i < 5) {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "    i++;\n"
                                      "}\n"
                                      "```\n\n"
                                      "üîπ *do-while d√∂ng√ºs√º:*\n"
                                      "```c\n"
                                      "int i = 0;\n"
                                      "do {\n"
                                      "    printf(\"%d. d√∂ng√º\\n\", i);\n"
                                      "    i++;\n"
                                      "} while (i < 5);\n"
                                      "```\n\n"
                                      "‚úÖ *Deneyin:* 1‚Äôden 10‚Äôa kadar sayƒ±larƒ± yazdƒ±ran bir d√∂ng√º yazƒ±n!\n",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)


app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CallbackQueryHandler(zero, pattern="^start_learning$"))
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(
    lang,
    pattern="^(nunutireihgtj|nbxbhdbschdsivud|xxxxxxxxxxxxxxxxxxxxxxxxx|threep|myayuayuayuadlllllllll|CCCCG|CCCCGCCCCGCCCCGCCCCGCCCCG|amburanmal|amburanmall|amburanmalll|amburanrank|amburanrankamburanrankamburanrankamburanrank|arang|arangarangarangarangarangarangarang|armsakina|armsss|azerbaijan|bananadjo|bejing|bejingg|brands|brandss|brang|brangbrangbrangbrangbrangbrang|cont|continue|continue_learning|cp|cpone|cpones|cponess|cpp|cpp3|cpp4|cpp5|crang|crangcrangcrangcrangcrangcrangcrangcrang|cyber|cyberindo|cyberindocyberindocyberindo|cyberqwak|cyberqwakcyberqwakcyberqwak|cybers|cybersec|cybersecurity|cyberx|cyberxx|dod|doddo|dodgevaper|dodorank|dodorankdostdost|english|englishlessons|f|ferrari|ferrarir|ferrarirank|ferrarirankastonmazdipidazdi|ferraritunar|financebro|firstchinese|fisher|fishering|fisheringg|fisheringgg|fisheringggg|for|fors|frekal|fsociety|fuckincarti|heteroex|heyvanlar|heyvanlarheyvanlarheyvanlarheyvanlarheyvanlarheyvanlar|huggywug|huggywugg|huggywuggy|iaiaiaiaiai|idgaf|if|ifelif|ifelifelse|ilan|isheringggg|its|itss|java_start|java_startings|java_startings_java_startings|jingg|jinggrank|jinggrankjinggrankjinggrankjinggrank|jvone|jvones|jvonesss|krisarank|last|lastcre|lastcrecre|lastcrengie|lastcrengiecrengie|lastthing|lastthingthing|legs|legsaca|lex|lextu|lextural|lexturalss|lexturank|lexturanklexturanklexturanklexturank|lextutu|lexust|lexustt|lexustural|lexx|lexxrank|lexxranklexxranklexxranklexxranklexxrank|lmao|mcqueen|mcqueens|mcqueenss|mehrab|mehrabmehrabmehrabmehrab|men|mens|metalheart|metalheartmetalheartmetalheartmetalheartmetalheartmetalheart|metalsonic|metalsonicexexe|mrbananadjojo|myayuayuayua|mybau|next|nextdat|nextdatnextdatnextdatnextdatnextdat|nextx|nextxx|numberone|numberones|numberoness|numberseven|office|officess|onyx|onyxx|porsc|porsche|porschetunar|porscrank|porscrankporscrankporscrank|poxx|poxxy|priletelivmayami|priletelivmayamipriletelivmayamipriletelivmayami|pt|pyt|python|qew|rankrankrank|rebirtha|rebirtharank|rebirtharankrebirtharank|rezer|rezere|rezeress|russian|ryzee|ryzeeb|ryzrank|saintlaurent|scrip|script|sezer|sezere|sezeresx|sheringggg|sikakakakaka|silik|silikininirank|silikon|silikone|silikonerank|silikoneranksilikoneranksilikonerank|silikonrank|silikonranksilikonrank|silikrank|simmms|simrank|siren|sirens|sirenseacreatu|sirenseacreatur|sirenseacreature|sirenseacreaturrank|siuu|siuurank|siuurankkk|sixthousand|sremon|srip|sriplara|sriplarasososos|srtdemonessa|srtrank|srtrankpuususu|start_learning|style|styles|suii|suiiirank|suiirank|sxazx|sybau|tentiics|tentiicsranking|thebest|three|threep|threepp|threepppipi|threepppipithreepppipithreepppipithreepppipithreepppipi|toomycas|toomycash|tuk|tut|tutpalentiitam|tututu|tututut|two|twop|twopp|twopples|twopplestwopplestwopplestwopplestwopples|ukrainian|valley|valleyrank|valleyrankvalleyrankvalleyrank|venomous|venomouss|venuss|venussrank|venussrankvenussrankvenussrankvenussrankvenussrank|vezer|vezere|vezeress|warmly|xxx|xxxx|xzero|yveskarl|yveskarlina|yveskarlinaka|yxx|yxxkai|zehrab|zehrabzehrabzehrabzehrabzehrab|zerorank|zerorankzerorankzerorankzerorank|zerotrust|zerotrusts|zerotrustss|zzz|pionyerererer|zig&sharko|misipipi&kakaku|voutbsdfnkkv|lalalxlalxdle|crchemolexczxsefv|lastcrenajfningie|dimariadebruynenen|lastcrecrecrecer|ligimitirovaniydaunin|cemolecrchrchemole|crchcrchcrchcrch|cecececececececece|zikozikzokzizozokz|crchadasdfgvfrgt|gansdifjjdifjkonjffdu|puntik|kuzshineko|kadisher|vnncvnmcmcvmncv|mymashine|vsexoroshoharry|nudemeeamputirovat|dizdizodi|csadadsfsav|sdvfenvbkjgnlbknkmopghk|nmvncmvnmckboikgjhbijojortgrdf|dameungrr|unwewewqwq|gagrgagfgdgxsfncdee|chhnbbgbghjve|crcvjkbkvnbjfgivjfde|iouyeryhefyrfvnnvreioaojf2q|nkkmlhhnnbbyuooopyytfv|sikioxoxcme|cposlsacmmcnjfdie|blyatutebyanetpravle|etojonnyetomoysinle|odinbiznesmenustavsiyotsvoyegostarika|tictoxocesnaveshatinogdaddedushku|vistoriyuonvikladivayetgrustniyeblete|lewiskasdkknknwoe|racecurse|noanotherpower|dislikeeverthynlovevelo|crchemolvkofdovosmcmoe|crzenxoaskxce|kaknasoxranenkaxe|zatofotkipizdatiyeele|rytttttt|anasnimetsmenyaremenlousvi|crchemaadsasdadad|yoxagzuvayoxunpoz|imyoungblackandrcihiadnpussylicker|letmeshowwhatyougiveup|yobraputatiriajd|copagangsmysfhnur|vmineocenmnogoonblkjfnv|doctorhannibalpsycho|yapyupizdatiyviskimolodoye|imgladifdjvjfdvnifnvrecvbryyee|eroutuwrfnmzxnj|etocecenskiyflot|goluboysahpmurnejdet|uusuasdaudodsuodaioasdau|hastworexes|baybaybygridlskdfrgreoji|kkhkhhkkjkjhkhkoji|potipotipoti|crchcscddddddddddsdlkjnfhkl|ooptoripitprittoiprt|prptprppeprepeppafroiguhtgksahs|rioioirrrroeoirpire|viytisuximizvodi|popaodkpaskpopofpajmamam|marlonmogspercentofpeople|tiutuosiojimvpsiieee|zinanzinsnedeji|izsamariamsimd|owiworweuwruworwwe|soliiiiiiinaranuebalat|modaiskustvokulinariya|xoxoxooxooxoxeeetoyavovremayaprisel|pizdecebaniystozasmertvnishite|ebaniyzavozastviiii|ebatttttttttt|socsinyourmouthe|bablateperebatpizdec|dvauksazactotisact|outofmymind|diaaaadajgaa|isdippsjjaias|ututututututrejfjwoejfpjqwp|nozamoyeobidniye|tushdlyauveliceniyaobyema|igogoogogogogogog|sitiporosaaututjj|porbugyy|zeoohyfrbn|ghyuhbrdyimmvtygnmybnmutycvbnhhubtrftc|nikadsidjiofsale|pozitivnoyevliyaniyeigr|debroutroutroute|ppsdjoscdjfvojfsnojnsjosonj|zughtjfrhegjhfeuewfwefhwfhu|vprincipeyamogutebepomocye|celuymenyanazlojidfienewjf|drruuuororiridididir|tvoyotecnaoralkatyue|ueleonoriestdoci|zdravstvuytesergeyvladimirovic|soniceandsasyyilimeem|vsevashipismafalyifotki|watisthisdokkwomwmamacoco|kilogramovitsteyke|posletakoyjenshini|zabiliibudemjitdalse|egegeggeeggemeoreoy|nikogonebudetprostopodpishi|crmovefveiuorhoe|creschemolecresclecreschemole|creschekgrfhrihiginggvfgigisthgifenjidhffkdnnvkjb)$"
))
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
